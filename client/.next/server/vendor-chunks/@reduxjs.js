/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./redux-toolkit.cjs.development.js */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.cjs.development.js\")\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1osSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLDZKQUE4RDtBQUNoRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L2Rpc3QvaW5kZXguanM/YTI5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWR1eC10b29sa2l0LmNqcy5wcm9kdWN0aW9uLm1pbi5qcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVkdXgtdG9vbGtpdC5janMuZGV2ZWxvcG1lbnQuanMnKVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./rtk-query.cjs.development.js */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.cjs.development.js\")\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3F1ZXJ5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1osSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLDJKQUEwRDtBQUM1RCIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L2Rpc3QvcXVlcnkvaW5kZXguanM/Mjc0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ydGstcXVlcnkuY2pzLnByb2R1Y3Rpb24ubWluLmpzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ydGstcXVlcnkuY2pzLmRldmVsb3BtZW50LmpzJylcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.esm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiProvider: () => (/* binding */ ApiProvider),\n/* harmony export */   createApi: () => (/* binding */ createApi),\n/* harmony export */   reactHooksModule: () => (/* binding */ reactHooksModule),\n/* harmony export */   reactHooksModuleName: () => (/* binding */ reactHooksModuleName)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @reduxjs/toolkit/query */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.cjs.development.js\");\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.cjs.development.js\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ \"(ssr)/./node_modules/react-redux/lib/index.js\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @reduxjs/toolkit/query */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/query/index.js\");\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_4__) if([\"default\",\"ApiProvider\",\"createApi\",\"reactHooksModule\",\"reactHooksModuleName\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nvar __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = function (obj, key, value) { return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : obj[key] = value; };\r\nvar __spreadValues = function (a, b) {\r\n    for (var prop in b || (b = {}))\r\n        if (__hasOwnProp.call(b, prop))\r\n            __defNormalProp(a, prop, b[prop]);\r\n    if (__getOwnPropSymbols)\r\n        for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {\r\n            var prop = _c[_i];\r\n            if (__propIsEnum.call(b, prop))\r\n                __defNormalProp(a, prop, b[prop]);\r\n        }\r\n    return a;\r\n};\r\nvar __spreadProps = function (a, b) { return __defProps(a, __getOwnPropDescs(b)); };\r\n// src/query/react/index.ts\r\n\r\n// src/query/react/buildHooks.ts\r\n\r\n\r\n\r\n\r\n// src/query/react/useSerializedStableValue.ts\r\n\r\nfunction useStableQueryArgs(queryArgs, serialize, endpointDefinition, endpointName) {\r\n    var incoming = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return ({\r\n        queryArgs: queryArgs,\r\n        serialized: typeof queryArgs == \"object\" ? serialize({ queryArgs: queryArgs, endpointDefinition: endpointDefinition, endpointName: endpointName }) : queryArgs\r\n    }); }, [queryArgs, serialize, endpointDefinition, endpointName]);\r\n    var cache2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(incoming);\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\r\n        if (cache2.current.serialized !== incoming.serialized) {\r\n            cache2.current = incoming;\r\n        }\r\n    }, [incoming]);\r\n    return cache2.current.serialized === incoming.serialized ? cache2.current.queryArgs : queryArgs;\r\n}\r\n// src/query/react/constants.ts\r\nvar UNINITIALIZED_VALUE = Symbol();\r\n// src/query/react/useShallowStableValue.ts\r\n\r\n\r\nfunction useShallowStableValue(value) {\r\n    var cache2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\r\n        if (!(0,react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual)(cache2.current, value)) {\r\n            cache2.current = value;\r\n        }\r\n    }, [value]);\r\n    return (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual)(cache2.current, value) ? cache2.current : value;\r\n}\r\n// src/query/defaultSerializeQueryArgs.ts\r\n\r\nvar cache = WeakMap ? new WeakMap() : void 0;\r\nvar defaultSerializeQueryArgs = function (_c) {\r\n    var endpointName = _c.endpointName, queryArgs = _c.queryArgs;\r\n    var serialized = \"\";\r\n    var cached = cache == null ? void 0 : cache.get(queryArgs);\r\n    if (typeof cached === \"string\") {\r\n        serialized = cached;\r\n    }\r\n    else {\r\n        var stringified = JSON.stringify(queryArgs, function (key, value) { return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(value) ? Object.keys(value).sort().reduce(function (acc, key2) {\r\n            acc[key2] = value[key2];\r\n            return acc;\r\n        }, {}) : value; });\r\n        if ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(queryArgs)) {\r\n            cache == null ? void 0 : cache.set(queryArgs, stringified);\r\n        }\r\n        serialized = stringified;\r\n    }\r\n    return endpointName + \"(\" + serialized + \")\";\r\n};\r\n// src/query/react/buildHooks.ts\r\nvar useIsomorphicLayoutEffect = typeof window !== \"undefined\" && !!window.document && !!window.document.createElement ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\nvar defaultMutationStateSelector = function (x) { return x; };\r\nvar noPendingQueryStateSelector = function (selected) {\r\n    if (selected.isUninitialized) {\r\n        return __spreadProps(__spreadValues({}, selected), {\r\n            isUninitialized: false,\r\n            isFetching: true,\r\n            isLoading: selected.data !== void 0 ? false : true,\r\n            status: _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.QueryStatus.pending\r\n        });\r\n    }\r\n    return selected;\r\n};\r\nfunction buildHooks(_c) {\r\n    var api = _c.api, _d = _c.moduleOptions, batch = _d.batch, useDispatch = _d.useDispatch, useSelector = _d.useSelector, useStore = _d.useStore, unstable__sideEffectsInRender = _d.unstable__sideEffectsInRender, serializeQueryArgs = _c.serializeQueryArgs, context = _c.context;\r\n    var usePossiblyImmediateEffect = unstable__sideEffectsInRender ? function (cb) { return cb(); } : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\n    return { buildQueryHooks: buildQueryHooks, buildMutationHook: buildMutationHook, usePrefetch: usePrefetch };\r\n    function queryStatePreSelector(currentState, lastResult, queryArgs) {\r\n        if ((lastResult == null ? void 0 : lastResult.endpointName) && currentState.isUninitialized) {\r\n            var endpointName = lastResult.endpointName;\r\n            var endpointDefinition = context.endpointDefinitions[endpointName];\r\n            if (serializeQueryArgs({\r\n                queryArgs: lastResult.originalArgs,\r\n                endpointDefinition: endpointDefinition,\r\n                endpointName: endpointName\r\n            }) === serializeQueryArgs({\r\n                queryArgs: queryArgs,\r\n                endpointDefinition: endpointDefinition,\r\n                endpointName: endpointName\r\n            }))\r\n                lastResult = void 0;\r\n        }\r\n        var data = currentState.isSuccess ? currentState.data : lastResult == null ? void 0 : lastResult.data;\r\n        if (data === void 0)\r\n            data = currentState.data;\r\n        var hasData = data !== void 0;\r\n        var isFetching = currentState.isLoading;\r\n        var isLoading = !hasData && isFetching;\r\n        var isSuccess = currentState.isSuccess || isFetching && hasData;\r\n        return __spreadProps(__spreadValues({}, currentState), {\r\n            data: data,\r\n            currentData: currentState.data,\r\n            isFetching: isFetching,\r\n            isLoading: isLoading,\r\n            isSuccess: isSuccess\r\n        });\r\n    }\r\n    function usePrefetch(endpointName, defaultOptions) {\r\n        var dispatch = useDispatch();\r\n        var stableDefaultOptions = useShallowStableValue(defaultOptions);\r\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (arg, options) { return dispatch(api.util.prefetch(endpointName, arg, __spreadValues(__spreadValues({}, stableDefaultOptions), options))); }, [endpointName, dispatch, stableDefaultOptions]);\r\n    }\r\n    function buildQueryHooks(name) {\r\n        var useQuerySubscription = function (arg, _c) {\r\n            var _d = _c === void 0 ? {} : _c, refetchOnReconnect = _d.refetchOnReconnect, refetchOnFocus = _d.refetchOnFocus, refetchOnMountOrArgChange = _d.refetchOnMountOrArgChange, _e = _d.skip, skip = _e === void 0 ? false : _e, _f = _d.pollingInterval, pollingInterval = _f === void 0 ? 0 : _f;\r\n            var initiate = api.endpoints[name].initiate;\r\n            var dispatch = useDispatch();\r\n            var stableArg = useStableQueryArgs(skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken : arg, defaultSerializeQueryArgs, context.endpointDefinitions[name], name);\r\n            var stableSubscriptionOptions = useShallowStableValue({\r\n                refetchOnReconnect: refetchOnReconnect,\r\n                refetchOnFocus: refetchOnFocus,\r\n                pollingInterval: pollingInterval\r\n            });\r\n            var lastRenderHadSubscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\r\n            var promiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\r\n            var _g = promiseRef.current || {}, queryCacheKey = _g.queryCacheKey, requestId = _g.requestId;\r\n            var currentRenderHasSubscription = false;\r\n            if (queryCacheKey && requestId) {\r\n                var returnedValue = dispatch(api.internalActions.internal_probeSubscription({\r\n                    queryCacheKey: queryCacheKey,\r\n                    requestId: requestId\r\n                }));\r\n                if (true) {\r\n                    if (typeof returnedValue !== \"boolean\") {\r\n                        throw new Error(\"Warning: Middleware for RTK-Query API at reducerPath \\\"\" + api.reducerPath + \"\\\" has not been added to the store.\\n    You must add the middleware for RTK-Query to function correctly!\");\r\n                    }\r\n                }\r\n                currentRenderHasSubscription = !!returnedValue;\r\n            }\r\n            var subscriptionRemoved = !currentRenderHasSubscription && lastRenderHadSubscription.current;\r\n            usePossiblyImmediateEffect(function () {\r\n                lastRenderHadSubscription.current = currentRenderHasSubscription;\r\n            });\r\n            usePossiblyImmediateEffect(function () {\r\n                if (subscriptionRemoved) {\r\n                    promiseRef.current = void 0;\r\n                }\r\n            }, [subscriptionRemoved]);\r\n            usePossiblyImmediateEffect(function () {\r\n                var _a;\r\n                var lastPromise = promiseRef.current;\r\n                if (typeof process !== \"undefined\" && \"development\" === \"removeMeOnCompilation\") {}\r\n                if (stableArg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken) {\r\n                    lastPromise == null ? void 0 : lastPromise.unsubscribe();\r\n                    promiseRef.current = void 0;\r\n                    return;\r\n                }\r\n                var lastSubscriptionOptions = (_a = promiseRef.current) == null ? void 0 : _a.subscriptionOptions;\r\n                if (!lastPromise || lastPromise.arg !== stableArg) {\r\n                    lastPromise == null ? void 0 : lastPromise.unsubscribe();\r\n                    var promise = dispatch(initiate(stableArg, {\r\n                        subscriptionOptions: stableSubscriptionOptions,\r\n                        forceRefetch: refetchOnMountOrArgChange\r\n                    }));\r\n                    promiseRef.current = promise;\r\n                }\r\n                else if (stableSubscriptionOptions !== lastSubscriptionOptions) {\r\n                    lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);\r\n                }\r\n            }, [\r\n                dispatch,\r\n                initiate,\r\n                refetchOnMountOrArgChange,\r\n                stableArg,\r\n                stableSubscriptionOptions,\r\n                subscriptionRemoved\r\n            ]);\r\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\r\n                return function () {\r\n                    var _a;\r\n                    (_a = promiseRef.current) == null ? void 0 : _a.unsubscribe();\r\n                    promiseRef.current = void 0;\r\n                };\r\n            }, []);\r\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return ({\r\n                refetch: function () {\r\n                    var _a;\r\n                    if (!promiseRef.current)\r\n                        throw new Error(\"Cannot refetch a query that has not been started yet.\");\r\n                    return (_a = promiseRef.current) == null ? void 0 : _a.refetch();\r\n                }\r\n            }); }, []);\r\n        };\r\n        var useLazyQuerySubscription = function (_c) {\r\n            var _d = _c === void 0 ? {} : _c, refetchOnReconnect = _d.refetchOnReconnect, refetchOnFocus = _d.refetchOnFocus, _e = _d.pollingInterval, pollingInterval = _e === void 0 ? 0 : _e;\r\n            var initiate = api.endpoints[name].initiate;\r\n            var dispatch = useDispatch();\r\n            var _f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(UNINITIALIZED_VALUE), arg = _f[0], setArg = _f[1];\r\n            var promiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\r\n            var stableSubscriptionOptions = useShallowStableValue({\r\n                refetchOnReconnect: refetchOnReconnect,\r\n                refetchOnFocus: refetchOnFocus,\r\n                pollingInterval: pollingInterval\r\n            });\r\n            usePossiblyImmediateEffect(function () {\r\n                var _a, _b;\r\n                var lastSubscriptionOptions = (_a = promiseRef.current) == null ? void 0 : _a.subscriptionOptions;\r\n                if (stableSubscriptionOptions !== lastSubscriptionOptions) {\r\n                    (_b = promiseRef.current) == null ? void 0 : _b.updateSubscriptionOptions(stableSubscriptionOptions);\r\n                }\r\n            }, [stableSubscriptionOptions]);\r\n            var subscriptionOptionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(stableSubscriptionOptions);\r\n            usePossiblyImmediateEffect(function () {\r\n                subscriptionOptionsRef.current = stableSubscriptionOptions;\r\n            }, [stableSubscriptionOptions]);\r\n            var trigger = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (arg2, preferCacheValue) {\r\n                if (preferCacheValue === void 0) { preferCacheValue = false; }\r\n                var promise;\r\n                batch(function () {\r\n                    var _a;\r\n                    (_a = promiseRef.current) == null ? void 0 : _a.unsubscribe();\r\n                    promiseRef.current = promise = dispatch(initiate(arg2, {\r\n                        subscriptionOptions: subscriptionOptionsRef.current,\r\n                        forceRefetch: !preferCacheValue\r\n                    }));\r\n                    setArg(arg2);\r\n                });\r\n                return promise;\r\n            }, [dispatch, initiate]);\r\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\r\n                return function () {\r\n                    var _a;\r\n                    (_a = promiseRef == null ? void 0 : promiseRef.current) == null ? void 0 : _a.unsubscribe();\r\n                };\r\n            }, []);\r\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\r\n                if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {\r\n                    trigger(arg, true);\r\n                }\r\n            }, [arg, trigger]);\r\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return [trigger, arg]; }, [trigger, arg]);\r\n        };\r\n        var useQueryState = function (arg, _c) {\r\n            var _d = _c === void 0 ? {} : _c, _e = _d.skip, skip = _e === void 0 ? false : _e, selectFromResult = _d.selectFromResult;\r\n            var select = api.endpoints[name].select;\r\n            var stableArg = useStableQueryArgs(skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken : arg, serializeQueryArgs, context.endpointDefinitions[name], name);\r\n            var lastValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\r\n            var selectDefaultResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.createSelector)([\r\n                select(stableArg),\r\n                function (_, lastResult) { return lastResult; },\r\n                function (_) { return stableArg; }\r\n            ], queryStatePreSelector); }, [select, stableArg]);\r\n            var querySelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return selectFromResult ? (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.createSelector)([selectDefaultResult], selectFromResult) : selectDefaultResult; }, [selectDefaultResult, selectFromResult]);\r\n            var currentState = useSelector(function (state) { return querySelector(state, lastValue.current); }, react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual);\r\n            var store = useStore();\r\n            var newLastValue = selectDefaultResult(store.getState(), lastValue.current);\r\n            useIsomorphicLayoutEffect(function () {\r\n                lastValue.current = newLastValue;\r\n            }, [newLastValue]);\r\n            return currentState;\r\n        };\r\n        return {\r\n            useQueryState: useQueryState,\r\n            useQuerySubscription: useQuerySubscription,\r\n            useLazyQuerySubscription: useLazyQuerySubscription,\r\n            useLazyQuery: function (options) {\r\n                var _c = useLazyQuerySubscription(options), trigger = _c[0], arg = _c[1];\r\n                var queryStateResults = useQueryState(arg, __spreadProps(__spreadValues({}, options), {\r\n                    skip: arg === UNINITIALIZED_VALUE\r\n                }));\r\n                var info = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return ({ lastArg: arg }); }, [arg]);\r\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return [trigger, queryStateResults, info]; }, [trigger, queryStateResults, info]);\r\n            },\r\n            useQuery: function (arg, options) {\r\n                var querySubscriptionResults = useQuerySubscription(arg, options);\r\n                var queryStateResults = useQueryState(arg, __spreadValues({\r\n                    selectFromResult: arg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.skipToken || (options == null ? void 0 : options.skip) ? void 0 : noPendingQueryStateSelector\r\n                }, options));\r\n                var data = queryStateResults.data, status = queryStateResults.status, isLoading = queryStateResults.isLoading, isSuccess = queryStateResults.isSuccess, isError = queryStateResults.isError, error = queryStateResults.error;\r\n                (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)({ data: data, status: status, isLoading: isLoading, isSuccess: isSuccess, isError: isError, error: error });\r\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return __spreadValues(__spreadValues({}, queryStateResults), querySubscriptionResults); }, [queryStateResults, querySubscriptionResults]);\r\n            }\r\n        };\r\n    }\r\n    function buildMutationHook(name) {\r\n        return function (_c) {\r\n            var _d = _c === void 0 ? {} : _c, _e = _d.selectFromResult, selectFromResult = _e === void 0 ? defaultMutationStateSelector : _e, fixedCacheKey = _d.fixedCacheKey;\r\n            var _f = api.endpoints[name], select = _f.select, initiate = _f.initiate;\r\n            var dispatch = useDispatch();\r\n            var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), promise = _g[0], setPromise = _g[1];\r\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () { return function () {\r\n                if (!(promise == null ? void 0 : promise.arg.fixedCacheKey)) {\r\n                    promise == null ? void 0 : promise.reset();\r\n                }\r\n            }; }, [promise]);\r\n            var triggerMutation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (arg) {\r\n                var promise2 = dispatch(initiate(arg, { fixedCacheKey: fixedCacheKey }));\r\n                setPromise(promise2);\r\n                return promise2;\r\n            }, [dispatch, initiate, fixedCacheKey]);\r\n            var requestId = (promise || {}).requestId;\r\n            var mutationSelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.createSelector)([select({ fixedCacheKey: fixedCacheKey, requestId: promise == null ? void 0 : promise.requestId })], selectFromResult); }, [select, promise, selectFromResult, fixedCacheKey]);\r\n            var currentState = useSelector(mutationSelector, react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual);\r\n            var originalArgs = fixedCacheKey == null ? promise == null ? void 0 : promise.arg.originalArgs : void 0;\r\n            var reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\r\n                batch(function () {\r\n                    if (promise) {\r\n                        setPromise(void 0);\r\n                    }\r\n                    if (fixedCacheKey) {\r\n                        dispatch(api.internalActions.removeMutationResult({\r\n                            requestId: requestId,\r\n                            fixedCacheKey: fixedCacheKey\r\n                        }));\r\n                    }\r\n                });\r\n            }, [dispatch, fixedCacheKey, promise, requestId]);\r\n            var endpointName = currentState.endpointName, data = currentState.data, status = currentState.status, isLoading = currentState.isLoading, isSuccess = currentState.isSuccess, isError = currentState.isError, error = currentState.error;\r\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)({\r\n                endpointName: endpointName,\r\n                data: data,\r\n                status: status,\r\n                isLoading: isLoading,\r\n                isSuccess: isSuccess,\r\n                isError: isError,\r\n                error: error\r\n            });\r\n            var finalState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return __spreadProps(__spreadValues({}, currentState), { originalArgs: originalArgs, reset: reset }); }, [currentState, originalArgs, reset]);\r\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return [triggerMutation, finalState]; }, [triggerMutation, finalState]);\r\n        };\r\n    }\r\n}\r\n// src/query/endpointDefinitions.ts\r\nvar DefinitionType;\r\n(function (DefinitionType2) {\r\n    DefinitionType2[\"query\"] = \"query\";\r\n    DefinitionType2[\"mutation\"] = \"mutation\";\r\n})(DefinitionType || (DefinitionType = {}));\r\nfunction isQueryDefinition(e) {\r\n    return e.type === DefinitionType.query;\r\n}\r\nfunction isMutationDefinition(e) {\r\n    return e.type === DefinitionType.mutation;\r\n}\r\n// src/query/utils/capitalize.ts\r\nfunction capitalize(str) {\r\n    return str.replace(str[0], str[0].toUpperCase());\r\n}\r\n// src/query/tsHelpers.ts\r\nfunction safeAssign(target) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    Object.assign.apply(Object, __spreadArray([target], args));\r\n}\r\n// src/query/react/module.ts\r\n\r\nvar reactHooksModuleName = /* @__PURE__ */ Symbol();\r\nvar reactHooksModule = function (_c) {\r\n    var _d = _c === void 0 ? {} : _c, _e = _d.batch, batch = _e === void 0 ? react_redux__WEBPACK_IMPORTED_MODULE_1__.batch : _e, _f = _d.useDispatch, useDispatch = _f === void 0 ? react_redux__WEBPACK_IMPORTED_MODULE_1__.useDispatch : _f, _g = _d.useSelector, useSelector = _g === void 0 ? react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector : _g, _h = _d.useStore, useStore = _h === void 0 ? react_redux__WEBPACK_IMPORTED_MODULE_1__.useStore : _h, _j = _d.unstable__sideEffectsInRender, unstable__sideEffectsInRender = _j === void 0 ? false : _j;\r\n    return ({\r\n        name: reactHooksModuleName,\r\n        init: function (api, _c, context) {\r\n            var serializeQueryArgs = _c.serializeQueryArgs;\r\n            var anyApi = api;\r\n            var _d = buildHooks({\r\n                api: api,\r\n                moduleOptions: {\r\n                    batch: batch,\r\n                    useDispatch: useDispatch,\r\n                    useSelector: useSelector,\r\n                    useStore: useStore,\r\n                    unstable__sideEffectsInRender: unstable__sideEffectsInRender\r\n                },\r\n                serializeQueryArgs: serializeQueryArgs,\r\n                context: context\r\n            }), buildQueryHooks = _d.buildQueryHooks, buildMutationHook = _d.buildMutationHook, usePrefetch = _d.usePrefetch;\r\n            safeAssign(anyApi, { usePrefetch: usePrefetch });\r\n            safeAssign(context, { batch: batch });\r\n            return {\r\n                injectEndpoint: function (endpointName, definition) {\r\n                    if (isQueryDefinition(definition)) {\r\n                        var _c = buildQueryHooks(endpointName), useQuery = _c.useQuery, useLazyQuery = _c.useLazyQuery, useLazyQuerySubscription = _c.useLazyQuerySubscription, useQueryState = _c.useQueryState, useQuerySubscription = _c.useQuerySubscription;\r\n                        safeAssign(anyApi.endpoints[endpointName], {\r\n                            useQuery: useQuery,\r\n                            useLazyQuery: useLazyQuery,\r\n                            useLazyQuerySubscription: useLazyQuerySubscription,\r\n                            useQueryState: useQueryState,\r\n                            useQuerySubscription: useQuerySubscription\r\n                        });\r\n                        api[\"use\" + capitalize(endpointName) + \"Query\"] = useQuery;\r\n                        api[\"useLazy\" + capitalize(endpointName) + \"Query\"] = useLazyQuery;\r\n                    }\r\n                    else if (isMutationDefinition(definition)) {\r\n                        var useMutation = buildMutationHook(endpointName);\r\n                        safeAssign(anyApi.endpoints[endpointName], {\r\n                            useMutation: useMutation\r\n                        });\r\n                        api[\"use\" + capitalize(endpointName) + \"Mutation\"] = useMutation;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    });\r\n};\r\n// src/query/react/index.ts\r\n\r\n// src/query/react/ApiProvider.tsx\r\n\r\n\r\n\r\n\r\n\r\nfunction ApiProvider(props) {\r\n    var store = react__WEBPACK_IMPORTED_MODULE_0___default().useState(function () {\r\n        var _c;\r\n        return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.configureStore)({\r\n            reducer: (_c = {},\r\n                _c[props.api.reducerPath] = props.api.reducer,\r\n                _c),\r\n            middleware: function (gDM) { return gDM().concat(props.api.middleware); }\r\n        });\r\n    })[0];\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () { return props.setupListeners === false ? void 0 : (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.setupListeners)(store.dispatch, props.setupListeners); }, [props.setupListeners, store.dispatch]);\r\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_redux__WEBPACK_IMPORTED_MODULE_1__.Provider, {\r\n        store: store,\r\n        context: props.context\r\n    }, props.children);\r\n}\r\n// src/query/react/index.ts\r\nvar createApi = /* @__PURE__ */ (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.buildCreateApi)((0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.coreModule)(), reactHooksModule());\r\n\r\n//# sourceMappingURL=rtk-query-react.esm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.cjs.development.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/rtk-query.cjs.development.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("var __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nvar __create = Object.create;\r\nvar __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = function (obj, key, value) { return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : obj[key] = value; };\r\nvar __spreadValues = function (a, b) {\r\n    for (var prop in b || (b = {}))\r\n        if (__hasOwnProp.call(b, prop))\r\n            __defNormalProp(a, prop, b[prop]);\r\n    if (__getOwnPropSymbols)\r\n        for (var _j = 0, _k = __getOwnPropSymbols(b); _j < _k.length; _j++) {\r\n            var prop = _k[_j];\r\n            if (__propIsEnum.call(b, prop))\r\n                __defNormalProp(a, prop, b[prop]);\r\n        }\r\n    return a;\r\n};\r\nvar __spreadProps = function (a, b) { return __defProps(a, __getOwnPropDescs(b)); };\r\nvar __markAsModule = function (target) { return __defProp(target, \"__esModule\", { value: true }); };\r\nvar __objRest = function (source, exclude) {\r\n    var target = {};\r\n    for (var prop in source)\r\n        if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\r\n            target[prop] = source[prop];\r\n    if (source != null && __getOwnPropSymbols)\r\n        for (var _j = 0, _k = __getOwnPropSymbols(source); _j < _k.length; _j++) {\r\n            var prop = _k[_j];\r\n            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\r\n                target[prop] = source[prop];\r\n        }\r\n    return target;\r\n};\r\nvar __export = function (target, all) {\r\n    for (var name in all)\r\n        __defProp(target, name, { get: all[name], enumerable: true });\r\n};\r\nvar __reExport = function (target, module2, desc) {\r\n    if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\r\n        var _loop_1 = function (key) {\r\n            if (!__hasOwnProp.call(target, key) && key !== \"default\")\r\n                __defProp(target, key, { get: function () { return module2[key]; }, enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\r\n        };\r\n        for (var _j = 0, _k = __getOwnPropNames(module2); _j < _k.length; _j++) {\r\n            var key = _k[_j];\r\n            _loop_1(key);\r\n        }\r\n    }\r\n    return target;\r\n};\r\nvar __toModule = function (module2) {\r\n    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? { get: function () { return module2.default; }, enumerable: true } : { value: module2, enumerable: true })), module2);\r\n};\r\nvar __async = function (__this, __arguments, generator) {\r\n    return new Promise(function (resolve, reject) {\r\n        var fulfilled = function (value) {\r\n            try {\r\n                step(generator.next(value));\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        };\r\n        var rejected = function (value) {\r\n            try {\r\n                step(generator.throw(value));\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        };\r\n        var step = function (x) { return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected); };\r\n        step((generator = generator.apply(__this, __arguments)).next());\r\n    });\r\n};\r\n// src/query/index.ts\r\n__markAsModule(exports);\r\n__export(exports, {\r\n    QueryStatus: function () { return QueryStatus; },\r\n    buildCreateApi: function () { return buildCreateApi; },\r\n    copyWithStructuralSharing: function () { return copyWithStructuralSharing; },\r\n    coreModule: function () { return coreModule; },\r\n    coreModuleName: function () { return coreModuleName; },\r\n    createApi: function () { return createApi; },\r\n    defaultSerializeQueryArgs: function () { return defaultSerializeQueryArgs; },\r\n    fakeBaseQuery: function () { return fakeBaseQuery; },\r\n    fetchBaseQuery: function () { return fetchBaseQuery; },\r\n    retry: function () { return retry; },\r\n    setupListeners: function () { return setupListeners; },\r\n    skipSelector: function () { return skipSelector; },\r\n    skipToken: function () { return skipToken; }\r\n});\r\n// src/query/core/apiState.ts\r\nvar QueryStatus;\r\n(function (QueryStatus2) {\r\n    QueryStatus2[\"uninitialized\"] = \"uninitialized\";\r\n    QueryStatus2[\"pending\"] = \"pending\";\r\n    QueryStatus2[\"fulfilled\"] = \"fulfilled\";\r\n    QueryStatus2[\"rejected\"] = \"rejected\";\r\n})(QueryStatus || (QueryStatus = {}));\r\nfunction getRequestStatusFlags(status) {\r\n    return {\r\n        status: status,\r\n        isUninitialized: status === QueryStatus.uninitialized,\r\n        isLoading: status === QueryStatus.pending,\r\n        isSuccess: status === QueryStatus.fulfilled,\r\n        isError: status === QueryStatus.rejected\r\n    };\r\n}\r\n// src/query/utils/isAbsoluteUrl.ts\r\nfunction isAbsoluteUrl(url) {\r\n    return new RegExp(\"(^|:)//\").test(url);\r\n}\r\n// src/query/utils/joinUrls.ts\r\nvar withoutTrailingSlash = function (url) { return url.replace(/\\/$/, \"\"); };\r\nvar withoutLeadingSlash = function (url) { return url.replace(/^\\//, \"\"); };\r\nfunction joinUrls(base, url) {\r\n    if (!base) {\r\n        return url;\r\n    }\r\n    if (!url) {\r\n        return base;\r\n    }\r\n    if (isAbsoluteUrl(url)) {\r\n        return url;\r\n    }\r\n    var delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\r\n    base = withoutTrailingSlash(base);\r\n    url = withoutLeadingSlash(url);\r\n    return \"\" + base + delimiter + url;\r\n}\r\n// src/query/utils/flatten.ts\r\nvar flatten = function (arr) { return [].concat.apply([], arr); };\r\n// src/query/utils/isOnline.ts\r\nfunction isOnline() {\r\n    return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\r\n}\r\n// src/query/utils/isDocumentVisible.ts\r\nfunction isDocumentVisible() {\r\n    if (typeof document === \"undefined\") {\r\n        return true;\r\n    }\r\n    return document.visibilityState !== \"hidden\";\r\n}\r\n// src/query/utils/copyWithStructuralSharing.ts\r\nvar import_toolkit = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar isPlainObject = import_toolkit.isPlainObject;\r\nfunction copyWithStructuralSharing(oldObj, newObj) {\r\n    if (oldObj === newObj || !(isPlainObject(oldObj) && isPlainObject(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\r\n        return newObj;\r\n    }\r\n    var newKeys = Object.keys(newObj);\r\n    var oldKeys = Object.keys(oldObj);\r\n    var isSameObject = newKeys.length === oldKeys.length;\r\n    var mergeObj = Array.isArray(newObj) ? [] : {};\r\n    for (var _j = 0, newKeys_1 = newKeys; _j < newKeys_1.length; _j++) {\r\n        var key = newKeys_1[_j];\r\n        mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\r\n        if (isSameObject)\r\n            isSameObject = oldObj[key] === mergeObj[key];\r\n    }\r\n    return isSameObject ? oldObj : mergeObj;\r\n}\r\n// src/query/fetchBaseQuery.ts\r\nvar import_toolkit2 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar defaultFetchFn = function () {\r\n    var args = [];\r\n    for (var _j = 0; _j < arguments.length; _j++) {\r\n        args[_j] = arguments[_j];\r\n    }\r\n    return fetch.apply(void 0, args);\r\n};\r\nvar defaultValidateStatus = function (response) { return response.status >= 200 && response.status <= 299; };\r\nvar defaultIsJsonContentType = function (headers) { return /ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\"); };\r\nfunction stripUndefined(obj) {\r\n    if (!(0, import_toolkit2.isPlainObject)(obj)) {\r\n        return obj;\r\n    }\r\n    var copy = __spreadValues({}, obj);\r\n    for (var _j = 0, _k = Object.entries(copy); _j < _k.length; _j++) {\r\n        var _l = _k[_j], k = _l[0], v = _l[1];\r\n        if (v === void 0)\r\n            delete copy[k];\r\n    }\r\n    return copy;\r\n}\r\nfunction fetchBaseQuery(_a) {\r\n    var _this = this;\r\n    if (_a === void 0) { _a = {}; }\r\n    var _b = _a, baseUrl = _b.baseUrl, _j = _b.prepareHeaders, prepareHeaders = _j === void 0 ? function (x) { return x; } : _j, _k = _b.fetchFn, fetchFn = _k === void 0 ? defaultFetchFn : _k, paramsSerializer = _b.paramsSerializer, _l = _b.isJsonContentType, isJsonContentType = _l === void 0 ? defaultIsJsonContentType : _l, _m = _b.jsonContentType, jsonContentType = _m === void 0 ? \"application/json\" : _m, jsonReplacer = _b.jsonReplacer, defaultTimeout = _b.timeout, globalResponseHandler = _b.responseHandler, globalValidateStatus = _b.validateStatus, baseFetchOptions = __objRest(_b, [\r\n        \"baseUrl\",\r\n        \"prepareHeaders\",\r\n        \"fetchFn\",\r\n        \"paramsSerializer\",\r\n        \"isJsonContentType\",\r\n        \"jsonContentType\",\r\n        \"jsonReplacer\",\r\n        \"timeout\",\r\n        \"responseHandler\",\r\n        \"validateStatus\"\r\n    ]);\r\n    if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\r\n        console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\r\n    }\r\n    return function (arg, api) { return __async(_this, null, function () {\r\n        var signal, getState, extra, endpoint, forced, type, meta, _a2, url, _j, headers, _k, params, _l, responseHandler, _m, validateStatus, _o, timeout, rest, config, _p, isJsonifiable, divider, query, request, requestClone, response, timedOut, timeoutId, e_1, responseClone, resultData, responseText, handleResponseError_1, e_2;\r\n        return __generator(this, function (_q) {\r\n            switch (_q.label) {\r\n                case 0:\r\n                    signal = api.signal, getState = api.getState, extra = api.extra, endpoint = api.endpoint, forced = api.forced, type = api.type;\r\n                    _a2 = typeof arg == \"string\" ? { url: arg } : arg, url = _a2.url, _j = _a2.headers, headers = _j === void 0 ? new Headers(baseFetchOptions.headers) : _j, _k = _a2.params, params = _k === void 0 ? void 0 : _k, _l = _a2.responseHandler, responseHandler = _l === void 0 ? globalResponseHandler != null ? globalResponseHandler : \"json\" : _l, _m = _a2.validateStatus, validateStatus = _m === void 0 ? globalValidateStatus != null ? globalValidateStatus : defaultValidateStatus : _m, _o = _a2.timeout, timeout = _o === void 0 ? defaultTimeout : _o, rest = __objRest(_a2, [\r\n                        \"url\",\r\n                        \"headers\",\r\n                        \"params\",\r\n                        \"responseHandler\",\r\n                        \"validateStatus\",\r\n                        \"timeout\"\r\n                    ]);\r\n                    config = __spreadValues(__spreadProps(__spreadValues({}, baseFetchOptions), {\r\n                        signal: signal\r\n                    }), rest);\r\n                    headers = new Headers(stripUndefined(headers));\r\n                    _p = config;\r\n                    return [4 /*yield*/, prepareHeaders(headers, {\r\n                            getState: getState,\r\n                            extra: extra,\r\n                            endpoint: endpoint,\r\n                            forced: forced,\r\n                            type: type\r\n                        })];\r\n                case 1:\r\n                    _p.headers = (_q.sent()) || headers;\r\n                    isJsonifiable = function (body) { return typeof body === \"object\" && ((0, import_toolkit2.isPlainObject)(body) || Array.isArray(body) || typeof body.toJSON === \"function\"); };\r\n                    if (!config.headers.has(\"content-type\") && isJsonifiable(config.body)) {\r\n                        config.headers.set(\"content-type\", jsonContentType);\r\n                    }\r\n                    if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\r\n                        config.body = JSON.stringify(config.body, jsonReplacer);\r\n                    }\r\n                    if (params) {\r\n                        divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\r\n                        query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\r\n                        url += divider + query;\r\n                    }\r\n                    url = joinUrls(baseUrl, url);\r\n                    request = new Request(url, config);\r\n                    requestClone = new Request(url, config);\r\n                    meta = { request: requestClone };\r\n                    timedOut = false, timeoutId = timeout && setTimeout(function () {\r\n                        timedOut = true;\r\n                        api.abort();\r\n                    }, timeout);\r\n                    _q.label = 2;\r\n                case 2:\r\n                    _q.trys.push([2, 4, 5, 6]);\r\n                    return [4 /*yield*/, fetchFn(request)];\r\n                case 3:\r\n                    response = _q.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 4:\r\n                    e_1 = _q.sent();\r\n                    return [2 /*return*/, {\r\n                            error: {\r\n                                status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\r\n                                error: String(e_1)\r\n                            },\r\n                            meta: meta\r\n                        }];\r\n                case 5:\r\n                    if (timeoutId)\r\n                        clearTimeout(timeoutId);\r\n                    return [7 /*endfinally*/];\r\n                case 6:\r\n                    responseClone = response.clone();\r\n                    meta.response = responseClone;\r\n                    responseText = \"\";\r\n                    _q.label = 7;\r\n                case 7:\r\n                    _q.trys.push([7, 9, , 10]);\r\n                    return [4 /*yield*/, Promise.all([\r\n                            handleResponse(response, responseHandler).then(function (r) { return resultData = r; }, function (e) { return handleResponseError_1 = e; }),\r\n                            responseClone.text().then(function (r) { return responseText = r; }, function () {\r\n                            })\r\n                        ])];\r\n                case 8:\r\n                    _q.sent();\r\n                    if (handleResponseError_1)\r\n                        throw handleResponseError_1;\r\n                    return [3 /*break*/, 10];\r\n                case 9:\r\n                    e_2 = _q.sent();\r\n                    return [2 /*return*/, {\r\n                            error: {\r\n                                status: \"PARSING_ERROR\",\r\n                                originalStatus: response.status,\r\n                                data: responseText,\r\n                                error: String(e_2)\r\n                            },\r\n                            meta: meta\r\n                        }];\r\n                case 10: return [2 /*return*/, validateStatus(response, resultData) ? {\r\n                        data: resultData,\r\n                        meta: meta\r\n                    } : {\r\n                        error: {\r\n                            status: response.status,\r\n                            data: resultData\r\n                        },\r\n                        meta: meta\r\n                    }];\r\n            }\r\n        });\r\n    }); };\r\n    function handleResponse(response, responseHandler) {\r\n        return __async(this, null, function () {\r\n            var text;\r\n            return __generator(this, function (_j) {\r\n                switch (_j.label) {\r\n                    case 0:\r\n                        if (typeof responseHandler === \"function\") {\r\n                            return [2 /*return*/, responseHandler(response)];\r\n                        }\r\n                        if (responseHandler === \"content-type\") {\r\n                            responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\r\n                        }\r\n                        if (!(responseHandler === \"json\")) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, response.text()];\r\n                    case 1:\r\n                        text = _j.sent();\r\n                        return [2 /*return*/, text.length ? JSON.parse(text) : null];\r\n                    case 2: return [2 /*return*/, response.text()];\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n// src/query/HandledError.ts\r\nvar HandledError = /** @class */ (function () {\r\n    function HandledError(value, meta) {\r\n        if (meta === void 0) { meta = void 0; }\r\n        this.value = value;\r\n        this.meta = meta;\r\n    }\r\n    return HandledError;\r\n}());\r\n// src/query/retry.ts\r\nfunction defaultBackoff(attempt, maxRetries) {\r\n    if (attempt === void 0) { attempt = 0; }\r\n    if (maxRetries === void 0) { maxRetries = 5; }\r\n    return __async(this, null, function () {\r\n        var attempts, timeout;\r\n        return __generator(this, function (_j) {\r\n            switch (_j.label) {\r\n                case 0:\r\n                    attempts = Math.min(attempt, maxRetries);\r\n                    timeout = ~~((Math.random() + 0.4) * (300 << attempts));\r\n                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(function (res) { return resolve(res); }, timeout); })];\r\n                case 1:\r\n                    _j.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction fail(e) {\r\n    throw Object.assign(new HandledError({ error: e }), {\r\n        throwImmediately: true\r\n    });\r\n}\r\nvar EMPTY_OPTIONS = {};\r\nvar retryWithBackoff = function (baseQuery, defaultOptions) { return function (args, api, extraOptions) { return __async(void 0, null, function () {\r\n    var possibleMaxRetries, maxRetries, defaultRetryCondition, options, retry2, result, e_3;\r\n    return __generator(this, function (_j) {\r\n        switch (_j.label) {\r\n            case 0:\r\n                possibleMaxRetries = [\r\n                    5,\r\n                    (defaultOptions || EMPTY_OPTIONS).maxRetries,\r\n                    (extraOptions || EMPTY_OPTIONS).maxRetries\r\n                ].filter(function (x) { return x !== void 0; });\r\n                maxRetries = possibleMaxRetries.slice(-1)[0];\r\n                defaultRetryCondition = function (_, __, _j) {\r\n                    var attempt = _j.attempt;\r\n                    return attempt <= maxRetries;\r\n                };\r\n                options = __spreadValues(__spreadValues({\r\n                    maxRetries: maxRetries,\r\n                    backoff: defaultBackoff,\r\n                    retryCondition: defaultRetryCondition\r\n                }, defaultOptions), extraOptions);\r\n                retry2 = 0;\r\n                _j.label = 1;\r\n            case 1:\r\n                if (false) {}\r\n                _j.label = 2;\r\n            case 2:\r\n                _j.trys.push([2, 4, , 6]);\r\n                return [4 /*yield*/, baseQuery(args, api, extraOptions)];\r\n            case 3:\r\n                result = _j.sent();\r\n                if (result.error) {\r\n                    throw new HandledError(result);\r\n                }\r\n                return [2 /*return*/, result];\r\n            case 4:\r\n                e_3 = _j.sent();\r\n                retry2++;\r\n                if (e_3.throwImmediately) {\r\n                    if (e_3 instanceof HandledError) {\r\n                        return [2 /*return*/, e_3.value];\r\n                    }\r\n                    throw e_3;\r\n                }\r\n                if (e_3 instanceof HandledError && !options.retryCondition(e_3.value.error, args, {\r\n                    attempt: retry2,\r\n                    baseQueryApi: api,\r\n                    extraOptions: extraOptions\r\n                })) {\r\n                    return [2 /*return*/, e_3.value];\r\n                }\r\n                return [4 /*yield*/, options.backoff(retry2, options.maxRetries)];\r\n            case 5:\r\n                _j.sent();\r\n                return [3 /*break*/, 6];\r\n            case 6: return [3 /*break*/, 1];\r\n            case 7: return [2 /*return*/];\r\n        }\r\n    });\r\n}); }; };\r\nvar retry = /* @__PURE__ */ Object.assign(retryWithBackoff, { fail: fail });\r\n// src/query/core/setupListeners.ts\r\nvar import_toolkit3 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar onFocus = /* @__PURE__ */ (0, import_toolkit3.createAction)(\"__rtkq/focused\");\r\nvar onFocusLost = /* @__PURE__ */ (0, import_toolkit3.createAction)(\"__rtkq/unfocused\");\r\nvar onOnline = /* @__PURE__ */ (0, import_toolkit3.createAction)(\"__rtkq/online\");\r\nvar onOffline = /* @__PURE__ */ (0, import_toolkit3.createAction)(\"__rtkq/offline\");\r\nvar initialized = false;\r\nfunction setupListeners(dispatch, customHandler) {\r\n    function defaultHandler() {\r\n        var handleFocus = function () { return dispatch(onFocus()); };\r\n        var handleFocusLost = function () { return dispatch(onFocusLost()); };\r\n        var handleOnline = function () { return dispatch(onOnline()); };\r\n        var handleOffline = function () { return dispatch(onOffline()); };\r\n        var handleVisibilityChange = function () {\r\n            if (window.document.visibilityState === \"visible\") {\r\n                handleFocus();\r\n            }\r\n            else {\r\n                handleFocusLost();\r\n            }\r\n        };\r\n        if (!initialized) {\r\n            if (typeof window !== \"undefined\" && window.addEventListener) {\r\n                window.addEventListener(\"visibilitychange\", handleVisibilityChange, false);\r\n                window.addEventListener(\"focus\", handleFocus, false);\r\n                window.addEventListener(\"online\", handleOnline, false);\r\n                window.addEventListener(\"offline\", handleOffline, false);\r\n                initialized = true;\r\n            }\r\n        }\r\n        var unsubscribe = function () {\r\n            window.removeEventListener(\"focus\", handleFocus);\r\n            window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n            window.removeEventListener(\"online\", handleOnline);\r\n            window.removeEventListener(\"offline\", handleOffline);\r\n            initialized = false;\r\n        };\r\n        return unsubscribe;\r\n    }\r\n    return customHandler ? customHandler(dispatch, { onFocus: onFocus, onFocusLost: onFocusLost, onOffline: onOffline, onOnline: onOnline }) : defaultHandler();\r\n}\r\n// src/query/core/buildSelectors.ts\r\nvar import_toolkit7 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\n// src/query/endpointDefinitions.ts\r\nvar DefinitionType;\r\n(function (DefinitionType2) {\r\n    DefinitionType2[\"query\"] = \"query\";\r\n    DefinitionType2[\"mutation\"] = \"mutation\";\r\n})(DefinitionType || (DefinitionType = {}));\r\nfunction isQueryDefinition(e) {\r\n    return e.type === DefinitionType.query;\r\n}\r\nfunction isMutationDefinition(e) {\r\n    return e.type === DefinitionType.mutation;\r\n}\r\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\r\n    if (isFunction(description)) {\r\n        return description(result, error, queryArg, meta).map(expandTagDescription).map(assertTagTypes);\r\n    }\r\n    if (Array.isArray(description)) {\r\n        return description.map(expandTagDescription).map(assertTagTypes);\r\n    }\r\n    return [];\r\n}\r\nfunction isFunction(t) {\r\n    return typeof t === \"function\";\r\n}\r\nfunction expandTagDescription(description) {\r\n    return typeof description === \"string\" ? { type: description } : description;\r\n}\r\n// src/query/core/buildSlice.ts\r\nvar import_toolkit6 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\n// src/query/utils/isNotNullish.ts\r\nfunction isNotNullish(v) {\r\n    return v != null;\r\n}\r\n// src/query/core/buildInitiate.ts\r\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\r\nvar isUpsertQuery = function (arg) { return typeof arg[forceQueryFnSymbol] === \"function\"; };\r\nfunction buildInitiate(_j) {\r\n    var serializeQueryArgs = _j.serializeQueryArgs, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, api = _j.api, context = _j.context;\r\n    var runningQueries = new Map();\r\n    var runningMutations = new Map();\r\n    var _k = api.internalActions, unsubscribeQueryResult = _k.unsubscribeQueryResult, removeMutationResult = _k.removeMutationResult, updateSubscriptionOptions = _k.updateSubscriptionOptions;\r\n    return {\r\n        buildInitiateQuery: buildInitiateQuery,\r\n        buildInitiateMutation: buildInitiateMutation,\r\n        getRunningQueryThunk: getRunningQueryThunk,\r\n        getRunningMutationThunk: getRunningMutationThunk,\r\n        getRunningQueriesThunk: getRunningQueriesThunk,\r\n        getRunningMutationsThunk: getRunningMutationsThunk,\r\n        getRunningOperationPromises: getRunningOperationPromises,\r\n        removalWarning: removalWarning\r\n    };\r\n    function removalWarning() {\r\n        throw new Error(\"This method had to be removed due to a conceptual bug in RTK.\\n       Please see https://github.com/reduxjs/redux-toolkit/pull/2481 for details.\\n       See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for new guidance on SSR.\");\r\n    }\r\n    function getRunningOperationPromises() {\r\n        if (typeof process !== \"undefined\" && true) {\r\n            removalWarning();\r\n        }\r\n        else {\r\n            var extract = function (v) { return Array.from(v.values()).flatMap(function (queriesForStore) { return queriesForStore ? Object.values(queriesForStore) : []; }); };\r\n            return __spreadArray(__spreadArray([], extract(runningQueries)), extract(runningMutations)).filter(isNotNullish);\r\n        }\r\n    }\r\n    function getRunningQueryThunk(endpointName, queryArgs) {\r\n        return function (dispatch) {\r\n            var _a;\r\n            var endpointDefinition = context.endpointDefinitions[endpointName];\r\n            var queryCacheKey = serializeQueryArgs({\r\n                queryArgs: queryArgs,\r\n                endpointDefinition: endpointDefinition,\r\n                endpointName: endpointName\r\n            });\r\n            return (_a = runningQueries.get(dispatch)) == null ? void 0 : _a[queryCacheKey];\r\n        };\r\n    }\r\n    function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\r\n        return function (dispatch) {\r\n            var _a;\r\n            return (_a = runningMutations.get(dispatch)) == null ? void 0 : _a[fixedCacheKeyOrRequestId];\r\n        };\r\n    }\r\n    function getRunningQueriesThunk() {\r\n        return function (dispatch) { return Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish); };\r\n    }\r\n    function getRunningMutationsThunk() {\r\n        return function (dispatch) { return Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish); };\r\n    }\r\n    function middlewareWarning(dispatch) {\r\n        if (true) {\r\n            if (middlewareWarning.triggered)\r\n                return;\r\n            var registered = dispatch(api.internalActions.internal_probeSubscription({\r\n                queryCacheKey: \"DOES_NOT_EXIST\",\r\n                requestId: \"DUMMY_REQUEST_ID\"\r\n            }));\r\n            middlewareWarning.triggered = true;\r\n            if (typeof registered !== \"boolean\") {\r\n                throw new Error(\"Warning: Middleware for RTK-Query API at reducerPath \\\"\" + api.reducerPath + \"\\\" has not been added to the store.\\nYou must add the middleware for RTK-Query to function correctly!\");\r\n            }\r\n        }\r\n    }\r\n    function buildInitiateQuery(endpointName, endpointDefinition) {\r\n        var queryAction = function (arg, _j) {\r\n            var _k = _j === void 0 ? {} : _j, _l = _k.subscribe, subscribe = _l === void 0 ? true : _l, forceRefetch = _k.forceRefetch, subscriptionOptions = _k.subscriptionOptions, _m = forceQueryFnSymbol, forceQueryFn = _k[_m];\r\n            return function (dispatch, getState) {\r\n                var _j;\r\n                var _a;\r\n                var queryCacheKey = serializeQueryArgs({\r\n                    queryArgs: arg,\r\n                    endpointDefinition: endpointDefinition,\r\n                    endpointName: endpointName\r\n                });\r\n                var thunk = queryThunk((_j = {\r\n                        type: \"query\",\r\n                        subscribe: subscribe,\r\n                        forceRefetch: forceRefetch,\r\n                        subscriptionOptions: subscriptionOptions,\r\n                        endpointName: endpointName,\r\n                        originalArgs: arg,\r\n                        queryCacheKey: queryCacheKey\r\n                    },\r\n                    _j[forceQueryFnSymbol] = forceQueryFn,\r\n                    _j));\r\n                var selector = api.endpoints[endpointName].select(arg);\r\n                var thunkResult = dispatch(thunk);\r\n                var stateAfter = selector(getState());\r\n                middlewareWarning(dispatch);\r\n                var requestId = thunkResult.requestId, abort = thunkResult.abort;\r\n                var skippedSynchronously = stateAfter.requestId !== requestId;\r\n                var runningQuery = (_a = runningQueries.get(dispatch)) == null ? void 0 : _a[queryCacheKey];\r\n                var selectFromState = function () { return selector(getState()); };\r\n                var statePromise = Object.assign(forceQueryFn ? thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ? Promise.resolve(stateAfter) : Promise.all([runningQuery, thunkResult]).then(selectFromState), {\r\n                    arg: arg,\r\n                    requestId: requestId,\r\n                    subscriptionOptions: subscriptionOptions,\r\n                    queryCacheKey: queryCacheKey,\r\n                    abort: abort,\r\n                    unwrap: function () {\r\n                        return __async(this, null, function () {\r\n                            var result;\r\n                            return __generator(this, function (_j) {\r\n                                switch (_j.label) {\r\n                                    case 0: return [4 /*yield*/, statePromise];\r\n                                    case 1:\r\n                                        result = _j.sent();\r\n                                        if (result.isError) {\r\n                                            throw result.error;\r\n                                        }\r\n                                        return [2 /*return*/, result.data];\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    refetch: function () { return dispatch(queryAction(arg, { subscribe: false, forceRefetch: true })); },\r\n                    unsubscribe: function () {\r\n                        if (subscribe)\r\n                            dispatch(unsubscribeQueryResult({\r\n                                queryCacheKey: queryCacheKey,\r\n                                requestId: requestId\r\n                            }));\r\n                    },\r\n                    updateSubscriptionOptions: function (options) {\r\n                        statePromise.subscriptionOptions = options;\r\n                        dispatch(updateSubscriptionOptions({\r\n                            endpointName: endpointName,\r\n                            requestId: requestId,\r\n                            queryCacheKey: queryCacheKey,\r\n                            options: options\r\n                        }));\r\n                    }\r\n                });\r\n                if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\r\n                    var running_1 = runningQueries.get(dispatch) || {};\r\n                    running_1[queryCacheKey] = statePromise;\r\n                    runningQueries.set(dispatch, running_1);\r\n                    statePromise.then(function () {\r\n                        delete running_1[queryCacheKey];\r\n                        if (!Object.keys(running_1).length) {\r\n                            runningQueries.delete(dispatch);\r\n                        }\r\n                    });\r\n                }\r\n                return statePromise;\r\n            };\r\n        };\r\n        return queryAction;\r\n    }\r\n    function buildInitiateMutation(endpointName) {\r\n        return function (arg, _j) {\r\n            var _k = _j === void 0 ? {} : _j, _l = _k.track, track = _l === void 0 ? true : _l, fixedCacheKey = _k.fixedCacheKey;\r\n            return function (dispatch, getState) {\r\n                var thunk = mutationThunk({\r\n                    type: \"mutation\",\r\n                    endpointName: endpointName,\r\n                    originalArgs: arg,\r\n                    track: track,\r\n                    fixedCacheKey: fixedCacheKey\r\n                });\r\n                var thunkResult = dispatch(thunk);\r\n                middlewareWarning(dispatch);\r\n                var requestId = thunkResult.requestId, abort = thunkResult.abort, unwrap = thunkResult.unwrap;\r\n                var returnValuePromise = thunkResult.unwrap().then(function (data) { return ({ data: data }); }).catch(function (error) { return ({ error: error }); });\r\n                var reset = function () {\r\n                    dispatch(removeMutationResult({ requestId: requestId, fixedCacheKey: fixedCacheKey }));\r\n                };\r\n                var ret = Object.assign(returnValuePromise, {\r\n                    arg: thunkResult.arg,\r\n                    requestId: requestId,\r\n                    abort: abort,\r\n                    unwrap: unwrap,\r\n                    unsubscribe: reset,\r\n                    reset: reset\r\n                });\r\n                var running = runningMutations.get(dispatch) || {};\r\n                runningMutations.set(dispatch, running);\r\n                running[requestId] = ret;\r\n                ret.then(function () {\r\n                    delete running[requestId];\r\n                    if (!Object.keys(running).length) {\r\n                        runningMutations.delete(dispatch);\r\n                    }\r\n                });\r\n                if (fixedCacheKey) {\r\n                    running[fixedCacheKey] = ret;\r\n                    ret.then(function () {\r\n                        if (running[fixedCacheKey] === ret) {\r\n                            delete running[fixedCacheKey];\r\n                            if (!Object.keys(running).length) {\r\n                                runningMutations.delete(dispatch);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                return ret;\r\n            };\r\n        };\r\n    }\r\n}\r\n// src/query/core/buildThunks.ts\r\nvar import_toolkit4 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar import_immer = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nvar import_toolkit5 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nfunction defaultTransformResponse(baseQueryReturnValue) {\r\n    return baseQueryReturnValue;\r\n}\r\nfunction buildThunks(_j) {\r\n    var _this = this;\r\n    var reducerPath = _j.reducerPath, baseQuery = _j.baseQuery, endpointDefinitions = _j.context.endpointDefinitions, serializeQueryArgs = _j.serializeQueryArgs, api = _j.api, assertTagType = _j.assertTagType;\r\n    var patchQueryData = function (endpointName, args, patches, updateProvided) { return function (dispatch, getState) {\r\n        var endpointDefinition = endpointDefinitions[endpointName];\r\n        var queryCacheKey = serializeQueryArgs({\r\n            queryArgs: args,\r\n            endpointDefinition: endpointDefinition,\r\n            endpointName: endpointName\r\n        });\r\n        dispatch(api.internalActions.queryResultPatched({ queryCacheKey: queryCacheKey, patches: patches }));\r\n        if (!updateProvided) {\r\n            return;\r\n        }\r\n        var newValue = api.endpoints[endpointName].select(args)(getState());\r\n        var providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, args, {}, assertTagType);\r\n        dispatch(api.internalActions.updateProvidedBy({ queryCacheKey: queryCacheKey, providedTags: providedTags }));\r\n    }; };\r\n    var updateQueryData = function (endpointName, args, updateRecipe, updateProvided) {\r\n        if (updateProvided === void 0) { updateProvided = true; }\r\n        return function (dispatch, getState) {\r\n            var _j, _k;\r\n            var endpointDefinition = api.endpoints[endpointName];\r\n            var currentState = endpointDefinition.select(args)(getState());\r\n            var ret = {\r\n                patches: [],\r\n                inversePatches: [],\r\n                undo: function () { return dispatch(api.util.patchQueryData(endpointName, args, ret.inversePatches, updateProvided)); }\r\n            };\r\n            if (currentState.status === QueryStatus.uninitialized) {\r\n                return ret;\r\n            }\r\n            var newValue;\r\n            if (\"data\" in currentState) {\r\n                if ((0, import_immer.isDraftable)(currentState.data)) {\r\n                    var _l = (0, import_immer.produceWithPatches)(currentState.data, updateRecipe), value = _l[0], patches = _l[1], inversePatches = _l[2];\r\n                    (_j = ret.patches).push.apply(_j, patches);\r\n                    (_k = ret.inversePatches).push.apply(_k, inversePatches);\r\n                    newValue = value;\r\n                }\r\n                else {\r\n                    newValue = updateRecipe(currentState.data);\r\n                    ret.patches.push({ op: \"replace\", path: [], value: newValue });\r\n                    ret.inversePatches.push({\r\n                        op: \"replace\",\r\n                        path: [],\r\n                        value: currentState.data\r\n                    });\r\n                }\r\n            }\r\n            dispatch(api.util.patchQueryData(endpointName, args, ret.patches, updateProvided));\r\n            return ret;\r\n        };\r\n    };\r\n    var upsertQueryData = function (endpointName, args, value) { return function (dispatch) {\r\n        var _j;\r\n        return dispatch(api.endpoints[endpointName].initiate(args, (_j = {\r\n                subscribe: false,\r\n                forceRefetch: true\r\n            },\r\n            _j[forceQueryFnSymbol] = function () { return ({\r\n                data: value\r\n            }); },\r\n            _j)));\r\n    }; };\r\n    var executeEndpoint = function (_0, _1) { return __async(_this, [_0, _1], function (arg, _j) {\r\n        var endpointDefinition, transformResponse, result, baseQueryApi_1, forceQueryFn, what, err, _k, _l, key, _m, error_1, catchedError, transformErrorResponse, _o, e_4;\r\n        var _p, _q;\r\n        var signal = _j.signal, abort = _j.abort, rejectWithValue = _j.rejectWithValue, fulfillWithValue = _j.fulfillWithValue, dispatch = _j.dispatch, getState = _j.getState, extra = _j.extra;\r\n        return __generator(this, function (_r) {\r\n            switch (_r.label) {\r\n                case 0:\r\n                    endpointDefinition = endpointDefinitions[arg.endpointName];\r\n                    _r.label = 1;\r\n                case 1:\r\n                    _r.trys.push([1, 8, , 13]);\r\n                    transformResponse = defaultTransformResponse;\r\n                    result = void 0;\r\n                    baseQueryApi_1 = {\r\n                        signal: signal,\r\n                        abort: abort,\r\n                        dispatch: dispatch,\r\n                        getState: getState,\r\n                        extra: extra,\r\n                        endpoint: arg.endpointName,\r\n                        type: arg.type,\r\n                        forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0\r\n                    };\r\n                    forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\r\n                    if (!forceQueryFn) return [3 /*break*/, 2];\r\n                    result = forceQueryFn();\r\n                    return [3 /*break*/, 6];\r\n                case 2:\r\n                    if (!endpointDefinition.query) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi_1, endpointDefinition.extraOptions)];\r\n                case 3:\r\n                    result = _r.sent();\r\n                    if (endpointDefinition.transformResponse) {\r\n                        transformResponse = endpointDefinition.transformResponse;\r\n                    }\r\n                    return [3 /*break*/, 6];\r\n                case 4: return [4 /*yield*/, endpointDefinition.queryFn(arg.originalArgs, baseQueryApi_1, endpointDefinition.extraOptions, function (arg2) { return baseQuery(arg2, baseQueryApi_1, endpointDefinition.extraOptions); })];\r\n                case 5:\r\n                    result = _r.sent();\r\n                    _r.label = 6;\r\n                case 6:\r\n                    if (typeof process !== \"undefined\" && true) {\r\n                        what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\r\n                        err = void 0;\r\n                        if (!result) {\r\n                            err = what + \" did not return anything.\";\r\n                        }\r\n                        else if (typeof result !== \"object\") {\r\n                            err = what + \" did not return an object.\";\r\n                        }\r\n                        else if (result.error && result.data) {\r\n                            err = what + \" returned an object containing both `error` and `result`.\";\r\n                        }\r\n                        else if (result.error === void 0 && result.data === void 0) {\r\n                            err = what + \" returned an object containing neither a valid `error` and `result`. At least one of them should not be `undefined`\";\r\n                        }\r\n                        else {\r\n                            for (_k = 0, _l = Object.keys(result); _k < _l.length; _k++) {\r\n                                key = _l[_k];\r\n                                if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\r\n                                    err = \"The object returned by \" + what + \" has the unknown property \" + key + \".\";\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (err) {\r\n                            console.error(\"Error encountered handling the endpoint \" + arg.endpointName + \".\\n              \" + err + \"\\n              It needs to return an object with either the shape `{ data: <value> }` or `{ error: <value> }` that may contain an optional `meta` property.\\n              Object returned was:\", result);\r\n                        }\r\n                    }\r\n                    if (result.error)\r\n                        throw new HandledError(result.error, result.meta);\r\n                    _m = fulfillWithValue;\r\n                    return [4 /*yield*/, transformResponse(result.data, result.meta, arg.originalArgs)];\r\n                case 7: return [2 /*return*/, _m.apply(void 0, [_r.sent(), (_p = {\r\n                                fulfilledTimeStamp: Date.now(),\r\n                                baseQueryMeta: result.meta\r\n                            },\r\n                            _p[import_toolkit5.SHOULD_AUTOBATCH] = true,\r\n                            _p)])];\r\n                case 8:\r\n                    error_1 = _r.sent();\r\n                    catchedError = error_1;\r\n                    if (!(catchedError instanceof HandledError)) return [3 /*break*/, 12];\r\n                    transformErrorResponse = defaultTransformResponse;\r\n                    if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {\r\n                        transformErrorResponse = endpointDefinition.transformErrorResponse;\r\n                    }\r\n                    _r.label = 9;\r\n                case 9:\r\n                    _r.trys.push([9, 11, , 12]);\r\n                    _o = rejectWithValue;\r\n                    return [4 /*yield*/, transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs)];\r\n                case 10: return [2 /*return*/, _o.apply(void 0, [_r.sent(), (_q = { baseQueryMeta: catchedError.meta }, _q[import_toolkit5.SHOULD_AUTOBATCH] = true, _q)])];\r\n                case 11:\r\n                    e_4 = _r.sent();\r\n                    catchedError = e_4;\r\n                    return [3 /*break*/, 12];\r\n                case 12:\r\n                    if (typeof process !== \"undefined\" && true) {\r\n                        console.error(\"An unhandled error occurred processing a request for the endpoint \\\"\" + arg.endpointName + \"\\\".\\nIn the case of an unhandled error, no tags will be \\\"provided\\\" or \\\"invalidated\\\".\", catchedError);\r\n                    }\r\n                    else {\r\n                        console.error(catchedError);\r\n                    }\r\n                    throw catchedError;\r\n                case 13: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); };\r\n    function isForcedQuery(arg, state) {\r\n        var _a, _b, _c, _d;\r\n        var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[arg.queryCacheKey];\r\n        var baseFetchOnMountOrArgChange = (_c = state[reducerPath]) == null ? void 0 : _c.config.refetchOnMountOrArgChange;\r\n        var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\r\n        var refetchVal = (_d = arg.forceRefetch) != null ? _d : arg.subscribe && baseFetchOnMountOrArgChange;\r\n        if (refetchVal) {\r\n            return refetchVal === true || (Number(new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\r\n        }\r\n        return false;\r\n    }\r\n    var queryThunk = (0, import_toolkit5.createAsyncThunk)(reducerPath + \"/executeQuery\", executeEndpoint, {\r\n        getPendingMeta: function () {\r\n            var _j;\r\n            return _j = { startedTimeStamp: Date.now() }, _j[import_toolkit5.SHOULD_AUTOBATCH] = true, _j;\r\n        },\r\n        condition: function (queryThunkArgs, _j) {\r\n            var getState = _j.getState;\r\n            var _a, _b, _c;\r\n            var state = getState();\r\n            var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[queryThunkArgs.queryCacheKey];\r\n            var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\r\n            var currentArg = queryThunkArgs.originalArgs;\r\n            var previousArg = requestState == null ? void 0 : requestState.originalArgs;\r\n            var endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];\r\n            if (isUpsertQuery(queryThunkArgs)) {\r\n                return true;\r\n            }\r\n            if ((requestState == null ? void 0 : requestState.status) === \"pending\") {\r\n                return false;\r\n            }\r\n            if (isForcedQuery(queryThunkArgs, state)) {\r\n                return true;\r\n            }\r\n            if (isQueryDefinition(endpointDefinition) && ((_c = endpointDefinition == null ? void 0 : endpointDefinition.forceRefetch) == null ? void 0 : _c.call(endpointDefinition, {\r\n                currentArg: currentArg,\r\n                previousArg: previousArg,\r\n                endpointState: requestState,\r\n                state: state\r\n            }))) {\r\n                return true;\r\n            }\r\n            if (fulfilledVal) {\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        dispatchConditionRejection: true\r\n    });\r\n    var mutationThunk = (0, import_toolkit5.createAsyncThunk)(reducerPath + \"/executeMutation\", executeEndpoint, {\r\n        getPendingMeta: function () {\r\n            var _j;\r\n            return _j = { startedTimeStamp: Date.now() }, _j[import_toolkit5.SHOULD_AUTOBATCH] = true, _j;\r\n        }\r\n    });\r\n    var hasTheForce = function (options) { return \"force\" in options; };\r\n    var hasMaxAge = function (options) { return \"ifOlderThan\" in options; };\r\n    var prefetch = function (endpointName, arg, options) { return function (dispatch, getState) {\r\n        var force = hasTheForce(options) && options.force;\r\n        var maxAge = hasMaxAge(options) && options.ifOlderThan;\r\n        var queryAction = function (force2) {\r\n            if (force2 === void 0) { force2 = true; }\r\n            return api.endpoints[endpointName].initiate(arg, { forceRefetch: force2 });\r\n        };\r\n        var latestStateValue = api.endpoints[endpointName].select(arg)(getState());\r\n        if (force) {\r\n            dispatch(queryAction());\r\n        }\r\n        else if (maxAge) {\r\n            var lastFulfilledTs = latestStateValue == null ? void 0 : latestStateValue.fulfilledTimeStamp;\r\n            if (!lastFulfilledTs) {\r\n                dispatch(queryAction());\r\n                return;\r\n            }\r\n            var shouldRetrigger = (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\r\n            if (shouldRetrigger) {\r\n                dispatch(queryAction());\r\n            }\r\n        }\r\n        else {\r\n            dispatch(queryAction(false));\r\n        }\r\n    }; };\r\n    function matchesEndpoint(endpointName) {\r\n        return function (action) {\r\n            var _a, _b;\r\n            return ((_b = (_a = action == null ? void 0 : action.meta) == null ? void 0 : _a.arg) == null ? void 0 : _b.endpointName) === endpointName;\r\n        };\r\n    }\r\n    function buildMatchThunkActions(thunk, endpointName) {\r\n        return {\r\n            matchPending: (0, import_toolkit4.isAllOf)((0, import_toolkit4.isPending)(thunk), matchesEndpoint(endpointName)),\r\n            matchFulfilled: (0, import_toolkit4.isAllOf)((0, import_toolkit4.isFulfilled)(thunk), matchesEndpoint(endpointName)),\r\n            matchRejected: (0, import_toolkit4.isAllOf)((0, import_toolkit4.isRejected)(thunk), matchesEndpoint(endpointName))\r\n        };\r\n    }\r\n    return {\r\n        queryThunk: queryThunk,\r\n        mutationThunk: mutationThunk,\r\n        prefetch: prefetch,\r\n        updateQueryData: updateQueryData,\r\n        upsertQueryData: upsertQueryData,\r\n        patchQueryData: patchQueryData,\r\n        buildMatchThunkActions: buildMatchThunkActions\r\n    };\r\n}\r\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\r\n    return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], (0, import_toolkit4.isFulfilled)(action) ? action.payload : void 0, (0, import_toolkit4.isRejectedWithValue)(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\r\n}\r\n// src/query/core/buildSlice.ts\r\nvar import_immer2 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nvar import_immer3 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\r\n    var substate = state[queryCacheKey];\r\n    if (substate) {\r\n        update(substate);\r\n    }\r\n}\r\nfunction getMutationCacheKey(id) {\r\n    var _a;\r\n    return (_a = \"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) != null ? _a : id.requestId;\r\n}\r\nfunction updateMutationSubstateIfExists(state, id, update) {\r\n    var substate = state[getMutationCacheKey(id)];\r\n    if (substate) {\r\n        update(substate);\r\n    }\r\n}\r\nvar initialState = {};\r\nfunction buildSlice(_j) {\r\n    var reducerPath = _j.reducerPath, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, _k = _j.context, definitions = _k.endpointDefinitions, apiUid = _k.apiUid, extractRehydrationInfo = _k.extractRehydrationInfo, hasRehydrationInfo = _k.hasRehydrationInfo, assertTagType = _j.assertTagType, config = _j.config;\r\n    var resetApiState = (0, import_toolkit6.createAction)(reducerPath + \"/resetApiState\");\r\n    var querySlice = (0, import_toolkit6.createSlice)({\r\n        name: reducerPath + \"/queries\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeQueryResult: {\r\n                reducer: function (draft, _j) {\r\n                    var queryCacheKey = _j.payload.queryCacheKey;\r\n                    delete draft[queryCacheKey];\r\n                },\r\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\r\n            },\r\n            queryResultPatched: {\r\n                reducer: function (draft, _j) {\r\n                    var _k = _j.payload, queryCacheKey = _k.queryCacheKey, patches = _k.patches;\r\n                    updateQuerySubstateIfExists(draft, queryCacheKey, function (substate) {\r\n                        substate.data = (0, import_immer3.applyPatches)(substate.data, patches.concat());\r\n                    });\r\n                },\r\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\r\n            }\r\n        },\r\n        extraReducers: function (builder) {\r\n            builder.addCase(queryThunk.pending, function (draft, _j) {\r\n                var meta = _j.meta, arg = _j.meta.arg;\r\n                var _a, _b;\r\n                var upserting = isUpsertQuery(arg);\r\n                if (arg.subscribe || upserting) {\r\n                    (_b = draft[_a = arg.queryCacheKey]) != null ? _b : draft[_a] = {\r\n                        status: QueryStatus.uninitialized,\r\n                        endpointName: arg.endpointName\r\n                    };\r\n                }\r\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\r\n                    substate.status = QueryStatus.pending;\r\n                    substate.requestId = upserting && substate.requestId ? substate.requestId : meta.requestId;\r\n                    if (arg.originalArgs !== void 0) {\r\n                        substate.originalArgs = arg.originalArgs;\r\n                    }\r\n                    substate.startedTimeStamp = meta.startedTimeStamp;\r\n                });\r\n            }).addCase(queryThunk.fulfilled, function (draft, _j) {\r\n                var meta = _j.meta, payload = _j.payload;\r\n                updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, function (substate) {\r\n                    var _a;\r\n                    if (substate.requestId !== meta.requestId && !isUpsertQuery(meta.arg))\r\n                        return;\r\n                    var merge = definitions[meta.arg.endpointName].merge;\r\n                    substate.status = QueryStatus.fulfilled;\r\n                    if (merge) {\r\n                        if (substate.data !== void 0) {\r\n                            var fulfilledTimeStamp_1 = meta.fulfilledTimeStamp, arg_1 = meta.arg, baseQueryMeta_1 = meta.baseQueryMeta, requestId_1 = meta.requestId;\r\n                            var newData = (0, import_toolkit6.createNextState)(substate.data, function (draftSubstateData) {\r\n                                return merge(draftSubstateData, payload, {\r\n                                    arg: arg_1.originalArgs,\r\n                                    baseQueryMeta: baseQueryMeta_1,\r\n                                    fulfilledTimeStamp: fulfilledTimeStamp_1,\r\n                                    requestId: requestId_1\r\n                                });\r\n                            });\r\n                            substate.data = newData;\r\n                        }\r\n                        else {\r\n                            substate.data = payload;\r\n                        }\r\n                    }\r\n                    else {\r\n                        substate.data = ((_a = definitions[meta.arg.endpointName].structuralSharing) != null ? _a : true) ? copyWithStructuralSharing((0, import_immer2.isDraft)(substate.data) ? (0, import_immer3.original)(substate.data) : substate.data, payload) : payload;\r\n                    }\r\n                    delete substate.error;\r\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\r\n                });\r\n            }).addCase(queryThunk.rejected, function (draft, _j) {\r\n                var _k = _j.meta, condition = _k.condition, arg = _k.arg, requestId = _k.requestId, error = _j.error, payload = _j.payload;\r\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\r\n                    if (condition) {\r\n                    }\r\n                    else {\r\n                        if (substate.requestId !== requestId)\r\n                            return;\r\n                        substate.status = QueryStatus.rejected;\r\n                        substate.error = payload != null ? payload : error;\r\n                    }\r\n                });\r\n            }).addMatcher(hasRehydrationInfo, function (draft, action) {\r\n                var queries = extractRehydrationInfo(action).queries;\r\n                for (var _j = 0, _k = Object.entries(queries); _j < _k.length; _j++) {\r\n                    var _l = _k[_j], key = _l[0], entry = _l[1];\r\n                    if ((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) {\r\n                        draft[key] = entry;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    var mutationSlice = (0, import_toolkit6.createSlice)({\r\n        name: reducerPath + \"/mutations\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeMutationResult: {\r\n                reducer: function (draft, _j) {\r\n                    var payload = _j.payload;\r\n                    var cacheKey = getMutationCacheKey(payload);\r\n                    if (cacheKey in draft) {\r\n                        delete draft[cacheKey];\r\n                    }\r\n                },\r\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\r\n            }\r\n        },\r\n        extraReducers: function (builder) {\r\n            builder.addCase(mutationThunk.pending, function (draft, _j) {\r\n                var meta = _j.meta, _k = _j.meta, requestId = _k.requestId, arg = _k.arg, startedTimeStamp = _k.startedTimeStamp;\r\n                if (!arg.track)\r\n                    return;\r\n                draft[getMutationCacheKey(meta)] = {\r\n                    requestId: requestId,\r\n                    status: QueryStatus.pending,\r\n                    endpointName: arg.endpointName,\r\n                    startedTimeStamp: startedTimeStamp\r\n                };\r\n            }).addCase(mutationThunk.fulfilled, function (draft, _j) {\r\n                var payload = _j.payload, meta = _j.meta;\r\n                if (!meta.arg.track)\r\n                    return;\r\n                updateMutationSubstateIfExists(draft, meta, function (substate) {\r\n                    if (substate.requestId !== meta.requestId)\r\n                        return;\r\n                    substate.status = QueryStatus.fulfilled;\r\n                    substate.data = payload;\r\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\r\n                });\r\n            }).addCase(mutationThunk.rejected, function (draft, _j) {\r\n                var payload = _j.payload, error = _j.error, meta = _j.meta;\r\n                if (!meta.arg.track)\r\n                    return;\r\n                updateMutationSubstateIfExists(draft, meta, function (substate) {\r\n                    if (substate.requestId !== meta.requestId)\r\n                        return;\r\n                    substate.status = QueryStatus.rejected;\r\n                    substate.error = payload != null ? payload : error;\r\n                });\r\n            }).addMatcher(hasRehydrationInfo, function (draft, action) {\r\n                var mutations = extractRehydrationInfo(action).mutations;\r\n                for (var _j = 0, _k = Object.entries(mutations); _j < _k.length; _j++) {\r\n                    var _l = _k[_j], key = _l[0], entry = _l[1];\r\n                    if (((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) && key !== (entry == null ? void 0 : entry.requestId)) {\r\n                        draft[key] = entry;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    var invalidationSlice = (0, import_toolkit6.createSlice)({\r\n        name: reducerPath + \"/invalidation\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            updateProvidedBy: {\r\n                reducer: function (draft, action) {\r\n                    var _a, _b, _c, _d;\r\n                    var _j = action.payload, queryCacheKey = _j.queryCacheKey, providedTags = _j.providedTags;\r\n                    for (var _k = 0, _l = Object.values(draft); _k < _l.length; _k++) {\r\n                        var tagTypeSubscriptions = _l[_k];\r\n                        for (var _m = 0, _o = Object.values(tagTypeSubscriptions); _m < _o.length; _m++) {\r\n                            var idSubscriptions = _o[_m];\r\n                            var foundAt = idSubscriptions.indexOf(queryCacheKey);\r\n                            if (foundAt !== -1) {\r\n                                idSubscriptions.splice(foundAt, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    for (var _p = 0, providedTags_1 = providedTags; _p < providedTags_1.length; _p++) {\r\n                        var _q = providedTags_1[_p], type = _q.type, id = _q.id;\r\n                        var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\r\n                        var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\r\n                        if (!alreadySubscribed) {\r\n                            subscribedQueries.push(queryCacheKey);\r\n                        }\r\n                    }\r\n                },\r\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\r\n            }\r\n        },\r\n        extraReducers: function (builder) {\r\n            builder.addCase(querySlice.actions.removeQueryResult, function (draft, _j) {\r\n                var queryCacheKey = _j.payload.queryCacheKey;\r\n                for (var _k = 0, _l = Object.values(draft); _k < _l.length; _k++) {\r\n                    var tagTypeSubscriptions = _l[_k];\r\n                    for (var _m = 0, _o = Object.values(tagTypeSubscriptions); _m < _o.length; _m++) {\r\n                        var idSubscriptions = _o[_m];\r\n                        var foundAt = idSubscriptions.indexOf(queryCacheKey);\r\n                        if (foundAt !== -1) {\r\n                            idSubscriptions.splice(foundAt, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }).addMatcher(hasRehydrationInfo, function (draft, action) {\r\n                var _a, _b, _c, _d;\r\n                var provided = extractRehydrationInfo(action).provided;\r\n                for (var _j = 0, _k = Object.entries(provided); _j < _k.length; _j++) {\r\n                    var _l = _k[_j], type = _l[0], incomingTags = _l[1];\r\n                    for (var _m = 0, _o = Object.entries(incomingTags); _m < _o.length; _m++) {\r\n                        var _p = _o[_m], id = _p[0], cacheKeys = _p[1];\r\n                        var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\r\n                        for (var _q = 0, cacheKeys_1 = cacheKeys; _q < cacheKeys_1.length; _q++) {\r\n                            var queryCacheKey = cacheKeys_1[_q];\r\n                            var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\r\n                            if (!alreadySubscribed) {\r\n                                subscribedQueries.push(queryCacheKey);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }).addMatcher((0, import_toolkit6.isAnyOf)((0, import_toolkit6.isFulfilled)(queryThunk), (0, import_toolkit6.isRejectedWithValue)(queryThunk)), function (draft, action) {\r\n                var providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\r\n                var queryCacheKey = action.meta.arg.queryCacheKey;\r\n                invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy({\r\n                    queryCacheKey: queryCacheKey,\r\n                    providedTags: providedTags\r\n                }));\r\n            });\r\n        }\r\n    });\r\n    var subscriptionSlice = (0, import_toolkit6.createSlice)({\r\n        name: reducerPath + \"/subscriptions\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            updateSubscriptionOptions: function (d, a) {\r\n            },\r\n            unsubscribeQueryResult: function (d, a) {\r\n            },\r\n            internal_probeSubscription: function (d, a) {\r\n            }\r\n        }\r\n    });\r\n    var internalSubscriptionsSlice = (0, import_toolkit6.createSlice)({\r\n        name: reducerPath + \"/internalSubscriptions\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            subscriptionsUpdated: {\r\n                reducer: function (state, action) {\r\n                    return (0, import_immer3.applyPatches)(state, action.payload);\r\n                },\r\n                prepare: (0, import_toolkit6.prepareAutoBatched)()\r\n            }\r\n        }\r\n    });\r\n    var configSlice = (0, import_toolkit6.createSlice)({\r\n        name: reducerPath + \"/config\",\r\n        initialState: __spreadValues({\r\n            online: isOnline(),\r\n            focused: isDocumentVisible(),\r\n            middlewareRegistered: false\r\n        }, config),\r\n        reducers: {\r\n            middlewareRegistered: function (state, _j) {\r\n                var payload = _j.payload;\r\n                state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\r\n            }\r\n        },\r\n        extraReducers: function (builder) {\r\n            builder.addCase(onOnline, function (state) {\r\n                state.online = true;\r\n            }).addCase(onOffline, function (state) {\r\n                state.online = false;\r\n            }).addCase(onFocus, function (state) {\r\n                state.focused = true;\r\n            }).addCase(onFocusLost, function (state) {\r\n                state.focused = false;\r\n            }).addMatcher(hasRehydrationInfo, function (draft) { return __spreadValues({}, draft); });\r\n        }\r\n    });\r\n    var combinedReducer = (0, import_toolkit6.combineReducers)({\r\n        queries: querySlice.reducer,\r\n        mutations: mutationSlice.reducer,\r\n        provided: invalidationSlice.reducer,\r\n        subscriptions: internalSubscriptionsSlice.reducer,\r\n        config: configSlice.reducer\r\n    });\r\n    var reducer = function (state, action) { return combinedReducer(resetApiState.match(action) ? void 0 : state, action); };\r\n    var actions = __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, configSlice.actions), querySlice.actions), subscriptionSlice.actions), internalSubscriptionsSlice.actions), mutationSlice.actions), invalidationSlice.actions), {\r\n        unsubscribeMutationResult: mutationSlice.actions.removeMutationResult,\r\n        resetApiState: resetApiState\r\n    });\r\n    return { reducer: reducer, actions: actions };\r\n}\r\n// src/query/core/buildSelectors.ts\r\nvar skipToken = /* @__PURE__ */ Symbol.for(\"RTKQ/skipToken\");\r\nvar skipSelector = skipToken;\r\nvar initialSubState = {\r\n    status: QueryStatus.uninitialized\r\n};\r\nvar defaultQuerySubState = /* @__PURE__ */ (0, import_toolkit7.createNextState)(initialSubState, function () {\r\n});\r\nvar defaultMutationSubState = /* @__PURE__ */ (0, import_toolkit7.createNextState)(initialSubState, function () {\r\n});\r\nfunction buildSelectors(_j) {\r\n    var serializeQueryArgs = _j.serializeQueryArgs, reducerPath = _j.reducerPath;\r\n    var selectSkippedQuery = function (state) { return defaultQuerySubState; };\r\n    var selectSkippedMutation = function (state) { return defaultMutationSubState; };\r\n    return { buildQuerySelector: buildQuerySelector, buildMutationSelector: buildMutationSelector, selectInvalidatedBy: selectInvalidatedBy };\r\n    function withRequestFlags(substate) {\r\n        return __spreadValues(__spreadValues({}, substate), getRequestStatusFlags(substate.status));\r\n    }\r\n    function selectInternalState(rootState) {\r\n        var state = rootState[reducerPath];\r\n        if (true) {\r\n            if (!state) {\r\n                if (selectInternalState.triggered)\r\n                    return state;\r\n                selectInternalState.triggered = true;\r\n                console.error(\"Error: No data found at `state.\" + reducerPath + \"`. Did you forget to add the reducer to the store?\");\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n    function buildQuerySelector(endpointName, endpointDefinition) {\r\n        return function (queryArgs) {\r\n            var serializedArgs = serializeQueryArgs({\r\n                queryArgs: queryArgs,\r\n                endpointDefinition: endpointDefinition,\r\n                endpointName: endpointName\r\n            });\r\n            var selectQuerySubstate = function (state) {\r\n                var _a, _b, _c;\r\n                return (_c = (_b = (_a = selectInternalState(state)) == null ? void 0 : _a.queries) == null ? void 0 : _b[serializedArgs]) != null ? _c : defaultQuerySubState;\r\n            };\r\n            var finalSelectQuerySubState = queryArgs === skipToken ? selectSkippedQuery : selectQuerySubstate;\r\n            return (0, import_toolkit7.createSelector)(finalSelectQuerySubState, withRequestFlags);\r\n        };\r\n    }\r\n    function buildMutationSelector() {\r\n        return function (id) {\r\n            var _a;\r\n            var mutationId;\r\n            if (typeof id === \"object\") {\r\n                mutationId = (_a = getMutationCacheKey(id)) != null ? _a : skipToken;\r\n            }\r\n            else {\r\n                mutationId = id;\r\n            }\r\n            var selectMutationSubstate = function (state) {\r\n                var _a2, _b, _c;\r\n                return (_c = (_b = (_a2 = selectInternalState(state)) == null ? void 0 : _a2.mutations) == null ? void 0 : _b[mutationId]) != null ? _c : defaultMutationSubState;\r\n            };\r\n            var finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\r\n            return (0, import_toolkit7.createSelector)(finalSelectMutationSubstate, withRequestFlags);\r\n        };\r\n    }\r\n    function selectInvalidatedBy(state, tags) {\r\n        var _a;\r\n        var apiState = state[reducerPath];\r\n        var toInvalidate = new Set();\r\n        for (var _j = 0, _k = tags.map(expandTagDescription); _j < _k.length; _j++) {\r\n            var tag = _k[_j];\r\n            var provided = apiState.provided[tag.type];\r\n            if (!provided) {\r\n                continue;\r\n            }\r\n            var invalidateSubscriptions = (_a = tag.id !== void 0 ? provided[tag.id] : flatten(Object.values(provided))) != null ? _a : [];\r\n            for (var _l = 0, invalidateSubscriptions_1 = invalidateSubscriptions; _l < invalidateSubscriptions_1.length; _l++) {\r\n                var invalidate = invalidateSubscriptions_1[_l];\r\n                toInvalidate.add(invalidate);\r\n            }\r\n        }\r\n        return flatten(Array.from(toInvalidate.values()).map(function (queryCacheKey) {\r\n            var querySubState = apiState.queries[queryCacheKey];\r\n            return querySubState ? [\r\n                {\r\n                    queryCacheKey: queryCacheKey,\r\n                    endpointName: querySubState.endpointName,\r\n                    originalArgs: querySubState.originalArgs\r\n                }\r\n            ] : [];\r\n        }));\r\n    }\r\n}\r\n// src/query/defaultSerializeQueryArgs.ts\r\nvar import_toolkit8 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar cache = WeakMap ? new WeakMap() : void 0;\r\nvar defaultSerializeQueryArgs = function (_j) {\r\n    var endpointName = _j.endpointName, queryArgs = _j.queryArgs;\r\n    var serialized = \"\";\r\n    var cached = cache == null ? void 0 : cache.get(queryArgs);\r\n    if (typeof cached === \"string\") {\r\n        serialized = cached;\r\n    }\r\n    else {\r\n        var stringified = JSON.stringify(queryArgs, function (key, value) { return (0, import_toolkit8.isPlainObject)(value) ? Object.keys(value).sort().reduce(function (acc, key2) {\r\n            acc[key2] = value[key2];\r\n            return acc;\r\n        }, {}) : value; });\r\n        if ((0, import_toolkit8.isPlainObject)(queryArgs)) {\r\n            cache == null ? void 0 : cache.set(queryArgs, stringified);\r\n        }\r\n        serialized = stringified;\r\n    }\r\n    return endpointName + \"(\" + serialized + \")\";\r\n};\r\n// src/query/createApi.ts\r\nvar import_toolkit9 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar import_reselect = __toModule(__webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/lib/index.js\"));\r\nfunction buildCreateApi() {\r\n    var modules = [];\r\n    for (var _j = 0; _j < arguments.length; _j++) {\r\n        modules[_j] = arguments[_j];\r\n    }\r\n    return function baseCreateApi(options) {\r\n        var extractRehydrationInfo = (0, import_reselect.defaultMemoize)(function (action) {\r\n            var _a, _b;\r\n            return (_b = options.extractRehydrationInfo) == null ? void 0 : _b.call(options, action, {\r\n                reducerPath: (_a = options.reducerPath) != null ? _a : \"api\"\r\n            });\r\n        });\r\n        var optionsWithDefaults = __spreadProps(__spreadValues({\r\n            reducerPath: \"api\",\r\n            keepUnusedDataFor: 60,\r\n            refetchOnMountOrArgChange: false,\r\n            refetchOnFocus: false,\r\n            refetchOnReconnect: false\r\n        }, options), {\r\n            extractRehydrationInfo: extractRehydrationInfo,\r\n            serializeQueryArgs: function (queryArgsApi) {\r\n                var finalSerializeQueryArgs = defaultSerializeQueryArgs;\r\n                if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\r\n                    var endpointSQA_1 = queryArgsApi.endpointDefinition.serializeQueryArgs;\r\n                    finalSerializeQueryArgs = function (queryArgsApi2) {\r\n                        var initialResult = endpointSQA_1(queryArgsApi2);\r\n                        if (typeof initialResult === \"string\") {\r\n                            return initialResult;\r\n                        }\r\n                        else {\r\n                            return defaultSerializeQueryArgs(__spreadProps(__spreadValues({}, queryArgsApi2), {\r\n                                queryArgs: initialResult\r\n                            }));\r\n                        }\r\n                    };\r\n                }\r\n                else if (options.serializeQueryArgs) {\r\n                    finalSerializeQueryArgs = options.serializeQueryArgs;\r\n                }\r\n                return finalSerializeQueryArgs(queryArgsApi);\r\n            },\r\n            tagTypes: __spreadArray([], options.tagTypes || [])\r\n        });\r\n        var context = {\r\n            endpointDefinitions: {},\r\n            batch: function (fn) {\r\n                fn();\r\n            },\r\n            apiUid: (0, import_toolkit9.nanoid)(),\r\n            extractRehydrationInfo: extractRehydrationInfo,\r\n            hasRehydrationInfo: (0, import_reselect.defaultMemoize)(function (action) { return extractRehydrationInfo(action) != null; })\r\n        };\r\n        var api = {\r\n            injectEndpoints: injectEndpoints,\r\n            enhanceEndpoints: function (_j) {\r\n                var addTagTypes = _j.addTagTypes, endpoints = _j.endpoints;\r\n                if (addTagTypes) {\r\n                    for (var _k = 0, addTagTypes_1 = addTagTypes; _k < addTagTypes_1.length; _k++) {\r\n                        var eT = addTagTypes_1[_k];\r\n                        if (!optionsWithDefaults.tagTypes.includes(eT)) {\r\n                            ;\r\n                            optionsWithDefaults.tagTypes.push(eT);\r\n                        }\r\n                    }\r\n                }\r\n                if (endpoints) {\r\n                    for (var _l = 0, _m = Object.entries(endpoints); _l < _m.length; _l++) {\r\n                        var _o = _m[_l], endpointName = _o[0], partialDefinition = _o[1];\r\n                        if (typeof partialDefinition === \"function\") {\r\n                            partialDefinition(context.endpointDefinitions[endpointName]);\r\n                        }\r\n                        else {\r\n                            Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\r\n                        }\r\n                    }\r\n                }\r\n                return api;\r\n            }\r\n        };\r\n        var initializedModules = modules.map(function (m) { return m.init(api, optionsWithDefaults, context); });\r\n        function injectEndpoints(inject) {\r\n            var evaluatedEndpoints = inject.endpoints({\r\n                query: function (x) { return __spreadProps(__spreadValues({}, x), { type: DefinitionType.query }); },\r\n                mutation: function (x) { return __spreadProps(__spreadValues({}, x), { type: DefinitionType.mutation }); }\r\n            });\r\n            for (var _j = 0, _k = Object.entries(evaluatedEndpoints); _j < _k.length; _j++) {\r\n                var _l = _k[_j], endpointName = _l[0], definition = _l[1];\r\n                if (!inject.overrideExisting && endpointName in context.endpointDefinitions) {\r\n                    if (typeof process !== \"undefined\" && true) {\r\n                        console.error(\"called `injectEndpoints` to override already-existing endpointName \" + endpointName + \" without specifying `overrideExisting: true`\");\r\n                    }\r\n                    continue;\r\n                }\r\n                context.endpointDefinitions[endpointName] = definition;\r\n                for (var _m = 0, initializedModules_1 = initializedModules; _m < initializedModules_1.length; _m++) {\r\n                    var m = initializedModules_1[_m];\r\n                    m.injectEndpoint(endpointName, definition);\r\n                }\r\n            }\r\n            return api;\r\n        }\r\n        return api.injectEndpoints({ endpoints: options.endpoints });\r\n    };\r\n}\r\n// src/query/fakeBaseQuery.ts\r\nfunction fakeBaseQuery() {\r\n    return function () {\r\n        throw new Error(\"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\r\n    };\r\n}\r\n// src/query/core/buildMiddleware/index.ts\r\nvar import_toolkit13 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\n// src/query/core/buildMiddleware/cacheCollection.ts\r\nfunction isObjectEmpty(obj) {\r\n    for (var k in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\r\nvar buildCacheCollectionHandler = function (_j) {\r\n    var reducerPath = _j.reducerPath, api = _j.api, context = _j.context, internalState = _j.internalState;\r\n    var _k = api.internalActions, removeQueryResult = _k.removeQueryResult, unsubscribeQueryResult = _k.unsubscribeQueryResult;\r\n    function anySubscriptionsRemainingForKey(queryCacheKey) {\r\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\r\n        return !!subscriptions && !isObjectEmpty(subscriptions);\r\n    }\r\n    var currentRemovalTimeouts = {};\r\n    var handler = function (action, mwApi, internalState2) {\r\n        var _a;\r\n        if (unsubscribeQueryResult.match(action)) {\r\n            var state = mwApi.getState()[reducerPath];\r\n            var queryCacheKey = action.payload.queryCacheKey;\r\n            handleUnsubscribe(queryCacheKey, (_a = state.queries[queryCacheKey]) == null ? void 0 : _a.endpointName, mwApi, state.config);\r\n        }\r\n        if (api.util.resetApiState.match(action)) {\r\n            for (var _j = 0, _k = Object.entries(currentRemovalTimeouts); _j < _k.length; _j++) {\r\n                var _l = _k[_j], key = _l[0], timeout = _l[1];\r\n                if (timeout)\r\n                    clearTimeout(timeout);\r\n                delete currentRemovalTimeouts[key];\r\n            }\r\n        }\r\n        if (context.hasRehydrationInfo(action)) {\r\n            var state = mwApi.getState()[reducerPath];\r\n            var queries = context.extractRehydrationInfo(action).queries;\r\n            for (var _m = 0, _o = Object.entries(queries); _m < _o.length; _m++) {\r\n                var _p = _o[_m], queryCacheKey = _p[0], queryState = _p[1];\r\n                handleUnsubscribe(queryCacheKey, queryState == null ? void 0 : queryState.endpointName, mwApi, state.config);\r\n            }\r\n        }\r\n    };\r\n    function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\r\n        var _a;\r\n        var endpointDefinition = context.endpointDefinitions[endpointName];\r\n        var keepUnusedDataFor = (_a = endpointDefinition == null ? void 0 : endpointDefinition.keepUnusedDataFor) != null ? _a : config.keepUnusedDataFor;\r\n        if (keepUnusedDataFor === Infinity) {\r\n            return;\r\n        }\r\n        var finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\r\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\r\n            var currentTimeout = currentRemovalTimeouts[queryCacheKey];\r\n            if (currentTimeout) {\r\n                clearTimeout(currentTimeout);\r\n            }\r\n            currentRemovalTimeouts[queryCacheKey] = setTimeout(function () {\r\n                if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\r\n                    api2.dispatch(removeQueryResult({ queryCacheKey: queryCacheKey }));\r\n                }\r\n                delete currentRemovalTimeouts[queryCacheKey];\r\n            }, finalKeepUnusedDataFor * 1e3);\r\n        }\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/invalidationByTags.ts\r\nvar import_toolkit10 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar buildInvalidationByTagsHandler = function (_j) {\r\n    var reducerPath = _j.reducerPath, context = _j.context, endpointDefinitions = _j.context.endpointDefinitions, mutationThunk = _j.mutationThunk, api = _j.api, assertTagType = _j.assertTagType, refetchQuery = _j.refetchQuery;\r\n    var removeQueryResult = api.internalActions.removeQueryResult;\r\n    var isThunkActionWithTags = (0, import_toolkit10.isAnyOf)((0, import_toolkit10.isFulfilled)(mutationThunk), (0, import_toolkit10.isRejectedWithValue)(mutationThunk));\r\n    var handler = function (action, mwApi) {\r\n        if (isThunkActionWithTags(action)) {\r\n            invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\r\n        }\r\n        if (api.util.invalidateTags.match(action)) {\r\n            invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\r\n        }\r\n    };\r\n    function invalidateTags(tags, mwApi) {\r\n        var rootState = mwApi.getState();\r\n        var state = rootState[reducerPath];\r\n        var toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\r\n        context.batch(function () {\r\n            var _a;\r\n            var valuesArray = Array.from(toInvalidate.values());\r\n            for (var _j = 0, valuesArray_1 = valuesArray; _j < valuesArray_1.length; _j++) {\r\n                var queryCacheKey = valuesArray_1[_j].queryCacheKey;\r\n                var querySubState = state.queries[queryCacheKey];\r\n                var subscriptionSubState = (_a = state.subscriptions[queryCacheKey]) != null ? _a : {};\r\n                if (querySubState) {\r\n                    if (Object.keys(subscriptionSubState).length === 0) {\r\n                        mwApi.dispatch(removeQueryResult({\r\n                            queryCacheKey: queryCacheKey\r\n                        }));\r\n                    }\r\n                    else if (querySubState.status !== QueryStatus.uninitialized) {\r\n                        mwApi.dispatch(refetchQuery(querySubState, queryCacheKey));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/polling.ts\r\nvar buildPollingHandler = function (_j) {\r\n    var reducerPath = _j.reducerPath, queryThunk = _j.queryThunk, api = _j.api, refetchQuery = _j.refetchQuery, internalState = _j.internalState;\r\n    var currentPolls = {};\r\n    var handler = function (action, mwApi) {\r\n        if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\r\n            updatePollingInterval(action.payload, mwApi);\r\n        }\r\n        if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\r\n            updatePollingInterval(action.meta.arg, mwApi);\r\n        }\r\n        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\r\n            startNextPoll(action.meta.arg, mwApi);\r\n        }\r\n        if (api.util.resetApiState.match(action)) {\r\n            clearPolls();\r\n        }\r\n    };\r\n    function startNextPoll(_j, api2) {\r\n        var queryCacheKey = _j.queryCacheKey;\r\n        var state = api2.getState()[reducerPath];\r\n        var querySubState = state.queries[queryCacheKey];\r\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\r\n        if (!querySubState || querySubState.status === QueryStatus.uninitialized)\r\n            return;\r\n        var lowestPollingInterval = findLowestPollingInterval(subscriptions);\r\n        if (!Number.isFinite(lowestPollingInterval))\r\n            return;\r\n        var currentPoll = currentPolls[queryCacheKey];\r\n        if (currentPoll == null ? void 0 : currentPoll.timeout) {\r\n            clearTimeout(currentPoll.timeout);\r\n            currentPoll.timeout = void 0;\r\n        }\r\n        var nextPollTimestamp = Date.now() + lowestPollingInterval;\r\n        var currentInterval = currentPolls[queryCacheKey] = {\r\n            nextPollTimestamp: nextPollTimestamp,\r\n            pollingInterval: lowestPollingInterval,\r\n            timeout: setTimeout(function () {\r\n                currentInterval.timeout = void 0;\r\n                api2.dispatch(refetchQuery(querySubState, queryCacheKey));\r\n            }, lowestPollingInterval)\r\n        };\r\n    }\r\n    function updatePollingInterval(_j, api2) {\r\n        var queryCacheKey = _j.queryCacheKey;\r\n        var state = api2.getState()[reducerPath];\r\n        var querySubState = state.queries[queryCacheKey];\r\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\r\n        if (!querySubState || querySubState.status === QueryStatus.uninitialized) {\r\n            return;\r\n        }\r\n        var lowestPollingInterval = findLowestPollingInterval(subscriptions);\r\n        if (!Number.isFinite(lowestPollingInterval)) {\r\n            cleanupPollForKey(queryCacheKey);\r\n            return;\r\n        }\r\n        var currentPoll = currentPolls[queryCacheKey];\r\n        var nextPollTimestamp = Date.now() + lowestPollingInterval;\r\n        if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\r\n            startNextPoll({ queryCacheKey: queryCacheKey }, api2);\r\n        }\r\n    }\r\n    function cleanupPollForKey(key) {\r\n        var existingPoll = currentPolls[key];\r\n        if (existingPoll == null ? void 0 : existingPoll.timeout) {\r\n            clearTimeout(existingPoll.timeout);\r\n        }\r\n        delete currentPolls[key];\r\n    }\r\n    function clearPolls() {\r\n        for (var _j = 0, _k = Object.keys(currentPolls); _j < _k.length; _j++) {\r\n            var key = _k[_j];\r\n            cleanupPollForKey(key);\r\n        }\r\n    }\r\n    function findLowestPollingInterval(subscribers) {\r\n        if (subscribers === void 0) { subscribers = {}; }\r\n        var lowestPollingInterval = Number.POSITIVE_INFINITY;\r\n        for (var key in subscribers) {\r\n            if (!!subscribers[key].pollingInterval) {\r\n                lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\r\n            }\r\n        }\r\n        return lowestPollingInterval;\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/windowEventHandling.ts\r\nvar buildWindowEventHandler = function (_j) {\r\n    var reducerPath = _j.reducerPath, context = _j.context, api = _j.api, refetchQuery = _j.refetchQuery, internalState = _j.internalState;\r\n    var removeQueryResult = api.internalActions.removeQueryResult;\r\n    var handler = function (action, mwApi) {\r\n        if (onFocus.match(action)) {\r\n            refetchValidQueries(mwApi, \"refetchOnFocus\");\r\n        }\r\n        if (onOnline.match(action)) {\r\n            refetchValidQueries(mwApi, \"refetchOnReconnect\");\r\n        }\r\n    };\r\n    function refetchValidQueries(api2, type) {\r\n        var state = api2.getState()[reducerPath];\r\n        var queries = state.queries;\r\n        var subscriptions = internalState.currentSubscriptions;\r\n        context.batch(function () {\r\n            for (var _j = 0, _k = Object.keys(subscriptions); _j < _k.length; _j++) {\r\n                var queryCacheKey = _k[_j];\r\n                var querySubState = queries[queryCacheKey];\r\n                var subscriptionSubState = subscriptions[queryCacheKey];\r\n                if (!subscriptionSubState || !querySubState)\r\n                    continue;\r\n                var shouldRefetch = Object.values(subscriptionSubState).some(function (sub) { return sub[type] === true; }) || Object.values(subscriptionSubState).every(function (sub) { return sub[type] === void 0; }) && state.config[type];\r\n                if (shouldRefetch) {\r\n                    if (Object.keys(subscriptionSubState).length === 0) {\r\n                        api2.dispatch(removeQueryResult({\r\n                            queryCacheKey: queryCacheKey\r\n                        }));\r\n                    }\r\n                    else if (querySubState.status !== QueryStatus.uninitialized) {\r\n                        api2.dispatch(refetchQuery(querySubState, queryCacheKey));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/cacheLifecycle.ts\r\nvar import_toolkit11 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\r\nvar buildCacheLifecycleHandler = function (_j) {\r\n    var api = _j.api, reducerPath = _j.reducerPath, context = _j.context, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, internalState = _j.internalState;\r\n    var isQueryThunk = (0, import_toolkit11.isAsyncThunkAction)(queryThunk);\r\n    var isMutationThunk = (0, import_toolkit11.isAsyncThunkAction)(mutationThunk);\r\n    var isFulfilledThunk = (0, import_toolkit11.isFulfilled)(queryThunk, mutationThunk);\r\n    var lifecycleMap = {};\r\n    var handler = function (action, mwApi, stateBefore) {\r\n        var cacheKey = getCacheKey(action);\r\n        if (queryThunk.pending.match(action)) {\r\n            var oldState = stateBefore[reducerPath].queries[cacheKey];\r\n            var state = mwApi.getState()[reducerPath].queries[cacheKey];\r\n            if (!oldState && state) {\r\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\r\n            }\r\n        }\r\n        else if (mutationThunk.pending.match(action)) {\r\n            var state = mwApi.getState()[reducerPath].mutations[cacheKey];\r\n            if (state) {\r\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\r\n            }\r\n        }\r\n        else if (isFulfilledThunk(action)) {\r\n            var lifecycle = lifecycleMap[cacheKey];\r\n            if (lifecycle == null ? void 0 : lifecycle.valueResolved) {\r\n                lifecycle.valueResolved({\r\n                    data: action.payload,\r\n                    meta: action.meta.baseQueryMeta\r\n                });\r\n                delete lifecycle.valueResolved;\r\n            }\r\n        }\r\n        else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\r\n            var lifecycle = lifecycleMap[cacheKey];\r\n            if (lifecycle) {\r\n                delete lifecycleMap[cacheKey];\r\n                lifecycle.cacheEntryRemoved();\r\n            }\r\n        }\r\n        else if (api.util.resetApiState.match(action)) {\r\n            for (var _j = 0, _k = Object.entries(lifecycleMap); _j < _k.length; _j++) {\r\n                var _l = _k[_j], cacheKey2 = _l[0], lifecycle = _l[1];\r\n                delete lifecycleMap[cacheKey2];\r\n                lifecycle.cacheEntryRemoved();\r\n            }\r\n        }\r\n    };\r\n    function getCacheKey(action) {\r\n        if (isQueryThunk(action))\r\n            return action.meta.arg.queryCacheKey;\r\n        if (isMutationThunk(action))\r\n            return action.meta.requestId;\r\n        if (api.internalActions.removeQueryResult.match(action))\r\n            return action.payload.queryCacheKey;\r\n        if (api.internalActions.removeMutationResult.match(action))\r\n            return getMutationCacheKey(action.payload);\r\n        return \"\";\r\n    }\r\n    function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\r\n        var endpointDefinition = context.endpointDefinitions[endpointName];\r\n        var onCacheEntryAdded = endpointDefinition == null ? void 0 : endpointDefinition.onCacheEntryAdded;\r\n        if (!onCacheEntryAdded)\r\n            return;\r\n        var lifecycle = {};\r\n        var cacheEntryRemoved = new Promise(function (resolve) {\r\n            lifecycle.cacheEntryRemoved = resolve;\r\n        });\r\n        var cacheDataLoaded = Promise.race([\r\n            new Promise(function (resolve) {\r\n                lifecycle.valueResolved = resolve;\r\n            }),\r\n            cacheEntryRemoved.then(function () {\r\n                throw neverResolvedError;\r\n            })\r\n        ]);\r\n        cacheDataLoaded.catch(function () {\r\n        });\r\n        lifecycleMap[queryCacheKey] = lifecycle;\r\n        var selector = api.endpoints[endpointName].select(endpointDefinition.type === DefinitionType.query ? originalArgs : queryCacheKey);\r\n        var extra = mwApi.dispatch(function (_, __, extra2) { return extra2; });\r\n        var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\r\n            getCacheEntry: function () { return selector(mwApi.getState()); },\r\n            requestId: requestId,\r\n            extra: extra,\r\n            updateCachedData: endpointDefinition.type === DefinitionType.query ? function (updateRecipe) { return mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)); } : void 0,\r\n            cacheDataLoaded: cacheDataLoaded,\r\n            cacheEntryRemoved: cacheEntryRemoved\r\n        });\r\n        var runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\r\n        Promise.resolve(runningHandler).catch(function (e) {\r\n            if (e === neverResolvedError)\r\n                return;\r\n            throw e;\r\n        });\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/queryLifecycle.ts\r\nvar import_toolkit12 = __toModule(__webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/index.js\"));\r\nvar buildQueryLifecycleHandler = function (_j) {\r\n    var api = _j.api, context = _j.context, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk;\r\n    var isPendingThunk = (0, import_toolkit12.isPending)(queryThunk, mutationThunk);\r\n    var isRejectedThunk = (0, import_toolkit12.isRejected)(queryThunk, mutationThunk);\r\n    var isFullfilledThunk = (0, import_toolkit12.isFulfilled)(queryThunk, mutationThunk);\r\n    var lifecycleMap = {};\r\n    var handler = function (action, mwApi) {\r\n        var _a, _b, _c;\r\n        if (isPendingThunk(action)) {\r\n            var _j = action.meta, requestId = _j.requestId, _k = _j.arg, endpointName_1 = _k.endpointName, originalArgs_1 = _k.originalArgs;\r\n            var endpointDefinition = context.endpointDefinitions[endpointName_1];\r\n            var onQueryStarted = endpointDefinition == null ? void 0 : endpointDefinition.onQueryStarted;\r\n            if (onQueryStarted) {\r\n                var lifecycle_1 = {};\r\n                var queryFulfilled = new Promise(function (resolve, reject) {\r\n                    lifecycle_1.resolve = resolve;\r\n                    lifecycle_1.reject = reject;\r\n                });\r\n                queryFulfilled.catch(function () {\r\n                });\r\n                lifecycleMap[requestId] = lifecycle_1;\r\n                var selector_1 = api.endpoints[endpointName_1].select(endpointDefinition.type === DefinitionType.query ? originalArgs_1 : requestId);\r\n                var extra = mwApi.dispatch(function (_, __, extra2) { return extra2; });\r\n                var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\r\n                    getCacheEntry: function () { return selector_1(mwApi.getState()); },\r\n                    requestId: requestId,\r\n                    extra: extra,\r\n                    updateCachedData: endpointDefinition.type === DefinitionType.query ? function (updateRecipe) { return mwApi.dispatch(api.util.updateQueryData(endpointName_1, originalArgs_1, updateRecipe)); } : void 0,\r\n                    queryFulfilled: queryFulfilled\r\n                });\r\n                onQueryStarted(originalArgs_1, lifecycleApi);\r\n            }\r\n        }\r\n        else if (isFullfilledThunk(action)) {\r\n            var _l = action.meta, requestId = _l.requestId, baseQueryMeta = _l.baseQueryMeta;\r\n            (_a = lifecycleMap[requestId]) == null ? void 0 : _a.resolve({\r\n                data: action.payload,\r\n                meta: baseQueryMeta\r\n            });\r\n            delete lifecycleMap[requestId];\r\n        }\r\n        else if (isRejectedThunk(action)) {\r\n            var _m = action.meta, requestId = _m.requestId, rejectedWithValue = _m.rejectedWithValue, baseQueryMeta = _m.baseQueryMeta;\r\n            (_c = lifecycleMap[requestId]) == null ? void 0 : _c.reject({\r\n                error: (_b = action.payload) != null ? _b : action.error,\r\n                isUnhandledError: !rejectedWithValue,\r\n                meta: baseQueryMeta\r\n            });\r\n            delete lifecycleMap[requestId];\r\n        }\r\n    };\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/devMiddleware.ts\r\nvar buildDevCheckHandler = function (_j) {\r\n    var api = _j.api, apiUid = _j.context.apiUid, reducerPath = _j.reducerPath;\r\n    return function (action, mwApi) {\r\n        var _a, _b;\r\n        if (api.util.resetApiState.match(action)) {\r\n            mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\r\n        }\r\n        if (typeof process !== \"undefined\" && true) {\r\n            if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && ((_b = (_a = mwApi.getState()[reducerPath]) == null ? void 0 : _a.config) == null ? void 0 : _b.middlewareRegistered) === \"conflict\") {\r\n                console.warn(\"There is a mismatch between slice and middleware for the reducerPath \\\"\" + reducerPath + \"\\\".\\nYou can only have one api per reducer path, this will lead to crashes in various situations!\" + (reducerPath === \"api\" ? \"\\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!\" : \"\"));\r\n            }\r\n        }\r\n    };\r\n};\r\n// src/query/core/buildMiddleware/batchActions.ts\r\nvar import_immer4 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nvar promise;\r\nvar queueMicrotaskShim = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : globalThis) : function (cb) { return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) { return setTimeout(function () {\r\n    throw err;\r\n}, 0); }); };\r\nvar buildBatchedActionsHandler = function (_j) {\r\n    var api = _j.api, queryThunk = _j.queryThunk, internalState = _j.internalState;\r\n    var subscriptionsPrefix = api.reducerPath + \"/subscriptions\";\r\n    var previousSubscriptions = null;\r\n    var dispatchQueued = false;\r\n    var _k = api.internalActions, updateSubscriptionOptions = _k.updateSubscriptionOptions, unsubscribeQueryResult = _k.unsubscribeQueryResult;\r\n    var actuallyMutateSubscriptions = function (mutableState, action) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _i;\r\n        if (updateSubscriptionOptions.match(action)) {\r\n            var _j = action.payload, queryCacheKey = _j.queryCacheKey, requestId = _j.requestId, options = _j.options;\r\n            if ((_a = mutableState == null ? void 0 : mutableState[queryCacheKey]) == null ? void 0 : _a[requestId]) {\r\n                mutableState[queryCacheKey][requestId] = options;\r\n            }\r\n            return true;\r\n        }\r\n        if (unsubscribeQueryResult.match(action)) {\r\n            var _k = action.payload, queryCacheKey = _k.queryCacheKey, requestId = _k.requestId;\r\n            if (mutableState[queryCacheKey]) {\r\n                delete mutableState[queryCacheKey][requestId];\r\n            }\r\n            return true;\r\n        }\r\n        if (api.internalActions.removeQueryResult.match(action)) {\r\n            delete mutableState[action.payload.queryCacheKey];\r\n            return true;\r\n        }\r\n        if (queryThunk.pending.match(action)) {\r\n            var _l = action.meta, arg = _l.arg, requestId = _l.requestId;\r\n            if (arg.subscribe) {\r\n                var substate = (_c = mutableState[_b = arg.queryCacheKey]) != null ? _c : mutableState[_b] = {};\r\n                substate[requestId] = (_e = (_d = arg.subscriptionOptions) != null ? _d : substate[requestId]) != null ? _e : {};\r\n                return true;\r\n            }\r\n        }\r\n        if (queryThunk.rejected.match(action)) {\r\n            var _m = action.meta, condition = _m.condition, arg = _m.arg, requestId = _m.requestId;\r\n            if (condition && arg.subscribe) {\r\n                var substate = (_g = mutableState[_f = arg.queryCacheKey]) != null ? _g : mutableState[_f] = {};\r\n                substate[requestId] = (_i = (_h = arg.subscriptionOptions) != null ? _h : substate[requestId]) != null ? _i : {};\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return function (action, mwApi) {\r\n        var _a, _b;\r\n        if (!previousSubscriptions) {\r\n            previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\r\n        }\r\n        if (api.util.resetApiState.match(action)) {\r\n            previousSubscriptions = internalState.currentSubscriptions = {};\r\n            return [true, false];\r\n        }\r\n        if (api.internalActions.internal_probeSubscription.match(action)) {\r\n            var _j = action.payload, queryCacheKey = _j.queryCacheKey, requestId = _j.requestId;\r\n            var hasSubscription = !!((_a = internalState.currentSubscriptions[queryCacheKey]) == null ? void 0 : _a[requestId]);\r\n            return [false, hasSubscription];\r\n        }\r\n        var didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\r\n        if (didMutate) {\r\n            if (!dispatchQueued) {\r\n                queueMicrotaskShim(function () {\r\n                    var newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\r\n                    var _j = (0, import_immer4.produceWithPatches)(previousSubscriptions, function () { return newSubscriptions; }), patches = _j[1];\r\n                    mwApi.next(api.internalActions.subscriptionsUpdated(patches));\r\n                    previousSubscriptions = newSubscriptions;\r\n                    dispatchQueued = false;\r\n                });\r\n                dispatchQueued = true;\r\n            }\r\n            var isSubscriptionSliceAction = !!((_b = action.type) == null ? void 0 : _b.startsWith(subscriptionsPrefix));\r\n            var isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\r\n            var actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\r\n            return [actionShouldContinue, false];\r\n        }\r\n        return [true, false];\r\n    };\r\n};\r\n// src/query/core/buildMiddleware/index.ts\r\nfunction buildMiddleware(input) {\r\n    var reducerPath = input.reducerPath, queryThunk = input.queryThunk, api = input.api, context = input.context;\r\n    var apiUid = context.apiUid;\r\n    var actions = {\r\n        invalidateTags: (0, import_toolkit13.createAction)(reducerPath + \"/invalidateTags\")\r\n    };\r\n    var isThisApiSliceAction = function (action) {\r\n        return !!action && typeof action.type === \"string\" && action.type.startsWith(reducerPath + \"/\");\r\n    };\r\n    var handlerBuilders = [\r\n        buildDevCheckHandler,\r\n        buildCacheCollectionHandler,\r\n        buildInvalidationByTagsHandler,\r\n        buildPollingHandler,\r\n        buildCacheLifecycleHandler,\r\n        buildQueryLifecycleHandler\r\n    ];\r\n    var middleware = function (mwApi) {\r\n        var initialized2 = false;\r\n        var internalState = {\r\n            currentSubscriptions: {}\r\n        };\r\n        var builderArgs = __spreadProps(__spreadValues({}, input), {\r\n            internalState: internalState,\r\n            refetchQuery: refetchQuery\r\n        });\r\n        var handlers = handlerBuilders.map(function (build) { return build(builderArgs); });\r\n        var batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\r\n        var windowEventsHandler = buildWindowEventHandler(builderArgs);\r\n        return function (next) {\r\n            return function (action) {\r\n                if (!initialized2) {\r\n                    initialized2 = true;\r\n                    mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\r\n                }\r\n                var mwApiWithNext = __spreadProps(__spreadValues({}, mwApi), { next: next });\r\n                var stateBefore = mwApi.getState();\r\n                var _j = batchedActionsHandler(action, mwApiWithNext, stateBefore), actionShouldContinue = _j[0], hasSubscription = _j[1];\r\n                var res;\r\n                if (actionShouldContinue) {\r\n                    res = next(action);\r\n                }\r\n                else {\r\n                    res = hasSubscription;\r\n                }\r\n                if (!!mwApi.getState()[reducerPath]) {\r\n                    windowEventsHandler(action, mwApiWithNext, stateBefore);\r\n                    if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\r\n                        for (var _k = 0, handlers_1 = handlers; _k < handlers_1.length; _k++) {\r\n                            var handler = handlers_1[_k];\r\n                            handler(action, mwApiWithNext, stateBefore);\r\n                        }\r\n                    }\r\n                }\r\n                return res;\r\n            };\r\n        };\r\n    };\r\n    return { middleware: middleware, actions: actions };\r\n    function refetchQuery(querySubState, queryCacheKey, override) {\r\n        if (override === void 0) { override = {}; }\r\n        return queryThunk(__spreadValues({\r\n            type: \"query\",\r\n            endpointName: querySubState.endpointName,\r\n            originalArgs: querySubState.originalArgs,\r\n            subscribe: false,\r\n            forceRefetch: true,\r\n            queryCacheKey: queryCacheKey\r\n        }, override));\r\n    }\r\n}\r\n// src/query/tsHelpers.ts\r\nfunction assertCast(v) {\r\n}\r\nfunction safeAssign(target) {\r\n    var args = [];\r\n    for (var _j = 1; _j < arguments.length; _j++) {\r\n        args[_j - 1] = arguments[_j];\r\n    }\r\n    Object.assign.apply(Object, __spreadArray([target], args));\r\n}\r\n// src/query/core/module.ts\r\nvar import_immer5 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nvar coreModuleName = /* @__PURE__ */ Symbol();\r\nvar coreModule = function () { return ({\r\n    name: coreModuleName,\r\n    init: function (api, _j, context) {\r\n        var baseQuery = _j.baseQuery, tagTypes = _j.tagTypes, reducerPath = _j.reducerPath, serializeQueryArgs = _j.serializeQueryArgs, keepUnusedDataFor = _j.keepUnusedDataFor, refetchOnMountOrArgChange = _j.refetchOnMountOrArgChange, refetchOnFocus = _j.refetchOnFocus, refetchOnReconnect = _j.refetchOnReconnect;\r\n        (0, import_immer5.enablePatches)();\r\n        assertCast(serializeQueryArgs);\r\n        var assertTagType = function (tag) {\r\n            if (typeof process !== \"undefined\" && true) {\r\n                if (!tagTypes.includes(tag.type)) {\r\n                    console.error(\"Tag type '\" + tag.type + \"' was used, but not specified in `tagTypes`!\");\r\n                }\r\n            }\r\n            return tag;\r\n        };\r\n        Object.assign(api, {\r\n            reducerPath: reducerPath,\r\n            endpoints: {},\r\n            internalActions: {\r\n                onOnline: onOnline,\r\n                onOffline: onOffline,\r\n                onFocus: onFocus,\r\n                onFocusLost: onFocusLost\r\n            },\r\n            util: {}\r\n        });\r\n        var _k = buildThunks({\r\n            baseQuery: baseQuery,\r\n            reducerPath: reducerPath,\r\n            context: context,\r\n            api: api,\r\n            serializeQueryArgs: serializeQueryArgs,\r\n            assertTagType: assertTagType\r\n        }), queryThunk = _k.queryThunk, mutationThunk = _k.mutationThunk, patchQueryData = _k.patchQueryData, updateQueryData = _k.updateQueryData, upsertQueryData = _k.upsertQueryData, prefetch = _k.prefetch, buildMatchThunkActions = _k.buildMatchThunkActions;\r\n        var _l = buildSlice({\r\n            context: context,\r\n            queryThunk: queryThunk,\r\n            mutationThunk: mutationThunk,\r\n            reducerPath: reducerPath,\r\n            assertTagType: assertTagType,\r\n            config: {\r\n                refetchOnFocus: refetchOnFocus,\r\n                refetchOnReconnect: refetchOnReconnect,\r\n                refetchOnMountOrArgChange: refetchOnMountOrArgChange,\r\n                keepUnusedDataFor: keepUnusedDataFor,\r\n                reducerPath: reducerPath\r\n            }\r\n        }), reducer = _l.reducer, sliceActions = _l.actions;\r\n        safeAssign(api.util, {\r\n            patchQueryData: patchQueryData,\r\n            updateQueryData: updateQueryData,\r\n            upsertQueryData: upsertQueryData,\r\n            prefetch: prefetch,\r\n            resetApiState: sliceActions.resetApiState\r\n        });\r\n        safeAssign(api.internalActions, sliceActions);\r\n        var _m = buildMiddleware({\r\n            reducerPath: reducerPath,\r\n            context: context,\r\n            queryThunk: queryThunk,\r\n            mutationThunk: mutationThunk,\r\n            api: api,\r\n            assertTagType: assertTagType\r\n        }), middleware = _m.middleware, middlewareActions = _m.actions;\r\n        safeAssign(api.util, middlewareActions);\r\n        safeAssign(api, { reducer: reducer, middleware: middleware });\r\n        var _o = buildSelectors({\r\n            serializeQueryArgs: serializeQueryArgs,\r\n            reducerPath: reducerPath\r\n        }), buildQuerySelector = _o.buildQuerySelector, buildMutationSelector = _o.buildMutationSelector, selectInvalidatedBy = _o.selectInvalidatedBy;\r\n        safeAssign(api.util, { selectInvalidatedBy: selectInvalidatedBy });\r\n        var _p = buildInitiate({\r\n            queryThunk: queryThunk,\r\n            mutationThunk: mutationThunk,\r\n            api: api,\r\n            serializeQueryArgs: serializeQueryArgs,\r\n            context: context\r\n        }), buildInitiateQuery = _p.buildInitiateQuery, buildInitiateMutation = _p.buildInitiateMutation, getRunningMutationThunk = _p.getRunningMutationThunk, getRunningMutationsThunk = _p.getRunningMutationsThunk, getRunningQueriesThunk = _p.getRunningQueriesThunk, getRunningQueryThunk = _p.getRunningQueryThunk, getRunningOperationPromises = _p.getRunningOperationPromises, removalWarning = _p.removalWarning;\r\n        safeAssign(api.util, {\r\n            getRunningOperationPromises: getRunningOperationPromises,\r\n            getRunningOperationPromise: removalWarning,\r\n            getRunningMutationThunk: getRunningMutationThunk,\r\n            getRunningMutationsThunk: getRunningMutationsThunk,\r\n            getRunningQueryThunk: getRunningQueryThunk,\r\n            getRunningQueriesThunk: getRunningQueriesThunk\r\n        });\r\n        return {\r\n            name: coreModuleName,\r\n            injectEndpoint: function (endpointName, definition) {\r\n                var _a, _b;\r\n                var anyApi = api;\r\n                (_b = (_a = anyApi.endpoints)[endpointName]) != null ? _b : _a[endpointName] = {};\r\n                if (isQueryDefinition(definition)) {\r\n                    safeAssign(anyApi.endpoints[endpointName], {\r\n                        name: endpointName,\r\n                        select: buildQuerySelector(endpointName, definition),\r\n                        initiate: buildInitiateQuery(endpointName, definition)\r\n                    }, buildMatchThunkActions(queryThunk, endpointName));\r\n                }\r\n                else if (isMutationDefinition(definition)) {\r\n                    safeAssign(anyApi.endpoints[endpointName], {\r\n                        name: endpointName,\r\n                        select: buildMutationSelector(),\r\n                        initiate: buildInitiateMutation(endpointName)\r\n                    }, buildMatchThunkActions(mutationThunk, endpointName));\r\n                }\r\n            }\r\n        };\r\n    }\r\n}); };\r\n// src/query/core/index.ts\r\nvar createApi = /* @__PURE__ */ buildCreateApi(coreModule());\r\n//# sourceMappingURL=rtk-query.cjs.development.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3F1ZXJ5L3J0ay1xdWVyeS5janMuZGV2ZWxvcG1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxjQUFjLDZCQUE2QiwwQkFBMEIsY0FBYyxxQkFBcUI7QUFDeEcsaUJBQWlCLG9EQUFvRCxxRUFBcUUsY0FBYztBQUN4Six1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QyxtQ0FBbUMsU0FBUztBQUM1QyxtQ0FBbUMsV0FBVyxVQUFVO0FBQ3hELDBDQUEwQyxjQUFjO0FBQ3hEO0FBQ0EsOEdBQThHLE9BQU87QUFDckgsaUZBQWlGLGlCQUFpQjtBQUNsRyx5REFBeUQsZ0JBQWdCLFFBQVE7QUFDakYsK0NBQStDLGdCQUFnQixnQkFBZ0I7QUFDL0U7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLFVBQVUsWUFBWSxhQUFhLFNBQVMsVUFBVTtBQUN0RCxvQ0FBb0MsU0FBUztBQUM3QztBQUNBO0FBQ0E7QUFDQSxxREFBcUQsUUFBUTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCwwQ0FBMEMsb0VBQW9FO0FBQ2pLO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQkFBZ0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLHlDQUF5Qyx5Q0FBeUMsYUFBYTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msa0NBQWtDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsbUJBQW1CLHNCQUFzQiwyRUFBMkU7QUFDN0o7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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsbUJBQU8sQ0FBQyx1REFBTztBQUM5QztBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDBCQUEwQiwwQ0FBMEM7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULCtCQUErQiwwQ0FBMEM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L2Rpc3QvcXVlcnkvcnRrLXF1ZXJ5LmNqcy5kZXZlbG9wbWVudC5qcz84MzE2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXHJcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xyXG4gICAgcmV0dXJuIHRvO1xyXG59O1xyXG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xyXG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xyXG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xyXG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XHJcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xyXG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcclxudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xyXG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xyXG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XHJcbnZhciBfX2RlZk5vcm1hbFByb3AgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7IHJldHVybiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7IH07XHJcbnZhciBfX3NwcmVhZFZhbHVlcyA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXHJcbiAgICAgICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxyXG4gICAgICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XHJcbiAgICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcclxuICAgICAgICBmb3IgKHZhciBfaiA9IDAsIF9rID0gX19nZXRPd25Qcm9wU3ltYm9scyhiKTsgX2ogPCBfay5sZW5ndGg7IF9qKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3AgPSBfa1tfal07XHJcbiAgICAgICAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcclxuICAgICAgICAgICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxudmFyIF9fc3ByZWFkUHJvcHMgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7IH07XHJcbnZhciBfX21hcmtBc01vZHVsZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIF9fZGVmUHJvcCh0YXJnZXQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pOyB9O1xyXG52YXIgX19vYmpSZXN0ID0gZnVuY3Rpb24gKHNvdXJjZSwgZXhjbHVkZSkge1xyXG4gICAgdmFyIHRhcmdldCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXHJcbiAgICAgICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcclxuICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xyXG4gICAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXHJcbiAgICAgICAgZm9yICh2YXIgX2ogPSAwLCBfayA9IF9fZ2V0T3duUHJvcFN5bWJvbHMoc291cmNlKTsgX2ogPCBfay5sZW5ndGg7IF9qKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3AgPSBfa1tfal07XHJcbiAgICAgICAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufTtcclxudmFyIF9fZXhwb3J0ID0gZnVuY3Rpb24gKHRhcmdldCwgYWxsKSB7XHJcbiAgICBmb3IgKHZhciBuYW1lIGluIGFsbClcclxuICAgICAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xyXG59O1xyXG52YXIgX19yZUV4cG9ydCA9IGZ1bmN0aW9uICh0YXJnZXQsIG1vZHVsZTIsIGRlc2MpIHtcclxuICAgIGlmIChtb2R1bGUyICYmIHR5cGVvZiBtb2R1bGUyID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBtb2R1bGUyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0YXJnZXQsIGtleSkgJiYga2V5ICE9PSBcImRlZmF1bHRcIilcclxuICAgICAgICAgICAgICAgIF9fZGVmUHJvcCh0YXJnZXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZTJba2V5XTsgfSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhtb2R1bGUyLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKHZhciBfaiA9IDAsIF9rID0gX19nZXRPd25Qcm9wTmFtZXMobW9kdWxlMik7IF9qIDwgX2subGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBfa1tfal07XHJcbiAgICAgICAgICAgIF9sb29wXzEoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59O1xyXG52YXIgX190b01vZHVsZSA9IGZ1bmN0aW9uIChtb2R1bGUyKSB7XHJcbiAgICByZXR1cm4gX19yZUV4cG9ydChfX21hcmtBc01vZHVsZShfX2RlZlByb3AobW9kdWxlMiAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZHVsZTIpKSA6IHt9LCBcImRlZmF1bHRcIiwgbW9kdWxlMiAmJiBtb2R1bGUyLl9fZXNNb2R1bGUgJiYgXCJkZWZhdWx0XCIgaW4gbW9kdWxlMiA/IHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUyLmRlZmF1bHQ7IH0sIGVudW1lcmFibGU6IHRydWUgfSA6IHsgdmFsdWU6IG1vZHVsZTIsIGVudW1lcmFibGU6IHRydWUgfSkpLCBtb2R1bGUyKTtcclxufTtcclxudmFyIF9fYXN5bmMgPSBmdW5jdGlvbiAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBmdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9O1xyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG4vLyBzcmMvcXVlcnkvaW5kZXgudHNcclxuX19tYXJrQXNNb2R1bGUoZXhwb3J0cyk7XHJcbl9fZXhwb3J0KGV4cG9ydHMsIHtcclxuICAgIFF1ZXJ5U3RhdHVzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBRdWVyeVN0YXR1czsgfSxcclxuICAgIGJ1aWxkQ3JlYXRlQXBpOiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWlsZENyZWF0ZUFwaTsgfSxcclxuICAgIGNvcHlXaXRoU3RydWN0dXJhbFNoYXJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcHlXaXRoU3RydWN0dXJhbFNoYXJpbmc7IH0sXHJcbiAgICBjb3JlTW9kdWxlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlTW9kdWxlOyB9LFxyXG4gICAgY29yZU1vZHVsZU5hbWU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVNb2R1bGVOYW1lOyB9LFxyXG4gICAgY3JlYXRlQXBpOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVBcGk7IH0sXHJcbiAgICBkZWZhdWx0U2VyaWFsaXplUXVlcnlBcmdzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWZhdWx0U2VyaWFsaXplUXVlcnlBcmdzOyB9LFxyXG4gICAgZmFrZUJhc2VRdWVyeTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFrZUJhc2VRdWVyeTsgfSxcclxuICAgIGZldGNoQmFzZVF1ZXJ5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaEJhc2VRdWVyeTsgfSxcclxuICAgIHJldHJ5OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXRyeTsgfSxcclxuICAgIHNldHVwTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXR1cExpc3RlbmVyczsgfSxcclxuICAgIHNraXBTZWxlY3RvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2tpcFNlbGVjdG9yOyB9LFxyXG4gICAgc2tpcFRva2VuOiBmdW5jdGlvbiAoKSB7IHJldHVybiBza2lwVG9rZW47IH1cclxufSk7XHJcbi8vIHNyYy9xdWVyeS9jb3JlL2FwaVN0YXRlLnRzXHJcbnZhciBRdWVyeVN0YXR1cztcclxuKGZ1bmN0aW9uIChRdWVyeVN0YXR1czIpIHtcclxuICAgIFF1ZXJ5U3RhdHVzMltcInVuaW5pdGlhbGl6ZWRcIl0gPSBcInVuaW5pdGlhbGl6ZWRcIjtcclxuICAgIFF1ZXJ5U3RhdHVzMltcInBlbmRpbmdcIl0gPSBcInBlbmRpbmdcIjtcclxuICAgIFF1ZXJ5U3RhdHVzMltcImZ1bGZpbGxlZFwiXSA9IFwiZnVsZmlsbGVkXCI7XHJcbiAgICBRdWVyeVN0YXR1czJbXCJyZWplY3RlZFwiXSA9IFwicmVqZWN0ZWRcIjtcclxufSkoUXVlcnlTdGF0dXMgfHwgKFF1ZXJ5U3RhdHVzID0ge30pKTtcclxuZnVuY3Rpb24gZ2V0UmVxdWVzdFN0YXR1c0ZsYWdzKHN0YXR1cykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXM6IHN0YXR1cyxcclxuICAgICAgICBpc1VuaW5pdGlhbGl6ZWQ6IHN0YXR1cyA9PT0gUXVlcnlTdGF0dXMudW5pbml0aWFsaXplZCxcclxuICAgICAgICBpc0xvYWRpbmc6IHN0YXR1cyA9PT0gUXVlcnlTdGF0dXMucGVuZGluZyxcclxuICAgICAgICBpc1N1Y2Nlc3M6IHN0YXR1cyA9PT0gUXVlcnlTdGF0dXMuZnVsZmlsbGVkLFxyXG4gICAgICAgIGlzRXJyb3I6IHN0YXR1cyA9PT0gUXVlcnlTdGF0dXMucmVqZWN0ZWRcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2lzQWJzb2x1dGVVcmwudHNcclxuZnVuY3Rpb24gaXNBYnNvbHV0ZVVybCh1cmwpIHtcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKF58OikvL1wiKS50ZXN0KHVybCk7XHJcbn1cclxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2pvaW5VcmxzLnRzXHJcbnZhciB3aXRob3V0VHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIHVybC5yZXBsYWNlKC9cXC8kLywgXCJcIik7IH07XHJcbnZhciB3aXRob3V0TGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gKHVybCkgeyByZXR1cm4gdXJsLnJlcGxhY2UoL15cXC8vLCBcIlwiKTsgfTtcclxuZnVuY3Rpb24gam9pblVybHMoYmFzZSwgdXJsKSB7XHJcbiAgICBpZiAoIWJhc2UpIHtcclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgfVxyXG4gICAgaWYgKCF1cmwpIHtcclxuICAgICAgICByZXR1cm4gYmFzZTtcclxuICAgIH1cclxuICAgIGlmIChpc0Fic29sdXRlVXJsKHVybCkpIHtcclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgfVxyXG4gICAgdmFyIGRlbGltaXRlciA9IGJhc2UuZW5kc1dpdGgoXCIvXCIpIHx8ICF1cmwuc3RhcnRzV2l0aChcIj9cIikgPyBcIi9cIiA6IFwiXCI7XHJcbiAgICBiYXNlID0gd2l0aG91dFRyYWlsaW5nU2xhc2goYmFzZSk7XHJcbiAgICB1cmwgPSB3aXRob3V0TGVhZGluZ1NsYXNoKHVybCk7XHJcbiAgICByZXR1cm4gXCJcIiArIGJhc2UgKyBkZWxpbWl0ZXIgKyB1cmw7XHJcbn1cclxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2ZsYXR0ZW4udHNcclxudmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiAoYXJyKSB7IHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGFycik7IH07XHJcbi8vIHNyYy9xdWVyeS91dGlscy9pc09ubGluZS50c1xyXG5mdW5jdGlvbiBpc09ubGluZSgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgbmF2aWdhdG9yID09PSBcInVuZGVmaW5lZFwiID8gdHJ1ZSA6IG5hdmlnYXRvci5vbkxpbmUgPT09IHZvaWQgMCA/IHRydWUgOiBuYXZpZ2F0b3Iub25MaW5lO1xyXG59XHJcbi8vIHNyYy9xdWVyeS91dGlscy9pc0RvY3VtZW50VmlzaWJsZS50c1xyXG5mdW5jdGlvbiBpc0RvY3VtZW50VmlzaWJsZSgpIHtcclxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgIT09IFwiaGlkZGVuXCI7XHJcbn1cclxuLy8gc3JjL3F1ZXJ5L3V0aWxzL2NvcHlXaXRoU3RydWN0dXJhbFNoYXJpbmcudHNcclxudmFyIGltcG9ydF90b29sa2l0ID0gX190b01vZHVsZShyZXF1aXJlKFwiQHJlZHV4anMvdG9vbGtpdFwiKSk7XHJcbnZhciBpc1BsYWluT2JqZWN0ID0gaW1wb3J0X3Rvb2xraXQuaXNQbGFpbk9iamVjdDtcclxuZnVuY3Rpb24gY29weVdpdGhTdHJ1Y3R1cmFsU2hhcmluZyhvbGRPYmosIG5ld09iaikge1xyXG4gICAgaWYgKG9sZE9iaiA9PT0gbmV3T2JqIHx8ICEoaXNQbGFpbk9iamVjdChvbGRPYmopICYmIGlzUGxhaW5PYmplY3QobmV3T2JqKSB8fCBBcnJheS5pc0FycmF5KG9sZE9iaikgJiYgQXJyYXkuaXNBcnJheShuZXdPYmopKSkge1xyXG4gICAgICAgIHJldHVybiBuZXdPYmo7XHJcbiAgICB9XHJcbiAgICB2YXIgbmV3S2V5cyA9IE9iamVjdC5rZXlzKG5ld09iaik7XHJcbiAgICB2YXIgb2xkS2V5cyA9IE9iamVjdC5rZXlzKG9sZE9iaik7XHJcbiAgICB2YXIgaXNTYW1lT2JqZWN0ID0gbmV3S2V5cy5sZW5ndGggPT09IG9sZEtleXMubGVuZ3RoO1xyXG4gICAgdmFyIG1lcmdlT2JqID0gQXJyYXkuaXNBcnJheShuZXdPYmopID8gW10gOiB7fTtcclxuICAgIGZvciAodmFyIF9qID0gMCwgbmV3S2V5c18xID0gbmV3S2V5czsgX2ogPCBuZXdLZXlzXzEubGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IG5ld0tleXNfMVtfal07XHJcbiAgICAgICAgbWVyZ2VPYmpba2V5XSA9IGNvcHlXaXRoU3RydWN0dXJhbFNoYXJpbmcob2xkT2JqW2tleV0sIG5ld09ialtrZXldKTtcclxuICAgICAgICBpZiAoaXNTYW1lT2JqZWN0KVxyXG4gICAgICAgICAgICBpc1NhbWVPYmplY3QgPSBvbGRPYmpba2V5XSA9PT0gbWVyZ2VPYmpba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBpc1NhbWVPYmplY3QgPyBvbGRPYmogOiBtZXJnZU9iajtcclxufVxyXG4vLyBzcmMvcXVlcnkvZmV0Y2hCYXNlUXVlcnkudHNcclxudmFyIGltcG9ydF90b29sa2l0MiA9IF9fdG9Nb2R1bGUocmVxdWlyZShcIkByZWR1eGpzL3Rvb2xraXRcIikpO1xyXG52YXIgZGVmYXVsdEZldGNoRm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2ogPSAwOyBfaiA8IGFyZ3VtZW50cy5sZW5ndGg7IF9qKyspIHtcclxuICAgICAgICBhcmdzW19qXSA9IGFyZ3VtZW50c1tfal07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmV0Y2guYXBwbHkodm9pZCAwLCBhcmdzKTtcclxufTtcclxudmFyIGRlZmF1bHRWYWxpZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIChyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPD0gMjk5OyB9O1xyXG52YXIgZGVmYXVsdElzSnNvbkNvbnRlbnRUeXBlID0gZnVuY3Rpb24gKGhlYWRlcnMpIHsgcmV0dXJuIC9pb25cXC8odm5kXFwuYXBpXFwrKT9qc29uLy50ZXN0KGhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpIHx8IFwiXCIpOyB9O1xyXG5mdW5jdGlvbiBzdHJpcFVuZGVmaW5lZChvYmopIHtcclxuICAgIGlmICghKDAsIGltcG9ydF90b29sa2l0Mi5pc1BsYWluT2JqZWN0KShvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIHZhciBjb3B5ID0gX19zcHJlYWRWYWx1ZXMoe30sIG9iaik7XHJcbiAgICBmb3IgKHZhciBfaiA9IDAsIF9rID0gT2JqZWN0LmVudHJpZXMoY29weSk7IF9qIDwgX2subGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgdmFyIF9sID0gX2tbX2pdLCBrID0gX2xbMF0sIHYgPSBfbFsxXTtcclxuICAgICAgICBpZiAodiA9PT0gdm9pZCAwKVxyXG4gICAgICAgICAgICBkZWxldGUgY29weVtrXTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb3B5O1xyXG59XHJcbmZ1bmN0aW9uIGZldGNoQmFzZVF1ZXJ5KF9hKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgaWYgKF9hID09PSB2b2lkIDApIHsgX2EgPSB7fTsgfVxyXG4gICAgdmFyIF9iID0gX2EsIGJhc2VVcmwgPSBfYi5iYXNlVXJsLCBfaiA9IF9iLnByZXBhcmVIZWFkZXJzLCBwcmVwYXJlSGVhZGVycyA9IF9qID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoeCkgeyByZXR1cm4geDsgfSA6IF9qLCBfayA9IF9iLmZldGNoRm4sIGZldGNoRm4gPSBfayA9PT0gdm9pZCAwID8gZGVmYXVsdEZldGNoRm4gOiBfaywgcGFyYW1zU2VyaWFsaXplciA9IF9iLnBhcmFtc1NlcmlhbGl6ZXIsIF9sID0gX2IuaXNKc29uQ29udGVudFR5cGUsIGlzSnNvbkNvbnRlbnRUeXBlID0gX2wgPT09IHZvaWQgMCA/IGRlZmF1bHRJc0pzb25Db250ZW50VHlwZSA6IF9sLCBfbSA9IF9iLmpzb25Db250ZW50VHlwZSwganNvbkNvbnRlbnRUeXBlID0gX20gPT09IHZvaWQgMCA/IFwiYXBwbGljYXRpb24vanNvblwiIDogX20sIGpzb25SZXBsYWNlciA9IF9iLmpzb25SZXBsYWNlciwgZGVmYXVsdFRpbWVvdXQgPSBfYi50aW1lb3V0LCBnbG9iYWxSZXNwb25zZUhhbmRsZXIgPSBfYi5yZXNwb25zZUhhbmRsZXIsIGdsb2JhbFZhbGlkYXRlU3RhdHVzID0gX2IudmFsaWRhdGVTdGF0dXMsIGJhc2VGZXRjaE9wdGlvbnMgPSBfX29ialJlc3QoX2IsIFtcclxuICAgICAgICBcImJhc2VVcmxcIixcclxuICAgICAgICBcInByZXBhcmVIZWFkZXJzXCIsXHJcbiAgICAgICAgXCJmZXRjaEZuXCIsXHJcbiAgICAgICAgXCJwYXJhbXNTZXJpYWxpemVyXCIsXHJcbiAgICAgICAgXCJpc0pzb25Db250ZW50VHlwZVwiLFxyXG4gICAgICAgIFwianNvbkNvbnRlbnRUeXBlXCIsXHJcbiAgICAgICAgXCJqc29uUmVwbGFjZXJcIixcclxuICAgICAgICBcInRpbWVvdXRcIixcclxuICAgICAgICBcInJlc3BvbnNlSGFuZGxlclwiLFxyXG4gICAgICAgIFwidmFsaWRhdGVTdGF0dXNcIlxyXG4gICAgXSk7XHJcbiAgICBpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiICYmIGZldGNoRm4gPT09IGRlZmF1bHRGZXRjaEZuKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiV2FybmluZzogYGZldGNoYCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2Ugc3VwcGx5IGEgY3VzdG9tIGBmZXRjaEZuYCBwcm9wZXJ0eSB0byB1c2UgYGZldGNoQmFzZVF1ZXJ5YCBvbiBTU1IgZW52aXJvbm1lbnRzLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnLCBhcGkpIHsgcmV0dXJuIF9fYXN5bmMoX3RoaXMsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc2lnbmFsLCBnZXRTdGF0ZSwgZXh0cmEsIGVuZHBvaW50LCBmb3JjZWQsIHR5cGUsIG1ldGEsIF9hMiwgdXJsLCBfaiwgaGVhZGVycywgX2ssIHBhcmFtcywgX2wsIHJlc3BvbnNlSGFuZGxlciwgX20sIHZhbGlkYXRlU3RhdHVzLCBfbywgdGltZW91dCwgcmVzdCwgY29uZmlnLCBfcCwgaXNKc29uaWZpYWJsZSwgZGl2aWRlciwgcXVlcnksIHJlcXVlc3QsIHJlcXVlc3RDbG9uZSwgcmVzcG9uc2UsIHRpbWVkT3V0LCB0aW1lb3V0SWQsIGVfMSwgcmVzcG9uc2VDbG9uZSwgcmVzdWx0RGF0YSwgcmVzcG9uc2VUZXh0LCBoYW5kbGVSZXNwb25zZUVycm9yXzEsIGVfMjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9xKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX3EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBzaWduYWwgPSBhcGkuc2lnbmFsLCBnZXRTdGF0ZSA9IGFwaS5nZXRTdGF0ZSwgZXh0cmEgPSBhcGkuZXh0cmEsIGVuZHBvaW50ID0gYXBpLmVuZHBvaW50LCBmb3JjZWQgPSBhcGkuZm9yY2VkLCB0eXBlID0gYXBpLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EyID0gdHlwZW9mIGFyZyA9PSBcInN0cmluZ1wiID8geyB1cmw6IGFyZyB9IDogYXJnLCB1cmwgPSBfYTIudXJsLCBfaiA9IF9hMi5oZWFkZXJzLCBoZWFkZXJzID0gX2ogPT09IHZvaWQgMCA/IG5ldyBIZWFkZXJzKGJhc2VGZXRjaE9wdGlvbnMuaGVhZGVycykgOiBfaiwgX2sgPSBfYTIucGFyYW1zLCBwYXJhbXMgPSBfayA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ssIF9sID0gX2EyLnJlc3BvbnNlSGFuZGxlciwgcmVzcG9uc2VIYW5kbGVyID0gX2wgPT09IHZvaWQgMCA/IGdsb2JhbFJlc3BvbnNlSGFuZGxlciAhPSBudWxsID8gZ2xvYmFsUmVzcG9uc2VIYW5kbGVyIDogXCJqc29uXCIgOiBfbCwgX20gPSBfYTIudmFsaWRhdGVTdGF0dXMsIHZhbGlkYXRlU3RhdHVzID0gX20gPT09IHZvaWQgMCA/IGdsb2JhbFZhbGlkYXRlU3RhdHVzICE9IG51bGwgPyBnbG9iYWxWYWxpZGF0ZVN0YXR1cyA6IGRlZmF1bHRWYWxpZGF0ZVN0YXR1cyA6IF9tLCBfbyA9IF9hMi50aW1lb3V0LCB0aW1lb3V0ID0gX28gPT09IHZvaWQgMCA/IGRlZmF1bHRUaW1lb3V0IDogX28sIHJlc3QgPSBfX29ialJlc3QoX2EyLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidXJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVhZGVyc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJlc3BvbnNlSGFuZGxlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlkYXRlU3RhdHVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGltZW91dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgYmFzZUZldGNoT3B0aW9ucyksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBzaWduYWxcclxuICAgICAgICAgICAgICAgICAgICB9KSwgcmVzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHN0cmlwVW5kZWZpbmVkKGhlYWRlcnMpKTtcclxuICAgICAgICAgICAgICAgICAgICBfcCA9IGNvbmZpZztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBwcmVwYXJlSGVhZGVycyhoZWFkZXJzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludDogZW5kcG9pbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZWQ6IGZvcmNlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9wLmhlYWRlcnMgPSAoX3Euc2VudCgpKSB8fCBoZWFkZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzSnNvbmlmaWFibGUgPSBmdW5jdGlvbiAoYm9keSkgeyByZXR1cm4gdHlwZW9mIGJvZHkgPT09IFwib2JqZWN0XCIgJiYgKCgwLCBpbXBvcnRfdG9vbGtpdDIuaXNQbGFpbk9iamVjdCkoYm9keSkgfHwgQXJyYXkuaXNBcnJheShib2R5KSB8fCB0eXBlb2YgYm9keS50b0pTT04gPT09IFwiZnVuY3Rpb25cIik7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25maWcuaGVhZGVycy5oYXMoXCJjb250ZW50LXR5cGVcIikgJiYgaXNKc29uaWZpYWJsZShjb25maWcuYm9keSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMuc2V0KFwiY29udGVudC10eXBlXCIsIGpzb25Db250ZW50VHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0pzb25pZmlhYmxlKGNvbmZpZy5ib2R5KSAmJiBpc0pzb25Db250ZW50VHlwZShjb25maWcuaGVhZGVycykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmJvZHkgPSBKU09OLnN0cmluZ2lmeShjb25maWcuYm9keSwganNvblJlcGxhY2VyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXZpZGVyID0gfnVybC5pbmRleE9mKFwiP1wiKSA/IFwiJlwiIDogXCI/XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gcGFyYW1zU2VyaWFsaXplciA/IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKSA6IG5ldyBVUkxTZWFyY2hQYXJhbXMoc3RyaXBVbmRlZmluZWQocGFyYW1zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSBkaXZpZGVyICsgcXVlcnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHVybCA9IGpvaW5VcmxzKGJhc2VVcmwsIHVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwgY29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Q2xvbmUgPSBuZXcgUmVxdWVzdCh1cmwsIGNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YSA9IHsgcmVxdWVzdDogcmVxdWVzdENsb25lIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZWRPdXQgPSBmYWxzZSwgdGltZW91dElkID0gdGltZW91dCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWRPdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICBfcS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgX3EudHJ5cy5wdXNoKFsyLCA0LCA1LCA2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2hGbihyZXF1ZXN0KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfcS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZV8xID0gX3Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogdGltZWRPdXQgPyBcIlRJTUVPVVRfRVJST1JcIiA6IFwiRkVUQ0hfRVJST1JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogU3RyaW5nKGVfMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhOiBtZXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0SWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VDbG9uZSA9IHJlc3BvbnNlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YS5yZXNwb25zZSA9IHJlc3BvbnNlQ2xvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBfcS5sYWJlbCA9IDc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgX3EudHJ5cy5wdXNoKFs3LCA5LCAsIDEwXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UsIHJlc3BvbnNlSGFuZGxlcikudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gcmVzdWx0RGF0YSA9IHI7IH0sIGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVSZXNwb25zZUVycm9yXzEgPSBlOyB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlQ2xvbmUudGV4dCgpLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHJlc3BvbnNlVGV4dCA9IHI7IH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICBfcS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZVJlc3BvbnNlRXJyb3JfMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgaGFuZGxlUmVzcG9uc2VFcnJvcl8xO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDEwXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgICAgICBlXzIgPSBfcS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcIlBBUlNJTkdfRVJST1JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3BvbnNlVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogU3RyaW5nKGVfMilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhOiBtZXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLCByZXN1bHREYXRhKSA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzdWx0RGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YTogbWV0YVxyXG4gICAgICAgICAgICAgICAgICAgIH0gOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdERhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YTogbWV0YVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsgfTtcclxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlLCByZXNwb25zZUhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0O1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9qKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9qLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlSGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzcG9uc2VIYW5kbGVyKHJlc3BvbnNlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlSGFuZGxlciA9PT0gXCJjb250ZW50LXR5cGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VIYW5kbGVyID0gaXNKc29uQ29udGVudFR5cGUocmVzcG9uc2UuaGVhZGVycykgPyBcImpzb25cIiA6IFwidGV4dFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlSGFuZGxlciA9PT0gXCJqc29uXCIpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzcG9uc2UudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBfai5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0ZXh0Lmxlbmd0aCA/IEpTT04ucGFyc2UodGV4dCkgOiBudWxsXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCByZXNwb25zZS50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vLyBzcmMvcXVlcnkvSGFuZGxlZEVycm9yLnRzXHJcbnZhciBIYW5kbGVkRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIYW5kbGVkRXJyb3IodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICBpZiAobWV0YSA9PT0gdm9pZCAwKSB7IG1ldGEgPSB2b2lkIDA7IH1cclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBIYW5kbGVkRXJyb3I7XHJcbn0oKSk7XHJcbi8vIHNyYy9xdWVyeS9yZXRyeS50c1xyXG5mdW5jdGlvbiBkZWZhdWx0QmFja29mZihhdHRlbXB0LCBtYXhSZXRyaWVzKSB7XHJcbiAgICBpZiAoYXR0ZW1wdCA9PT0gdm9pZCAwKSB7IGF0dGVtcHQgPSAwOyB9XHJcbiAgICBpZiAobWF4UmV0cmllcyA9PT0gdm9pZCAwKSB7IG1heFJldHJpZXMgPSA1OyB9XHJcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGF0dGVtcHRzLCB0aW1lb3V0O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2opIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfai5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGF0dGVtcHRzID0gTWF0aC5taW4oYXR0ZW1wdCwgbWF4UmV0cmllcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IH5+KChNYXRoLnJhbmRvbSgpICsgMC40KSAqICgzMDAgPDwgYXR0ZW1wdHMpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAocmVzKSB7IHJldHVybiByZXNvbHZlKHJlcyk7IH0sIHRpbWVvdXQpOyB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2ouc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZmFpbChlKSB7XHJcbiAgICB0aHJvdyBPYmplY3QuYXNzaWduKG5ldyBIYW5kbGVkRXJyb3IoeyBlcnJvcjogZSB9KSwge1xyXG4gICAgICAgIHRocm93SW1tZWRpYXRlbHk6IHRydWVcclxuICAgIH0pO1xyXG59XHJcbnZhciBFTVBUWV9PUFRJT05TID0ge307XHJcbnZhciByZXRyeVdpdGhCYWNrb2ZmID0gZnVuY3Rpb24gKGJhc2VRdWVyeSwgZGVmYXVsdE9wdGlvbnMpIHsgcmV0dXJuIGZ1bmN0aW9uIChhcmdzLCBhcGksIGV4dHJhT3B0aW9ucykgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBwb3NzaWJsZU1heFJldHJpZXMsIG1heFJldHJpZXMsIGRlZmF1bHRSZXRyeUNvbmRpdGlvbiwgb3B0aW9ucywgcmV0cnkyLCByZXN1bHQsIGVfMztcclxuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2opIHtcclxuICAgICAgICBzd2l0Y2ggKF9qLmxhYmVsKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHBvc3NpYmxlTWF4UmV0cmllcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICA1LFxyXG4gICAgICAgICAgICAgICAgICAgIChkZWZhdWx0T3B0aW9ucyB8fCBFTVBUWV9PUFRJT05TKS5tYXhSZXRyaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgIChleHRyYU9wdGlvbnMgfHwgRU1QVFlfT1BUSU9OUykubWF4UmV0cmllc1xyXG4gICAgICAgICAgICAgICAgXS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggIT09IHZvaWQgMDsgfSk7XHJcbiAgICAgICAgICAgICAgICBtYXhSZXRyaWVzID0gcG9zc2libGVNYXhSZXRyaWVzLnNsaWNlKC0xKVswXTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRSZXRyeUNvbmRpdGlvbiA9IGZ1bmN0aW9uIChfLCBfXywgX2opIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ZW1wdCA9IF9qLmF0dGVtcHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0dGVtcHQgPD0gbWF4UmV0cmllcztcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1heFJldHJpZXM6IG1heFJldHJpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFja29mZjogZGVmYXVsdEJhY2tvZmYsXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0cnlDb25kaXRpb246IGRlZmF1bHRSZXRyeUNvbmRpdGlvblxyXG4gICAgICAgICAgICAgICAgfSwgZGVmYXVsdE9wdGlvbnMpLCBleHRyYU9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgcmV0cnkyID0gMDtcclxuICAgICAgICAgICAgICAgIF9qLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgIF9qLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgX2oudHJ5cy5wdXNoKFsyLCA0LCAsIDZdKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJhc2VRdWVyeShhcmdzLCBhcGksIGV4dHJhT3B0aW9ucyldO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBfai5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEhhbmRsZWRFcnJvcihyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdF07XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIGVfMyA9IF9qLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHJ5MisrO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVfMy50aHJvd0ltbWVkaWF0ZWx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMyBpbnN0YW5jZW9mIEhhbmRsZWRFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZV8zLnZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZV8zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGVfMyBpbnN0YW5jZW9mIEhhbmRsZWRFcnJvciAmJiAhb3B0aW9ucy5yZXRyeUNvbmRpdGlvbihlXzMudmFsdWUuZXJyb3IsIGFyZ3MsIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRlbXB0OiByZXRyeTIsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZVF1ZXJ5QXBpOiBhcGksXHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFPcHRpb25zOiBleHRyYU9wdGlvbnNcclxuICAgICAgICAgICAgICAgIH0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVfMy52YWx1ZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBvcHRpb25zLmJhY2tvZmYocmV0cnkyLCBvcHRpb25zLm1heFJldHJpZXMpXTtcclxuICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgX2ouc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTsgfTsgfTtcclxudmFyIHJldHJ5ID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24ocmV0cnlXaXRoQmFja29mZiwgeyBmYWlsOiBmYWlsIH0pO1xyXG4vLyBzcmMvcXVlcnkvY29yZS9zZXR1cExpc3RlbmVycy50c1xyXG52YXIgaW1wb3J0X3Rvb2xraXQzID0gX190b01vZHVsZShyZXF1aXJlKFwiQHJlZHV4anMvdG9vbGtpdFwiKSk7XHJcbnZhciBvbkZvY3VzID0gLyogQF9fUFVSRV9fICovICgwLCBpbXBvcnRfdG9vbGtpdDMuY3JlYXRlQWN0aW9uKShcIl9fcnRrcS9mb2N1c2VkXCIpO1xyXG52YXIgb25Gb2N1c0xvc3QgPSAvKiBAX19QVVJFX18gKi8gKDAsIGltcG9ydF90b29sa2l0My5jcmVhdGVBY3Rpb24pKFwiX19ydGtxL3VuZm9jdXNlZFwiKTtcclxudmFyIG9uT25saW5lID0gLyogQF9fUFVSRV9fICovICgwLCBpbXBvcnRfdG9vbGtpdDMuY3JlYXRlQWN0aW9uKShcIl9fcnRrcS9vbmxpbmVcIik7XHJcbnZhciBvbk9mZmxpbmUgPSAvKiBAX19QVVJFX18gKi8gKDAsIGltcG9ydF90b29sa2l0My5jcmVhdGVBY3Rpb24pKFwiX19ydGtxL29mZmxpbmVcIik7XHJcbnZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xyXG5mdW5jdGlvbiBzZXR1cExpc3RlbmVycyhkaXNwYXRjaCwgY3VzdG9tSGFuZGxlcikge1xyXG4gICAgZnVuY3Rpb24gZGVmYXVsdEhhbmRsZXIoKSB7XHJcbiAgICAgICAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGF0Y2gob25Gb2N1cygpKTsgfTtcclxuICAgICAgICB2YXIgaGFuZGxlRm9jdXNMb3N0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGF0Y2gob25Gb2N1c0xvc3QoKSk7IH07XHJcbiAgICAgICAgdmFyIGhhbmRsZU9ubGluZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKG9uT25saW5lKCkpOyB9O1xyXG4gICAgICAgIHZhciBoYW5kbGVPZmZsaW5lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGF0Y2gob25PZmZsaW5lKCkpOyB9O1xyXG4gICAgICAgIHZhciBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAod2luZG93LmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUZvY3VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVGb2N1c0xvc3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCFpbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgaGFuZGxlRm9jdXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib25saW5lXCIsIGhhbmRsZU9ubGluZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIGhhbmRsZU9mZmxpbmUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgaGFuZGxlRm9jdXMpO1xyXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib25saW5lXCIsIGhhbmRsZU9ubGluZSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCBoYW5kbGVPZmZsaW5lKTtcclxuICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZTtcclxuICAgIH1cclxuICAgIHJldHVybiBjdXN0b21IYW5kbGVyID8gY3VzdG9tSGFuZGxlcihkaXNwYXRjaCwgeyBvbkZvY3VzOiBvbkZvY3VzLCBvbkZvY3VzTG9zdDogb25Gb2N1c0xvc3QsIG9uT2ZmbGluZTogb25PZmZsaW5lLCBvbk9ubGluZTogb25PbmxpbmUgfSkgOiBkZWZhdWx0SGFuZGxlcigpO1xyXG59XHJcbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkU2VsZWN0b3JzLnRzXHJcbnZhciBpbXBvcnRfdG9vbGtpdDcgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpKTtcclxuLy8gc3JjL3F1ZXJ5L2VuZHBvaW50RGVmaW5pdGlvbnMudHNcclxudmFyIERlZmluaXRpb25UeXBlO1xyXG4oZnVuY3Rpb24gKERlZmluaXRpb25UeXBlMikge1xyXG4gICAgRGVmaW5pdGlvblR5cGUyW1wicXVlcnlcIl0gPSBcInF1ZXJ5XCI7XHJcbiAgICBEZWZpbml0aW9uVHlwZTJbXCJtdXRhdGlvblwiXSA9IFwibXV0YXRpb25cIjtcclxufSkoRGVmaW5pdGlvblR5cGUgfHwgKERlZmluaXRpb25UeXBlID0ge30pKTtcclxuZnVuY3Rpb24gaXNRdWVyeURlZmluaXRpb24oZSkge1xyXG4gICAgcmV0dXJuIGUudHlwZSA9PT0gRGVmaW5pdGlvblR5cGUucXVlcnk7XHJcbn1cclxuZnVuY3Rpb24gaXNNdXRhdGlvbkRlZmluaXRpb24oZSkge1xyXG4gICAgcmV0dXJuIGUudHlwZSA9PT0gRGVmaW5pdGlvblR5cGUubXV0YXRpb247XHJcbn1cclxuZnVuY3Rpb24gY2FsY3VsYXRlUHJvdmlkZWRCeShkZXNjcmlwdGlvbiwgcmVzdWx0LCBlcnJvciwgcXVlcnlBcmcsIG1ldGEsIGFzc2VydFRhZ1R5cGVzKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihkZXNjcmlwdGlvbikpIHtcclxuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb24ocmVzdWx0LCBlcnJvciwgcXVlcnlBcmcsIG1ldGEpLm1hcChleHBhbmRUYWdEZXNjcmlwdGlvbikubWFwKGFzc2VydFRhZ1R5cGVzKTtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KGRlc2NyaXB0aW9uKSkge1xyXG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbi5tYXAoZXhwYW5kVGFnRGVzY3JpcHRpb24pLm1hcChhc3NlcnRUYWdUeXBlcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW107XHJcbn1cclxuZnVuY3Rpb24gaXNGdW5jdGlvbih0KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHQgPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG5mdW5jdGlvbiBleHBhbmRUYWdEZXNjcmlwdGlvbihkZXNjcmlwdGlvbikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBkZXNjcmlwdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHsgdHlwZTogZGVzY3JpcHRpb24gfSA6IGRlc2NyaXB0aW9uO1xyXG59XHJcbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkU2xpY2UudHNcclxudmFyIGltcG9ydF90b29sa2l0NiA9IF9fdG9Nb2R1bGUocmVxdWlyZShcIkByZWR1eGpzL3Rvb2xraXRcIikpO1xyXG4vLyBzcmMvcXVlcnkvdXRpbHMvaXNOb3ROdWxsaXNoLnRzXHJcbmZ1bmN0aW9uIGlzTm90TnVsbGlzaCh2KSB7XHJcbiAgICByZXR1cm4gdiAhPSBudWxsO1xyXG59XHJcbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkSW5pdGlhdGUudHNcclxudmFyIGZvcmNlUXVlcnlGblN5bWJvbCA9IFN5bWJvbChcImZvcmNlUXVlcnlGblwiKTtcclxudmFyIGlzVXBzZXJ0UXVlcnkgPSBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiB0eXBlb2YgYXJnW2ZvcmNlUXVlcnlGblN5bWJvbF0gPT09IFwiZnVuY3Rpb25cIjsgfTtcclxuZnVuY3Rpb24gYnVpbGRJbml0aWF0ZShfaikge1xyXG4gICAgdmFyIHNlcmlhbGl6ZVF1ZXJ5QXJncyA9IF9qLnNlcmlhbGl6ZVF1ZXJ5QXJncywgcXVlcnlUaHVuayA9IF9qLnF1ZXJ5VGh1bmssIG11dGF0aW9uVGh1bmsgPSBfai5tdXRhdGlvblRodW5rLCBhcGkgPSBfai5hcGksIGNvbnRleHQgPSBfai5jb250ZXh0O1xyXG4gICAgdmFyIHJ1bm5pbmdRdWVyaWVzID0gbmV3IE1hcCgpO1xyXG4gICAgdmFyIHJ1bm5pbmdNdXRhdGlvbnMgPSBuZXcgTWFwKCk7XHJcbiAgICB2YXIgX2sgPSBhcGkuaW50ZXJuYWxBY3Rpb25zLCB1bnN1YnNjcmliZVF1ZXJ5UmVzdWx0ID0gX2sudW5zdWJzY3JpYmVRdWVyeVJlc3VsdCwgcmVtb3ZlTXV0YXRpb25SZXN1bHQgPSBfay5yZW1vdmVNdXRhdGlvblJlc3VsdCwgdXBkYXRlU3Vic2NyaXB0aW9uT3B0aW9ucyA9IF9rLnVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnM7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJ1aWxkSW5pdGlhdGVRdWVyeTogYnVpbGRJbml0aWF0ZVF1ZXJ5LFxyXG4gICAgICAgIGJ1aWxkSW5pdGlhdGVNdXRhdGlvbjogYnVpbGRJbml0aWF0ZU11dGF0aW9uLFxyXG4gICAgICAgIGdldFJ1bm5pbmdRdWVyeVRodW5rOiBnZXRSdW5uaW5nUXVlcnlUaHVuayxcclxuICAgICAgICBnZXRSdW5uaW5nTXV0YXRpb25UaHVuazogZ2V0UnVubmluZ011dGF0aW9uVGh1bmssXHJcbiAgICAgICAgZ2V0UnVubmluZ1F1ZXJpZXNUaHVuazogZ2V0UnVubmluZ1F1ZXJpZXNUaHVuayxcclxuICAgICAgICBnZXRSdW5uaW5nTXV0YXRpb25zVGh1bms6IGdldFJ1bm5pbmdNdXRhdGlvbnNUaHVuayxcclxuICAgICAgICBnZXRSdW5uaW5nT3BlcmF0aW9uUHJvbWlzZXM6IGdldFJ1bm5pbmdPcGVyYXRpb25Qcm9taXNlcyxcclxuICAgICAgICByZW1vdmFsV2FybmluZzogcmVtb3ZhbFdhcm5pbmdcclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiByZW1vdmFsV2FybmluZygpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYWQgdG8gYmUgcmVtb3ZlZCBkdWUgdG8gYSBjb25jZXB0dWFsIGJ1ZyBpbiBSVEsuXFxuICAgICAgIFBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlZHV4anMvcmVkdXgtdG9vbGtpdC9wdWxsLzI0ODEgZm9yIGRldGFpbHMuXFxuICAgICAgIFNlZSBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3J0ay1xdWVyeS91c2FnZS9zZXJ2ZXItc2lkZS1yZW5kZXJpbmcgZm9yIG5ldyBndWlkYW5jZSBvbiBTU1IuXCIpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2V0UnVubmluZ09wZXJhdGlvblByb21pc2VzKCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJlbW92YWxXYXJuaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZXh0cmFjdCA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBBcnJheS5mcm9tKHYudmFsdWVzKCkpLmZsYXRNYXAoZnVuY3Rpb24gKHF1ZXJpZXNGb3JTdG9yZSkgeyByZXR1cm4gcXVlcmllc0ZvclN0b3JlID8gT2JqZWN0LnZhbHVlcyhxdWVyaWVzRm9yU3RvcmUpIDogW107IH0pOyB9O1xyXG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBleHRyYWN0KHJ1bm5pbmdRdWVyaWVzKSksIGV4dHJhY3QocnVubmluZ011dGF0aW9ucykpLmZpbHRlcihpc05vdE51bGxpc2gpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldFJ1bm5pbmdRdWVyeVRodW5rKGVuZHBvaW50TmFtZSwgcXVlcnlBcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHZhciBlbmRwb2ludERlZmluaXRpb24gPSBjb250ZXh0LmVuZHBvaW50RGVmaW5pdGlvbnNbZW5kcG9pbnROYW1lXTtcclxuICAgICAgICAgICAgdmFyIHF1ZXJ5Q2FjaGVLZXkgPSBzZXJpYWxpemVRdWVyeUFyZ3Moe1xyXG4gICAgICAgICAgICAgICAgcXVlcnlBcmdzOiBxdWVyeUFyZ3MsXHJcbiAgICAgICAgICAgICAgICBlbmRwb2ludERlZmluaXRpb246IGVuZHBvaW50RGVmaW5pdGlvbixcclxuICAgICAgICAgICAgICAgIGVuZHBvaW50TmFtZTogZW5kcG9pbnROYW1lXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gKF9hID0gcnVubmluZ1F1ZXJpZXMuZ2V0KGRpc3BhdGNoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hW3F1ZXJ5Q2FjaGVLZXldO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZXRSdW5uaW5nTXV0YXRpb25UaHVuayhfZW5kcG9pbnROYW1lLCBmaXhlZENhY2hlS2V5T3JSZXF1ZXN0SWQpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIChfYSA9IHJ1bm5pbmdNdXRhdGlvbnMuZ2V0KGRpc3BhdGNoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hW2ZpeGVkQ2FjaGVLZXlPclJlcXVlc3RJZF07XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldFJ1bm5pbmdRdWVyaWVzVGh1bmsoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gT2JqZWN0LnZhbHVlcyhydW5uaW5nUXVlcmllcy5nZXQoZGlzcGF0Y2gpIHx8IHt9KS5maWx0ZXIoaXNOb3ROdWxsaXNoKTsgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldFJ1bm5pbmdNdXRhdGlvbnNUaHVuaygpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiBPYmplY3QudmFsdWVzKHJ1bm5pbmdNdXRhdGlvbnMuZ2V0KGRpc3BhdGNoKSB8fCB7fSkuZmlsdGVyKGlzTm90TnVsbGlzaCk7IH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtaWRkbGV3YXJlV2FybmluZyhkaXNwYXRjaCkge1xyXG4gICAgICAgIGlmICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlV2FybmluZy50cmlnZ2VyZWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciByZWdpc3RlcmVkID0gZGlzcGF0Y2goYXBpLmludGVybmFsQWN0aW9ucy5pbnRlcm5hbF9wcm9iZVN1YnNjcmlwdGlvbih7XHJcbiAgICAgICAgICAgICAgICBxdWVyeUNhY2hlS2V5OiBcIkRPRVNfTk9UX0VYSVNUXCIsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IFwiRFVNTVlfUkVRVUVTVF9JRFwiXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgbWlkZGxld2FyZVdhcm5pbmcudHJpZ2dlcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWdpc3RlcmVkICE9PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2FybmluZzogTWlkZGxld2FyZSBmb3IgUlRLLVF1ZXJ5IEFQSSBhdCByZWR1Y2VyUGF0aCBcXFwiXCIgKyBhcGkucmVkdWNlclBhdGggKyBcIlxcXCIgaGFzIG5vdCBiZWVuIGFkZGVkIHRvIHRoZSBzdG9yZS5cXG5Zb3UgbXVzdCBhZGQgdGhlIG1pZGRsZXdhcmUgZm9yIFJUSy1RdWVyeSB0byBmdW5jdGlvbiBjb3JyZWN0bHkhXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYnVpbGRJbml0aWF0ZVF1ZXJ5KGVuZHBvaW50TmFtZSwgZW5kcG9pbnREZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5QWN0aW9uID0gZnVuY3Rpb24gKGFyZywgX2opIHtcclxuICAgICAgICAgICAgdmFyIF9rID0gX2ogPT09IHZvaWQgMCA/IHt9IDogX2osIF9sID0gX2suc3Vic2NyaWJlLCBzdWJzY3JpYmUgPSBfbCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9sLCBmb3JjZVJlZmV0Y2ggPSBfay5mb3JjZVJlZmV0Y2gsIHN1YnNjcmlwdGlvbk9wdGlvbnMgPSBfay5zdWJzY3JpcHRpb25PcHRpb25zLCBfbSA9IGZvcmNlUXVlcnlGblN5bWJvbCwgZm9yY2VRdWVyeUZuID0gX2tbX21dO1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9qO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5Q2FjaGVLZXkgPSBzZXJpYWxpemVRdWVyeUFyZ3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5QXJnczogYXJnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZHBvaW50RGVmaW5pdGlvbjogZW5kcG9pbnREZWZpbml0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZHBvaW50TmFtZTogZW5kcG9pbnROYW1lXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciB0aHVuayA9IHF1ZXJ5VGh1bmsoKF9qID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInF1ZXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZVJlZmV0Y2g6IGZvcmNlUmVmZXRjaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uT3B0aW9uczogc3Vic2NyaXB0aW9uT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnROYW1lOiBlbmRwb2ludE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsQXJnczogYXJnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUNhY2hlS2V5OiBxdWVyeUNhY2hlS2V5XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBfaltmb3JjZVF1ZXJ5Rm5TeW1ib2xdID0gZm9yY2VRdWVyeUZuLFxyXG4gICAgICAgICAgICAgICAgICAgIF9qKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBhcGkuZW5kcG9pbnRzW2VuZHBvaW50TmFtZV0uc2VsZWN0KGFyZyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGh1bmtSZXN1bHQgPSBkaXNwYXRjaCh0aHVuayk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVBZnRlciA9IHNlbGVjdG9yKGdldFN0YXRlKCkpO1xyXG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZVdhcm5pbmcoZGlzcGF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RJZCA9IHRodW5rUmVzdWx0LnJlcXVlc3RJZCwgYWJvcnQgPSB0aHVua1Jlc3VsdC5hYm9ydDtcclxuICAgICAgICAgICAgICAgIHZhciBza2lwcGVkU3luY2hyb25vdXNseSA9IHN0YXRlQWZ0ZXIucmVxdWVzdElkICE9PSByZXF1ZXN0SWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgcnVubmluZ1F1ZXJ5ID0gKF9hID0gcnVubmluZ1F1ZXJpZXMuZ2V0KGRpc3BhdGNoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hW3F1ZXJ5Q2FjaGVLZXldO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdEZyb21TdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGVjdG9yKGdldFN0YXRlKCkpOyB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlUHJvbWlzZSA9IE9iamVjdC5hc3NpZ24oZm9yY2VRdWVyeUZuID8gdGh1bmtSZXN1bHQudGhlbihzZWxlY3RGcm9tU3RhdGUpIDogc2tpcHBlZFN5bmNocm9ub3VzbHkgJiYgIXJ1bm5pbmdRdWVyeSA/IFByb21pc2UucmVzb2x2ZShzdGF0ZUFmdGVyKSA6IFByb21pc2UuYWxsKFtydW5uaW5nUXVlcnksIHRodW5rUmVzdWx0XSkudGhlbihzZWxlY3RGcm9tU3RhdGUpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uT3B0aW9uczogc3Vic2NyaXB0aW9uT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeUNhY2hlS2V5OiBxdWVyeUNhY2hlS2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2opIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9qLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgc3RhdGVQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2ouc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdC5kYXRhXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByZWZldGNoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwYXRjaChxdWVyeUFjdGlvbihhcmcsIHsgc3Vic2NyaWJlOiBmYWxzZSwgZm9yY2VSZWZldGNoOiB0cnVlIH0pKTsgfSxcclxuICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2godW5zdWJzY3JpYmVRdWVyeVJlc3VsdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlDYWNoZUtleTogcXVlcnlDYWNoZUtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3Vic2NyaXB0aW9uT3B0aW9uczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVQcm9taXNlLnN1YnNjcmlwdGlvbk9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh1cGRhdGVTdWJzY3JpcHRpb25PcHRpb25zKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50TmFtZTogZW5kcG9pbnROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUNhY2hlS2V5OiBxdWVyeUNhY2hlS2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJ1bm5pbmdRdWVyeSAmJiAhc2tpcHBlZFN5bmNocm9ub3VzbHkgJiYgIWZvcmNlUXVlcnlGbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBydW5uaW5nXzEgPSBydW5uaW5nUXVlcmllcy5nZXQoZGlzcGF0Y2gpIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfMVtxdWVyeUNhY2hlS2V5XSA9IHN0YXRlUHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICBydW5uaW5nUXVlcmllcy5zZXQoZGlzcGF0Y2gsIHJ1bm5pbmdfMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcnVubmluZ18xW3F1ZXJ5Q2FjaGVLZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHJ1bm5pbmdfMSkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nUXVlcmllcy5kZWxldGUoZGlzcGF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVQcm9taXNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5QWN0aW9uO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYnVpbGRJbml0aWF0ZU11dGF0aW9uKGVuZHBvaW50TmFtZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJnLCBfaikge1xyXG4gICAgICAgICAgICB2YXIgX2sgPSBfaiA9PT0gdm9pZCAwID8ge30gOiBfaiwgX2wgPSBfay50cmFjaywgdHJhY2sgPSBfbCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9sLCBmaXhlZENhY2hlS2V5ID0gX2suZml4ZWRDYWNoZUtleTtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aHVuayA9IG11dGF0aW9uVGh1bmsoe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibXV0YXRpb25cIixcclxuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludE5hbWU6IGVuZHBvaW50TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEFyZ3M6IGFyZyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFjazogdHJhY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgZml4ZWRDYWNoZUtleTogZml4ZWRDYWNoZUtleVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGh1bmtSZXN1bHQgPSBkaXNwYXRjaCh0aHVuayk7XHJcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlV2FybmluZyhkaXNwYXRjaCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdElkID0gdGh1bmtSZXN1bHQucmVxdWVzdElkLCBhYm9ydCA9IHRodW5rUmVzdWx0LmFib3J0LCB1bndyYXAgPSB0aHVua1Jlc3VsdC51bndyYXA7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWVQcm9taXNlID0gdGh1bmtSZXN1bHQudW53cmFwKCkudGhlbihmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gKHsgZGF0YTogZGF0YSB9KTsgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiAoeyBlcnJvcjogZXJyb3IgfSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHJlbW92ZU11dGF0aW9uUmVzdWx0KHsgcmVxdWVzdElkOiByZXF1ZXN0SWQsIGZpeGVkQ2FjaGVLZXk6IGZpeGVkQ2FjaGVLZXkgfSkpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciByZXQgPSBPYmplY3QuYXNzaWduKHJldHVyblZhbHVlUHJvbWlzZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZzogdGh1bmtSZXN1bHQuYXJnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgICAgICB1bndyYXA6IHVud3JhcCxcclxuICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogcmVzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzZXQ6IHJlc2V0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBydW5uaW5nID0gcnVubmluZ011dGF0aW9ucy5nZXQoZGlzcGF0Y2gpIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgcnVubmluZ011dGF0aW9ucy5zZXQoZGlzcGF0Y2gsIHJ1bm5pbmcpO1xyXG4gICAgICAgICAgICAgICAgcnVubmluZ1tyZXF1ZXN0SWRdID0gcmV0O1xyXG4gICAgICAgICAgICAgICAgcmV0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBydW5uaW5nW3JlcXVlc3RJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhydW5uaW5nKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ011dGF0aW9ucy5kZWxldGUoZGlzcGF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpeGVkQ2FjaGVLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBydW5uaW5nW2ZpeGVkQ2FjaGVLZXldID0gcmV0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdbZml4ZWRDYWNoZUtleV0gPT09IHJldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJ1bm5pbmdbZml4ZWRDYWNoZUtleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHJ1bm5pbmcpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdNdXRhdGlvbnMuZGVsZXRlKGRpc3BhdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkVGh1bmtzLnRzXHJcbnZhciBpbXBvcnRfdG9vbGtpdDQgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpKTtcclxudmFyIGltcG9ydF9pbW1lciA9IF9fdG9Nb2R1bGUocmVxdWlyZShcImltbWVyXCIpKTtcclxudmFyIGltcG9ydF90b29sa2l0NSA9IF9fdG9Nb2R1bGUocmVxdWlyZShcIkByZWR1eGpzL3Rvb2xraXRcIikpO1xyXG5mdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtUmVzcG9uc2UoYmFzZVF1ZXJ5UmV0dXJuVmFsdWUpIHtcclxuICAgIHJldHVybiBiYXNlUXVlcnlSZXR1cm5WYWx1ZTtcclxufVxyXG5mdW5jdGlvbiBidWlsZFRodW5rcyhfaikge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciByZWR1Y2VyUGF0aCA9IF9qLnJlZHVjZXJQYXRoLCBiYXNlUXVlcnkgPSBfai5iYXNlUXVlcnksIGVuZHBvaW50RGVmaW5pdGlvbnMgPSBfai5jb250ZXh0LmVuZHBvaW50RGVmaW5pdGlvbnMsIHNlcmlhbGl6ZVF1ZXJ5QXJncyA9IF9qLnNlcmlhbGl6ZVF1ZXJ5QXJncywgYXBpID0gX2ouYXBpLCBhc3NlcnRUYWdUeXBlID0gX2ouYXNzZXJ0VGFnVHlwZTtcclxuICAgIHZhciBwYXRjaFF1ZXJ5RGF0YSA9IGZ1bmN0aW9uIChlbmRwb2ludE5hbWUsIGFyZ3MsIHBhdGNoZXMsIHVwZGF0ZVByb3ZpZGVkKSB7IHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGVuZHBvaW50RGVmaW5pdGlvbiA9IGVuZHBvaW50RGVmaW5pdGlvbnNbZW5kcG9pbnROYW1lXTtcclxuICAgICAgICB2YXIgcXVlcnlDYWNoZUtleSA9IHNlcmlhbGl6ZVF1ZXJ5QXJncyh7XHJcbiAgICAgICAgICAgIHF1ZXJ5QXJnczogYXJncyxcclxuICAgICAgICAgICAgZW5kcG9pbnREZWZpbml0aW9uOiBlbmRwb2ludERlZmluaXRpb24sXHJcbiAgICAgICAgICAgIGVuZHBvaW50TmFtZTogZW5kcG9pbnROYW1lXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGlzcGF0Y2goYXBpLmludGVybmFsQWN0aW9ucy5xdWVyeVJlc3VsdFBhdGNoZWQoeyBxdWVyeUNhY2hlS2V5OiBxdWVyeUNhY2hlS2V5LCBwYXRjaGVzOiBwYXRjaGVzIH0pKTtcclxuICAgICAgICBpZiAoIXVwZGF0ZVByb3ZpZGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXBpLmVuZHBvaW50c1tlbmRwb2ludE5hbWVdLnNlbGVjdChhcmdzKShnZXRTdGF0ZSgpKTtcclxuICAgICAgICB2YXIgcHJvdmlkZWRUYWdzID0gY2FsY3VsYXRlUHJvdmlkZWRCeShlbmRwb2ludERlZmluaXRpb24ucHJvdmlkZXNUYWdzLCBuZXdWYWx1ZS5kYXRhLCB2b2lkIDAsIGFyZ3MsIHt9LCBhc3NlcnRUYWdUeXBlKTtcclxuICAgICAgICBkaXNwYXRjaChhcGkuaW50ZXJuYWxBY3Rpb25zLnVwZGF0ZVByb3ZpZGVkQnkoeyBxdWVyeUNhY2hlS2V5OiBxdWVyeUNhY2hlS2V5LCBwcm92aWRlZFRhZ3M6IHByb3ZpZGVkVGFncyB9KSk7XHJcbiAgICB9OyB9O1xyXG4gICAgdmFyIHVwZGF0ZVF1ZXJ5RGF0YSA9IGZ1bmN0aW9uIChlbmRwb2ludE5hbWUsIGFyZ3MsIHVwZGF0ZVJlY2lwZSwgdXBkYXRlUHJvdmlkZWQpIHtcclxuICAgICAgICBpZiAodXBkYXRlUHJvdmlkZWQgPT09IHZvaWQgMCkgeyB1cGRhdGVQcm92aWRlZCA9IHRydWU7IH1cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgX2osIF9rO1xyXG4gICAgICAgICAgICB2YXIgZW5kcG9pbnREZWZpbml0aW9uID0gYXBpLmVuZHBvaW50c1tlbmRwb2ludE5hbWVdO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gZW5kcG9pbnREZWZpbml0aW9uLnNlbGVjdChhcmdzKShnZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgdmFyIHJldCA9IHtcclxuICAgICAgICAgICAgICAgIHBhdGNoZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgaW52ZXJzZVBhdGNoZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgdW5kbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGF0Y2goYXBpLnV0aWwucGF0Y2hRdWVyeURhdGEoZW5kcG9pbnROYW1lLCBhcmdzLCByZXQuaW52ZXJzZVBhdGNoZXMsIHVwZGF0ZVByb3ZpZGVkKSk7IH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZS5zdGF0dXMgPT09IFF1ZXJ5U3RhdHVzLnVuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoXCJkYXRhXCIgaW4gY3VycmVudFN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKDAsIGltcG9ydF9pbW1lci5pc0RyYWZ0YWJsZSkoY3VycmVudFN0YXRlLmRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sID0gKDAsIGltcG9ydF9pbW1lci5wcm9kdWNlV2l0aFBhdGNoZXMpKGN1cnJlbnRTdGF0ZS5kYXRhLCB1cGRhdGVSZWNpcGUpLCB2YWx1ZSA9IF9sWzBdLCBwYXRjaGVzID0gX2xbMV0sIGludmVyc2VQYXRjaGVzID0gX2xbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgKF9qID0gcmV0LnBhdGNoZXMpLnB1c2guYXBwbHkoX2osIHBhdGNoZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIChfayA9IHJldC5pbnZlcnNlUGF0Y2hlcykucHVzaC5hcHBseShfaywgaW52ZXJzZVBhdGNoZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHVwZGF0ZVJlY2lwZShjdXJyZW50U3RhdGUuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0LnBhdGNoZXMucHVzaCh7IG9wOiBcInJlcGxhY2VcIiwgcGF0aDogW10sIHZhbHVlOiBuZXdWYWx1ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXQuaW52ZXJzZVBhdGNoZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wOiBcInJlcGxhY2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50U3RhdGUuZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKGFwaS51dGlsLnBhdGNoUXVlcnlEYXRhKGVuZHBvaW50TmFtZSwgYXJncywgcmV0LnBhdGNoZXMsIHVwZGF0ZVByb3ZpZGVkKSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgdXBzZXJ0UXVlcnlEYXRhID0gZnVuY3Rpb24gKGVuZHBvaW50TmFtZSwgYXJncywgdmFsdWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkge1xyXG4gICAgICAgIHZhciBfajtcclxuICAgICAgICByZXR1cm4gZGlzcGF0Y2goYXBpLmVuZHBvaW50c1tlbmRwb2ludE5hbWVdLmluaXRpYXRlKGFyZ3MsIChfaiA9IHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmliZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBmb3JjZVJlZmV0Y2g6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2pbZm9yY2VRdWVyeUZuU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiB2YWx1ZVxyXG4gICAgICAgICAgICB9KTsgfSxcclxuICAgICAgICAgICAgX2opKSk7XHJcbiAgICB9OyB9O1xyXG4gICAgdmFyIGV4ZWN1dGVFbmRwb2ludCA9IGZ1bmN0aW9uIChfMCwgXzEpIHsgcmV0dXJuIF9fYXN5bmMoX3RoaXMsIFtfMCwgXzFdLCBmdW5jdGlvbiAoYXJnLCBfaikge1xyXG4gICAgICAgIHZhciBlbmRwb2ludERlZmluaXRpb24sIHRyYW5zZm9ybVJlc3BvbnNlLCByZXN1bHQsIGJhc2VRdWVyeUFwaV8xLCBmb3JjZVF1ZXJ5Rm4sIHdoYXQsIGVyciwgX2ssIF9sLCBrZXksIF9tLCBlcnJvcl8xLCBjYXRjaGVkRXJyb3IsIHRyYW5zZm9ybUVycm9yUmVzcG9uc2UsIF9vLCBlXzQ7XHJcbiAgICAgICAgdmFyIF9wLCBfcTtcclxuICAgICAgICB2YXIgc2lnbmFsID0gX2ouc2lnbmFsLCBhYm9ydCA9IF9qLmFib3J0LCByZWplY3RXaXRoVmFsdWUgPSBfai5yZWplY3RXaXRoVmFsdWUsIGZ1bGZpbGxXaXRoVmFsdWUgPSBfai5mdWxmaWxsV2l0aFZhbHVlLCBkaXNwYXRjaCA9IF9qLmRpc3BhdGNoLCBnZXRTdGF0ZSA9IF9qLmdldFN0YXRlLCBleHRyYSA9IF9qLmV4dHJhO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX3IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfci5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGVuZHBvaW50RGVmaW5pdGlvbiA9IGVuZHBvaW50RGVmaW5pdGlvbnNbYXJnLmVuZHBvaW50TmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgX3IubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9yLnRyeXMucHVzaChbMSwgOCwgLCAxM10pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gZGVmYXVsdFRyYW5zZm9ybVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlUXVlcnlBcGlfMSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBzaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQ6IGFyZy5lbmRwb2ludE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFyZy50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZWQ6IGFyZy50eXBlID09PSBcInF1ZXJ5XCIgPyBpc0ZvcmNlZFF1ZXJ5KGFyZywgZ2V0U3RhdGUoKSkgOiB2b2lkIDBcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlUXVlcnlGbiA9IGFyZy50eXBlID09PSBcInF1ZXJ5XCIgPyBhcmdbZm9yY2VRdWVyeUZuU3ltYm9sXSA6IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZvcmNlUXVlcnlGbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZm9yY2VRdWVyeUZuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbmRwb2ludERlZmluaXRpb24ucXVlcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJhc2VRdWVyeShlbmRwb2ludERlZmluaXRpb24ucXVlcnkoYXJnLm9yaWdpbmFsQXJncyksIGJhc2VRdWVyeUFwaV8xLCBlbmRwb2ludERlZmluaXRpb24uZXh0cmFPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX3Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmRwb2ludERlZmluaXRpb24udHJhbnNmb3JtUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2UgPSBlbmRwb2ludERlZmluaXRpb24udHJhbnNmb3JtUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzQgLyp5aWVsZCovLCBlbmRwb2ludERlZmluaXRpb24ucXVlcnlGbihhcmcub3JpZ2luYWxBcmdzLCBiYXNlUXVlcnlBcGlfMSwgZW5kcG9pbnREZWZpbml0aW9uLmV4dHJhT3B0aW9ucywgZnVuY3Rpb24gKGFyZzIpIHsgcmV0dXJuIGJhc2VRdWVyeShhcmcyLCBiYXNlUXVlcnlBcGlfMSwgZW5kcG9pbnREZWZpbml0aW9uLmV4dHJhT3B0aW9ucyk7IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfci5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3IubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQgPSBlbmRwb2ludERlZmluaXRpb24ucXVlcnkgPyBcImBiYXNlUXVlcnlgXCIgOiBcImBxdWVyeUZuYFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIgPSB3aGF0ICsgXCIgZGlkIG5vdCByZXR1cm4gYW55dGhpbmcuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gd2hhdCArIFwiIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdC5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQuZXJyb3IgJiYgcmVzdWx0LmRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyciA9IHdoYXQgKyBcIiByZXR1cm5lZCBhbiBvYmplY3QgY29udGFpbmluZyBib3RoIGBlcnJvcmAgYW5kIGByZXN1bHRgLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5lcnJvciA9PT0gdm9pZCAwICYmIHJlc3VsdC5kYXRhID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyciA9IHdoYXQgKyBcIiByZXR1cm5lZCBhbiBvYmplY3QgY29udGFpbmluZyBuZWl0aGVyIGEgdmFsaWQgYGVycm9yYCBhbmQgYHJlc3VsdGAuIEF0IGxlYXN0IG9uZSBvZiB0aGVtIHNob3VsZCBub3QgYmUgYHVuZGVmaW5lZGBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2sgPSAwLCBfbCA9IE9iamVjdC5rZXlzKHJlc3VsdCk7IF9rIDwgX2wubGVuZ3RoOyBfaysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gX2xbX2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgIT09IFwiZXJyb3JcIiAmJiBrZXkgIT09IFwiZGF0YVwiICYmIGtleSAhPT0gXCJtZXRhXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gXCJUaGUgb2JqZWN0IHJldHVybmVkIGJ5IFwiICsgd2hhdCArIFwiIGhhcyB0aGUgdW5rbm93biBwcm9wZXJ0eSBcIiArIGtleSArIFwiLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVuY291bnRlcmVkIGhhbmRsaW5nIHRoZSBlbmRwb2ludCBcIiArIGFyZy5lbmRwb2ludE5hbWUgKyBcIi5cXG4gICAgICAgICAgICAgIFwiICsgZXJyICsgXCJcXG4gICAgICAgICAgICAgIEl0IG5lZWRzIHRvIHJldHVybiBhbiBvYmplY3Qgd2l0aCBlaXRoZXIgdGhlIHNoYXBlIGB7IGRhdGE6IDx2YWx1ZT4gfWAgb3IgYHsgZXJyb3I6IDx2YWx1ZT4gfWAgdGhhdCBtYXkgY29udGFpbiBhbiBvcHRpb25hbCBgbWV0YWAgcHJvcGVydHkuXFxuICAgICAgICAgICAgICBPYmplY3QgcmV0dXJuZWQgd2FzOlwiLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBIYW5kbGVkRXJyb3IocmVzdWx0LmVycm9yLCByZXN1bHQubWV0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX20gPSBmdWxmaWxsV2l0aFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRyYW5zZm9ybVJlc3BvbnNlKHJlc3VsdC5kYXRhLCByZXN1bHQubWV0YSwgYXJnLm9yaWdpbmFsQXJncyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX20uYXBwbHkodm9pZCAwLCBbX3Iuc2VudCgpLCAoX3AgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbGVkVGltZVN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VRdWVyeU1ldGE6IHJlc3VsdC5tZXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3BbaW1wb3J0X3Rvb2xraXQ1LlNIT1VMRF9BVVRPQkFUQ0hdID0gdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wKV0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX3Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoZWRFcnJvciA9IGVycm9yXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY2F0Y2hlZEVycm9yIGluc3RhbmNlb2YgSGFuZGxlZEVycm9yKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVycm9yUmVzcG9uc2UgPSBkZWZhdWx0VHJhbnNmb3JtUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZHBvaW50RGVmaW5pdGlvbi5xdWVyeSAmJiBlbmRwb2ludERlZmluaXRpb24udHJhbnNmb3JtRXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1FcnJvclJlc3BvbnNlID0gZW5kcG9pbnREZWZpbml0aW9uLnRyYW5zZm9ybUVycm9yUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9yLmxhYmVsID0gOTtcclxuICAgICAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgICAgICBfci50cnlzLnB1c2goWzksIDExLCAsIDEyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX28gPSByZWplY3RXaXRoVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdHJhbnNmb3JtRXJyb3JSZXNwb25zZShjYXRjaGVkRXJyb3IudmFsdWUsIGNhdGNoZWRFcnJvci5tZXRhLCBhcmcub3JpZ2luYWxBcmdzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX28uYXBwbHkodm9pZCAwLCBbX3Iuc2VudCgpLCAoX3EgPSB7IGJhc2VRdWVyeU1ldGE6IGNhdGNoZWRFcnJvci5tZXRhIH0sIF9xW2ltcG9ydF90b29sa2l0NS5TSE9VTERfQVVUT0JBVENIXSA9IHRydWUsIF9xKV0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTE6XHJcbiAgICAgICAgICAgICAgICAgICAgZV80ID0gX3Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoZWRFcnJvciA9IGVfNDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxMl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBbiB1bmhhbmRsZWQgZXJyb3Igb2NjdXJyZWQgcHJvY2Vzc2luZyBhIHJlcXVlc3QgZm9yIHRoZSBlbmRwb2ludCBcXFwiXCIgKyBhcmcuZW5kcG9pbnROYW1lICsgXCJcXFwiLlxcbkluIHRoZSBjYXNlIG9mIGFuIHVuaGFuZGxlZCBlcnJvciwgbm8gdGFncyB3aWxsIGJlIFxcXCJwcm92aWRlZFxcXCIgb3IgXFxcImludmFsaWRhdGVkXFxcIi5cIiwgY2F0Y2hlZEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY2F0Y2hlZEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgY2F0Y2hlZEVycm9yO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsgfTtcclxuICAgIGZ1bmN0aW9uIGlzRm9yY2VkUXVlcnkoYXJnLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcclxuICAgICAgICB2YXIgcmVxdWVzdFN0YXRlID0gKF9iID0gKF9hID0gc3RhdGVbcmVkdWNlclBhdGhdKSA9PSBudWxsID8gdm9pZCAwIDogX2EucXVlcmllcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iW2FyZy5xdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICB2YXIgYmFzZUZldGNoT25Nb3VudE9yQXJnQ2hhbmdlID0gKF9jID0gc3RhdGVbcmVkdWNlclBhdGhdKSA9PSBudWxsID8gdm9pZCAwIDogX2MuY29uZmlnLnJlZmV0Y2hPbk1vdW50T3JBcmdDaGFuZ2U7XHJcbiAgICAgICAgdmFyIGZ1bGZpbGxlZFZhbCA9IHJlcXVlc3RTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogcmVxdWVzdFN0YXRlLmZ1bGZpbGxlZFRpbWVTdGFtcDtcclxuICAgICAgICB2YXIgcmVmZXRjaFZhbCA9IChfZCA9IGFyZy5mb3JjZVJlZmV0Y2gpICE9IG51bGwgPyBfZCA6IGFyZy5zdWJzY3JpYmUgJiYgYmFzZUZldGNoT25Nb3VudE9yQXJnQ2hhbmdlO1xyXG4gICAgICAgIGlmIChyZWZldGNoVmFsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWZldGNoVmFsID09PSB0cnVlIHx8IChOdW1iZXIobmV3IERhdGUoKSkgLSBOdW1iZXIoZnVsZmlsbGVkVmFsKSkgLyAxZTMgPj0gcmVmZXRjaFZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdmFyIHF1ZXJ5VGh1bmsgPSAoMCwgaW1wb3J0X3Rvb2xraXQ1LmNyZWF0ZUFzeW5jVGh1bmspKHJlZHVjZXJQYXRoICsgXCIvZXhlY3V0ZVF1ZXJ5XCIsIGV4ZWN1dGVFbmRwb2ludCwge1xyXG4gICAgICAgIGdldFBlbmRpbmdNZXRhOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfajtcclxuICAgICAgICAgICAgcmV0dXJuIF9qID0geyBzdGFydGVkVGltZVN0YW1wOiBEYXRlLm5vdygpIH0sIF9qW2ltcG9ydF90b29sa2l0NS5TSE9VTERfQVVUT0JBVENIXSA9IHRydWUsIF9qO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29uZGl0aW9uOiBmdW5jdGlvbiAocXVlcnlUaHVua0FyZ3MsIF9qKSB7XHJcbiAgICAgICAgICAgIHZhciBnZXRTdGF0ZSA9IF9qLmdldFN0YXRlO1xyXG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgdmFyIHJlcXVlc3RTdGF0ZSA9IChfYiA9IChfYSA9IHN0YXRlW3JlZHVjZXJQYXRoXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnF1ZXJpZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYltxdWVyeVRodW5rQXJncy5xdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICAgICAgdmFyIGZ1bGZpbGxlZFZhbCA9IHJlcXVlc3RTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogcmVxdWVzdFN0YXRlLmZ1bGZpbGxlZFRpbWVTdGFtcDtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRBcmcgPSBxdWVyeVRodW5rQXJncy5vcmlnaW5hbEFyZ3M7XHJcbiAgICAgICAgICAgIHZhciBwcmV2aW91c0FyZyA9IHJlcXVlc3RTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogcmVxdWVzdFN0YXRlLm9yaWdpbmFsQXJncztcclxuICAgICAgICAgICAgdmFyIGVuZHBvaW50RGVmaW5pdGlvbiA9IGVuZHBvaW50RGVmaW5pdGlvbnNbcXVlcnlUaHVua0FyZ3MuZW5kcG9pbnROYW1lXTtcclxuICAgICAgICAgICAgaWYgKGlzVXBzZXJ0UXVlcnkocXVlcnlUaHVua0FyZ3MpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHJlcXVlc3RTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogcmVxdWVzdFN0YXRlLnN0YXR1cykgPT09IFwicGVuZGluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzRm9yY2VkUXVlcnkocXVlcnlUaHVua0FyZ3MsIHN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzUXVlcnlEZWZpbml0aW9uKGVuZHBvaW50RGVmaW5pdGlvbikgJiYgKChfYyA9IGVuZHBvaW50RGVmaW5pdGlvbiA9PSBudWxsID8gdm9pZCAwIDogZW5kcG9pbnREZWZpbml0aW9uLmZvcmNlUmVmZXRjaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmNhbGwoZW5kcG9pbnREZWZpbml0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QXJnOiBjdXJyZW50QXJnLFxyXG4gICAgICAgICAgICAgICAgcHJldmlvdXNBcmc6IHByZXZpb3VzQXJnLFxyXG4gICAgICAgICAgICAgICAgZW5kcG9pbnRTdGF0ZTogcmVxdWVzdFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlXHJcbiAgICAgICAgICAgIH0pKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZ1bGZpbGxlZFZhbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb246IHRydWVcclxuICAgIH0pO1xyXG4gICAgdmFyIG11dGF0aW9uVGh1bmsgPSAoMCwgaW1wb3J0X3Rvb2xraXQ1LmNyZWF0ZUFzeW5jVGh1bmspKHJlZHVjZXJQYXRoICsgXCIvZXhlY3V0ZU11dGF0aW9uXCIsIGV4ZWN1dGVFbmRwb2ludCwge1xyXG4gICAgICAgIGdldFBlbmRpbmdNZXRhOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfajtcclxuICAgICAgICAgICAgcmV0dXJuIF9qID0geyBzdGFydGVkVGltZVN0YW1wOiBEYXRlLm5vdygpIH0sIF9qW2ltcG9ydF90b29sa2l0NS5TSE9VTERfQVVUT0JBVENIXSA9IHRydWUsIF9qO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdmFyIGhhc1RoZUZvcmNlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuIFwiZm9yY2VcIiBpbiBvcHRpb25zOyB9O1xyXG4gICAgdmFyIGhhc01heEFnZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybiBcImlmT2xkZXJUaGFuXCIgaW4gb3B0aW9uczsgfTtcclxuICAgIHZhciBwcmVmZXRjaCA9IGZ1bmN0aW9uIChlbmRwb2ludE5hbWUsIGFyZywgb3B0aW9ucykgeyByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSkge1xyXG4gICAgICAgIHZhciBmb3JjZSA9IGhhc1RoZUZvcmNlKG9wdGlvbnMpICYmIG9wdGlvbnMuZm9yY2U7XHJcbiAgICAgICAgdmFyIG1heEFnZSA9IGhhc01heEFnZShvcHRpb25zKSAmJiBvcHRpb25zLmlmT2xkZXJUaGFuO1xyXG4gICAgICAgIHZhciBxdWVyeUFjdGlvbiA9IGZ1bmN0aW9uIChmb3JjZTIpIHtcclxuICAgICAgICAgICAgaWYgKGZvcmNlMiA9PT0gdm9pZCAwKSB7IGZvcmNlMiA9IHRydWU7IH1cclxuICAgICAgICAgICAgcmV0dXJuIGFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXS5pbml0aWF0ZShhcmcsIHsgZm9yY2VSZWZldGNoOiBmb3JjZTIgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgbGF0ZXN0U3RhdGVWYWx1ZSA9IGFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXS5zZWxlY3QoYXJnKShnZXRTdGF0ZSgpKTtcclxuICAgICAgICBpZiAoZm9yY2UpIHtcclxuICAgICAgICAgICAgZGlzcGF0Y2gocXVlcnlBY3Rpb24oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG1heEFnZSkge1xyXG4gICAgICAgICAgICB2YXIgbGFzdEZ1bGZpbGxlZFRzID0gbGF0ZXN0U3RhdGVWYWx1ZSA9PSBudWxsID8gdm9pZCAwIDogbGF0ZXN0U3RhdGVWYWx1ZS5mdWxmaWxsZWRUaW1lU3RhbXA7XHJcbiAgICAgICAgICAgIGlmICghbGFzdEZ1bGZpbGxlZFRzKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChxdWVyeUFjdGlvbigpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2hvdWxkUmV0cmlnZ2VyID0gKE51bWJlcihuZXcgRGF0ZSgpKSAtIE51bWJlcihuZXcgRGF0ZShsYXN0RnVsZmlsbGVkVHMpKSkgLyAxZTMgPj0gbWF4QWdlO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkUmV0cmlnZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChxdWVyeUFjdGlvbigpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGlzcGF0Y2gocXVlcnlBY3Rpb24oZmFsc2UpKTtcclxuICAgICAgICB9XHJcbiAgICB9OyB9O1xyXG4gICAgZnVuY3Rpb24gbWF0Y2hlc0VuZHBvaW50KGVuZHBvaW50TmFtZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiAoKF9iID0gKF9hID0gYWN0aW9uID09IG51bGwgPyB2b2lkIDAgOiBhY3Rpb24ubWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmFyZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmVuZHBvaW50TmFtZSkgPT09IGVuZHBvaW50TmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYnVpbGRNYXRjaFRodW5rQWN0aW9ucyh0aHVuaywgZW5kcG9pbnROYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWF0Y2hQZW5kaW5nOiAoMCwgaW1wb3J0X3Rvb2xraXQ0LmlzQWxsT2YpKCgwLCBpbXBvcnRfdG9vbGtpdDQuaXNQZW5kaW5nKSh0aHVuayksIG1hdGNoZXNFbmRwb2ludChlbmRwb2ludE5hbWUpKSxcclxuICAgICAgICAgICAgbWF0Y2hGdWxmaWxsZWQ6ICgwLCBpbXBvcnRfdG9vbGtpdDQuaXNBbGxPZikoKDAsIGltcG9ydF90b29sa2l0NC5pc0Z1bGZpbGxlZCkodGh1bmspLCBtYXRjaGVzRW5kcG9pbnQoZW5kcG9pbnROYW1lKSksXHJcbiAgICAgICAgICAgIG1hdGNoUmVqZWN0ZWQ6ICgwLCBpbXBvcnRfdG9vbGtpdDQuaXNBbGxPZikoKDAsIGltcG9ydF90b29sa2l0NC5pc1JlamVjdGVkKSh0aHVuayksIG1hdGNoZXNFbmRwb2ludChlbmRwb2ludE5hbWUpKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHF1ZXJ5VGh1bms6IHF1ZXJ5VGh1bmssXHJcbiAgICAgICAgbXV0YXRpb25UaHVuazogbXV0YXRpb25UaHVuayxcclxuICAgICAgICBwcmVmZXRjaDogcHJlZmV0Y2gsXHJcbiAgICAgICAgdXBkYXRlUXVlcnlEYXRhOiB1cGRhdGVRdWVyeURhdGEsXHJcbiAgICAgICAgdXBzZXJ0UXVlcnlEYXRhOiB1cHNlcnRRdWVyeURhdGEsXHJcbiAgICAgICAgcGF0Y2hRdWVyeURhdGE6IHBhdGNoUXVlcnlEYXRhLFxyXG4gICAgICAgIGJ1aWxkTWF0Y2hUaHVua0FjdGlvbnM6IGJ1aWxkTWF0Y2hUaHVua0FjdGlvbnNcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY2FsY3VsYXRlUHJvdmlkZWRCeVRodW5rKGFjdGlvbiwgdHlwZSwgZW5kcG9pbnREZWZpbml0aW9ucywgYXNzZXJ0VGFnVHlwZSkge1xyXG4gICAgcmV0dXJuIGNhbGN1bGF0ZVByb3ZpZGVkQnkoZW5kcG9pbnREZWZpbml0aW9uc1thY3Rpb24ubWV0YS5hcmcuZW5kcG9pbnROYW1lXVt0eXBlXSwgKDAsIGltcG9ydF90b29sa2l0NC5pc0Z1bGZpbGxlZCkoYWN0aW9uKSA/IGFjdGlvbi5wYXlsb2FkIDogdm9pZCAwLCAoMCwgaW1wb3J0X3Rvb2xraXQ0LmlzUmVqZWN0ZWRXaXRoVmFsdWUpKGFjdGlvbikgPyBhY3Rpb24ucGF5bG9hZCA6IHZvaWQgMCwgYWN0aW9uLm1ldGEuYXJnLm9yaWdpbmFsQXJncywgXCJiYXNlUXVlcnlNZXRhXCIgaW4gYWN0aW9uLm1ldGEgPyBhY3Rpb24ubWV0YS5iYXNlUXVlcnlNZXRhIDogdm9pZCAwLCBhc3NlcnRUYWdUeXBlKTtcclxufVxyXG4vLyBzcmMvcXVlcnkvY29yZS9idWlsZFNsaWNlLnRzXHJcbnZhciBpbXBvcnRfaW1tZXIyID0gX190b01vZHVsZShyZXF1aXJlKFwiaW1tZXJcIikpO1xyXG52YXIgaW1wb3J0X2ltbWVyMyA9IF9fdG9Nb2R1bGUocmVxdWlyZShcImltbWVyXCIpKTtcclxuZnVuY3Rpb24gdXBkYXRlUXVlcnlTdWJzdGF0ZUlmRXhpc3RzKHN0YXRlLCBxdWVyeUNhY2hlS2V5LCB1cGRhdGUpIHtcclxuICAgIHZhciBzdWJzdGF0ZSA9IHN0YXRlW3F1ZXJ5Q2FjaGVLZXldO1xyXG4gICAgaWYgKHN1YnN0YXRlKSB7XHJcbiAgICAgICAgdXBkYXRlKHN1YnN0YXRlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRNdXRhdGlvbkNhY2hlS2V5KGlkKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICByZXR1cm4gKF9hID0gXCJhcmdcIiBpbiBpZCA/IGlkLmFyZy5maXhlZENhY2hlS2V5IDogaWQuZml4ZWRDYWNoZUtleSkgIT0gbnVsbCA/IF9hIDogaWQucmVxdWVzdElkO1xyXG59XHJcbmZ1bmN0aW9uIHVwZGF0ZU11dGF0aW9uU3Vic3RhdGVJZkV4aXN0cyhzdGF0ZSwgaWQsIHVwZGF0ZSkge1xyXG4gICAgdmFyIHN1YnN0YXRlID0gc3RhdGVbZ2V0TXV0YXRpb25DYWNoZUtleShpZCldO1xyXG4gICAgaWYgKHN1YnN0YXRlKSB7XHJcbiAgICAgICAgdXBkYXRlKHN1YnN0YXRlKTtcclxuICAgIH1cclxufVxyXG52YXIgaW5pdGlhbFN0YXRlID0ge307XHJcbmZ1bmN0aW9uIGJ1aWxkU2xpY2UoX2opIHtcclxuICAgIHZhciByZWR1Y2VyUGF0aCA9IF9qLnJlZHVjZXJQYXRoLCBxdWVyeVRodW5rID0gX2oucXVlcnlUaHVuaywgbXV0YXRpb25UaHVuayA9IF9qLm11dGF0aW9uVGh1bmssIF9rID0gX2ouY29udGV4dCwgZGVmaW5pdGlvbnMgPSBfay5lbmRwb2ludERlZmluaXRpb25zLCBhcGlVaWQgPSBfay5hcGlVaWQsIGV4dHJhY3RSZWh5ZHJhdGlvbkluZm8gPSBfay5leHRyYWN0UmVoeWRyYXRpb25JbmZvLCBoYXNSZWh5ZHJhdGlvbkluZm8gPSBfay5oYXNSZWh5ZHJhdGlvbkluZm8sIGFzc2VydFRhZ1R5cGUgPSBfai5hc3NlcnRUYWdUeXBlLCBjb25maWcgPSBfai5jb25maWc7XHJcbiAgICB2YXIgcmVzZXRBcGlTdGF0ZSA9ICgwLCBpbXBvcnRfdG9vbGtpdDYuY3JlYXRlQWN0aW9uKShyZWR1Y2VyUGF0aCArIFwiL3Jlc2V0QXBpU3RhdGVcIik7XHJcbiAgICB2YXIgcXVlcnlTbGljZSA9ICgwLCBpbXBvcnRfdG9vbGtpdDYuY3JlYXRlU2xpY2UpKHtcclxuICAgICAgICBuYW1lOiByZWR1Y2VyUGF0aCArIFwiL3F1ZXJpZXNcIixcclxuICAgICAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcclxuICAgICAgICByZWR1Y2Vyczoge1xyXG4gICAgICAgICAgICByZW1vdmVRdWVyeVJlc3VsdDoge1xyXG4gICAgICAgICAgICAgICAgcmVkdWNlcjogZnVuY3Rpb24gKGRyYWZ0LCBfaikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeUNhY2hlS2V5ID0gX2oucGF5bG9hZC5xdWVyeUNhY2hlS2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkcmFmdFtxdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwcmVwYXJlOiAoMCwgaW1wb3J0X3Rvb2xraXQ2LnByZXBhcmVBdXRvQmF0Y2hlZCkoKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBxdWVyeVJlc3VsdFBhdGNoZWQ6IHtcclxuICAgICAgICAgICAgICAgIHJlZHVjZXI6IGZ1bmN0aW9uIChkcmFmdCwgX2opIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2sgPSBfai5wYXlsb2FkLCBxdWVyeUNhY2hlS2V5ID0gX2sucXVlcnlDYWNoZUtleSwgcGF0Y2hlcyA9IF9rLnBhdGNoZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUXVlcnlTdWJzdGF0ZUlmRXhpc3RzKGRyYWZ0LCBxdWVyeUNhY2hlS2V5LCBmdW5jdGlvbiAoc3Vic3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RhdGUuZGF0YSA9ICgwLCBpbXBvcnRfaW1tZXIzLmFwcGx5UGF0Y2hlcykoc3Vic3RhdGUuZGF0YSwgcGF0Y2hlcy5jb25jYXQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcHJlcGFyZTogKDAsIGltcG9ydF90b29sa2l0Ni5wcmVwYXJlQXV0b0JhdGNoZWQpKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0cmFSZWR1Y2VyczogZnVuY3Rpb24gKGJ1aWxkZXIpIHtcclxuICAgICAgICAgICAgYnVpbGRlci5hZGRDYXNlKHF1ZXJ5VGh1bmsucGVuZGluZywgZnVuY3Rpb24gKGRyYWZ0LCBfaikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBfai5tZXRhLCBhcmcgPSBfai5tZXRhLmFyZztcclxuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXBzZXJ0aW5nID0gaXNVcHNlcnRRdWVyeShhcmcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyZy5zdWJzY3JpYmUgfHwgdXBzZXJ0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKF9iID0gZHJhZnRbX2EgPSBhcmcucXVlcnlDYWNoZUtleV0pICE9IG51bGwgPyBfYiA6IGRyYWZ0W19hXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBRdWVyeVN0YXR1cy51bmluaXRpYWxpemVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludE5hbWU6IGFyZy5lbmRwb2ludE5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlUXVlcnlTdWJzdGF0ZUlmRXhpc3RzKGRyYWZ0LCBhcmcucXVlcnlDYWNoZUtleSwgZnVuY3Rpb24gKHN1YnN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic3RhdGUuc3RhdHVzID0gUXVlcnlTdGF0dXMucGVuZGluZztcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS5yZXF1ZXN0SWQgPSB1cHNlcnRpbmcgJiYgc3Vic3RhdGUucmVxdWVzdElkID8gc3Vic3RhdGUucmVxdWVzdElkIDogbWV0YS5yZXF1ZXN0SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5vcmlnaW5hbEFyZ3MgIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS5vcmlnaW5hbEFyZ3MgPSBhcmcub3JpZ2luYWxBcmdzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS5zdGFydGVkVGltZVN0YW1wID0gbWV0YS5zdGFydGVkVGltZVN0YW1wO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLmFkZENhc2UocXVlcnlUaHVuay5mdWxmaWxsZWQsIGZ1bmN0aW9uIChkcmFmdCwgX2opIHtcclxuICAgICAgICAgICAgICAgIHZhciBtZXRhID0gX2oubWV0YSwgcGF5bG9hZCA9IF9qLnBheWxvYWQ7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVRdWVyeVN1YnN0YXRlSWZFeGlzdHMoZHJhZnQsIG1ldGEuYXJnLnF1ZXJ5Q2FjaGVLZXksIGZ1bmN0aW9uIChzdWJzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic3RhdGUucmVxdWVzdElkICE9PSBtZXRhLnJlcXVlc3RJZCAmJiAhaXNVcHNlcnRRdWVyeShtZXRhLmFyZykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVyZ2UgPSBkZWZpbml0aW9uc1ttZXRhLmFyZy5lbmRwb2ludE5hbWVdLm1lcmdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnN0YXRlLnN0YXR1cyA9IFF1ZXJ5U3RhdHVzLmZ1bGZpbGxlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWVyZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnN0YXRlLmRhdGEgIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bGZpbGxlZFRpbWVTdGFtcF8xID0gbWV0YS5mdWxmaWxsZWRUaW1lU3RhbXAsIGFyZ18xID0gbWV0YS5hcmcsIGJhc2VRdWVyeU1ldGFfMSA9IG1ldGEuYmFzZVF1ZXJ5TWV0YSwgcmVxdWVzdElkXzEgPSBtZXRhLnJlcXVlc3RJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0gKDAsIGltcG9ydF90b29sa2l0Ni5jcmVhdGVOZXh0U3RhdGUpKHN1YnN0YXRlLmRhdGEsIGZ1bmN0aW9uIChkcmFmdFN1YnN0YXRlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXJnZShkcmFmdFN1YnN0YXRlRGF0YSwgcGF5bG9hZCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6IGFyZ18xLm9yaWdpbmFsQXJncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVF1ZXJ5TWV0YTogYmFzZVF1ZXJ5TWV0YV8xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsZWRUaW1lU3RhbXA6IGZ1bGZpbGxlZFRpbWVTdGFtcF8xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZF8xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0YXRlLmRhdGEgPSBuZXdEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RhdGUuZGF0YSA9IHBheWxvYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0YXRlLmRhdGEgPSAoKF9hID0gZGVmaW5pdGlvbnNbbWV0YS5hcmcuZW5kcG9pbnROYW1lXS5zdHJ1Y3R1cmFsU2hhcmluZykgIT0gbnVsbCA/IF9hIDogdHJ1ZSkgPyBjb3B5V2l0aFN0cnVjdHVyYWxTaGFyaW5nKCgwLCBpbXBvcnRfaW1tZXIyLmlzRHJhZnQpKHN1YnN0YXRlLmRhdGEpID8gKDAsIGltcG9ydF9pbW1lcjMub3JpZ2luYWwpKHN1YnN0YXRlLmRhdGEpIDogc3Vic3RhdGUuZGF0YSwgcGF5bG9hZCkgOiBwYXlsb2FkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3Vic3RhdGUuZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic3RhdGUuZnVsZmlsbGVkVGltZVN0YW1wID0gbWV0YS5mdWxmaWxsZWRUaW1lU3RhbXA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkuYWRkQ2FzZShxdWVyeVRodW5rLnJlamVjdGVkLCBmdW5jdGlvbiAoZHJhZnQsIF9qKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2sgPSBfai5tZXRhLCBjb25kaXRpb24gPSBfay5jb25kaXRpb24sIGFyZyA9IF9rLmFyZywgcmVxdWVzdElkID0gX2sucmVxdWVzdElkLCBlcnJvciA9IF9qLmVycm9yLCBwYXlsb2FkID0gX2oucGF5bG9hZDtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVF1ZXJ5U3Vic3RhdGVJZkV4aXN0cyhkcmFmdCwgYXJnLnF1ZXJ5Q2FjaGVLZXksIGZ1bmN0aW9uIChzdWJzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJzdGF0ZS5yZXF1ZXN0SWQgIT09IHJlcXVlc3RJZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RhdGUuc3RhdHVzID0gUXVlcnlTdGF0dXMucmVqZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0YXRlLmVycm9yID0gcGF5bG9hZCAhPSBudWxsID8gcGF5bG9hZCA6IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KS5hZGRNYXRjaGVyKGhhc1JlaHlkcmF0aW9uSW5mbywgZnVuY3Rpb24gKGRyYWZ0LCBhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBxdWVyaWVzID0gZXh0cmFjdFJlaHlkcmF0aW9uSW5mbyhhY3Rpb24pLnF1ZXJpZXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaiA9IDAsIF9rID0gT2JqZWN0LmVudHJpZXMocXVlcmllcyk7IF9qIDwgX2subGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sID0gX2tbX2pdLCBrZXkgPSBfbFswXSwgZW50cnkgPSBfbFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGVudHJ5ID09IG51bGwgPyB2b2lkIDAgOiBlbnRyeS5zdGF0dXMpID09PSBRdWVyeVN0YXR1cy5mdWxmaWxsZWQgfHwgKGVudHJ5ID09IG51bGwgPyB2b2lkIDAgOiBlbnRyeS5zdGF0dXMpID09PSBRdWVyeVN0YXR1cy5yZWplY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFmdFtrZXldID0gZW50cnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHZhciBtdXRhdGlvblNsaWNlID0gKDAsIGltcG9ydF90b29sa2l0Ni5jcmVhdGVTbGljZSkoe1xyXG4gICAgICAgIG5hbWU6IHJlZHVjZXJQYXRoICsgXCIvbXV0YXRpb25zXCIsXHJcbiAgICAgICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXHJcbiAgICAgICAgcmVkdWNlcnM6IHtcclxuICAgICAgICAgICAgcmVtb3ZlTXV0YXRpb25SZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgIHJlZHVjZXI6IGZ1bmN0aW9uIChkcmFmdCwgX2opIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IF9qLnBheWxvYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlS2V5ID0gZ2V0TXV0YXRpb25DYWNoZUtleShwYXlsb2FkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGVLZXkgaW4gZHJhZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGRyYWZ0W2NhY2hlS2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcHJlcGFyZTogKDAsIGltcG9ydF90b29sa2l0Ni5wcmVwYXJlQXV0b0JhdGNoZWQpKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0cmFSZWR1Y2VyczogZnVuY3Rpb24gKGJ1aWxkZXIpIHtcclxuICAgICAgICAgICAgYnVpbGRlci5hZGRDYXNlKG11dGF0aW9uVGh1bmsucGVuZGluZywgZnVuY3Rpb24gKGRyYWZ0LCBfaikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBfai5tZXRhLCBfayA9IF9qLm1ldGEsIHJlcXVlc3RJZCA9IF9rLnJlcXVlc3RJZCwgYXJnID0gX2suYXJnLCBzdGFydGVkVGltZVN0YW1wID0gX2suc3RhcnRlZFRpbWVTdGFtcDtcclxuICAgICAgICAgICAgICAgIGlmICghYXJnLnRyYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGRyYWZ0W2dldE11dGF0aW9uQ2FjaGVLZXkobWV0YSldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogUXVlcnlTdGF0dXMucGVuZGluZyxcclxuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludE5hbWU6IGFyZy5lbmRwb2ludE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZFRpbWVTdGFtcDogc3RhcnRlZFRpbWVTdGFtcFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSkuYWRkQ2FzZShtdXRhdGlvblRodW5rLmZ1bGZpbGxlZCwgZnVuY3Rpb24gKGRyYWZ0LCBfaikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBfai5wYXlsb2FkLCBtZXRhID0gX2oubWV0YTtcclxuICAgICAgICAgICAgICAgIGlmICghbWV0YS5hcmcudHJhY2spXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlTXV0YXRpb25TdWJzdGF0ZUlmRXhpc3RzKGRyYWZ0LCBtZXRhLCBmdW5jdGlvbiAoc3Vic3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic3RhdGUucmVxdWVzdElkICE9PSBtZXRhLnJlcXVlc3RJZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnN0YXRlLnN0YXR1cyA9IFF1ZXJ5U3RhdHVzLmZ1bGZpbGxlZDtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS5kYXRhID0gcGF5bG9hZDtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS5mdWxmaWxsZWRUaW1lU3RhbXAgPSBtZXRhLmZ1bGZpbGxlZFRpbWVTdGFtcDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KS5hZGRDYXNlKG11dGF0aW9uVGh1bmsucmVqZWN0ZWQsIGZ1bmN0aW9uIChkcmFmdCwgX2opIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXlsb2FkID0gX2oucGF5bG9hZCwgZXJyb3IgPSBfai5lcnJvciwgbWV0YSA9IF9qLm1ldGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW1ldGEuYXJnLnRyYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU11dGF0aW9uU3Vic3RhdGVJZkV4aXN0cyhkcmFmdCwgbWV0YSwgZnVuY3Rpb24gKHN1YnN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnN0YXRlLnJlcXVlc3RJZCAhPT0gbWV0YS5yZXF1ZXN0SWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS5zdGF0dXMgPSBRdWVyeVN0YXR1cy5yZWplY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS5lcnJvciA9IHBheWxvYWQgIT0gbnVsbCA/IHBheWxvYWQgOiBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KS5hZGRNYXRjaGVyKGhhc1JlaHlkcmF0aW9uSW5mbywgZnVuY3Rpb24gKGRyYWZ0LCBhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBtdXRhdGlvbnMgPSBleHRyYWN0UmVoeWRyYXRpb25JbmZvKGFjdGlvbikubXV0YXRpb25zO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2ogPSAwLCBfayA9IE9iamVjdC5lbnRyaWVzKG11dGF0aW9ucyk7IF9qIDwgX2subGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sID0gX2tbX2pdLCBrZXkgPSBfbFswXSwgZW50cnkgPSBfbFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKChlbnRyeSA9PSBudWxsID8gdm9pZCAwIDogZW50cnkuc3RhdHVzKSA9PT0gUXVlcnlTdGF0dXMuZnVsZmlsbGVkIHx8IChlbnRyeSA9PSBudWxsID8gdm9pZCAwIDogZW50cnkuc3RhdHVzKSA9PT0gUXVlcnlTdGF0dXMucmVqZWN0ZWQpICYmIGtleSAhPT0gKGVudHJ5ID09IG51bGwgPyB2b2lkIDAgOiBlbnRyeS5yZXF1ZXN0SWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWZ0W2tleV0gPSBlbnRyeTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdmFyIGludmFsaWRhdGlvblNsaWNlID0gKDAsIGltcG9ydF90b29sa2l0Ni5jcmVhdGVTbGljZSkoe1xyXG4gICAgICAgIG5hbWU6IHJlZHVjZXJQYXRoICsgXCIvaW52YWxpZGF0aW9uXCIsXHJcbiAgICAgICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXHJcbiAgICAgICAgcmVkdWNlcnM6IHtcclxuICAgICAgICAgICAgdXBkYXRlUHJvdmlkZWRCeToge1xyXG4gICAgICAgICAgICAgICAgcmVkdWNlcjogZnVuY3Rpb24gKGRyYWZ0LCBhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9qID0gYWN0aW9uLnBheWxvYWQsIHF1ZXJ5Q2FjaGVLZXkgPSBfai5xdWVyeUNhY2hlS2V5LCBwcm92aWRlZFRhZ3MgPSBfai5wcm92aWRlZFRhZ3M7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2sgPSAwLCBfbCA9IE9iamVjdC52YWx1ZXMoZHJhZnQpOyBfayA8IF9sLmxlbmd0aDsgX2srKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFnVHlwZVN1YnNjcmlwdGlvbnMgPSBfbFtfa107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9tID0gMCwgX28gPSBPYmplY3QudmFsdWVzKHRhZ1R5cGVTdWJzY3JpcHRpb25zKTsgX20gPCBfby5sZW5ndGg7IF9tKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZFN1YnNjcmlwdGlvbnMgPSBfb1tfbV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmRBdCA9IGlkU3Vic2NyaXB0aW9ucy5pbmRleE9mKHF1ZXJ5Q2FjaGVLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kQXQgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRTdWJzY3JpcHRpb25zLnNwbGljZShmb3VuZEF0LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcCA9IDAsIHByb3ZpZGVkVGFnc18xID0gcHJvdmlkZWRUYWdzOyBfcCA8IHByb3ZpZGVkVGFnc18xLmxlbmd0aDsgX3ArKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3EgPSBwcm92aWRlZFRhZ3NfMVtfcF0sIHR5cGUgPSBfcS50eXBlLCBpZCA9IF9xLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaWJlZFF1ZXJpZXMgPSAoX2QgPSAoX2IgPSAoX2EgPSBkcmFmdFt0eXBlXSkgIT0gbnVsbCA/IF9hIDogZHJhZnRbdHlwZV0gPSB7fSlbX2MgPSBpZCB8fCBcIl9faW50ZXJuYWxfd2l0aG91dF9pZFwiXSkgIT0gbnVsbCA/IF9kIDogX2JbX2NdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHJlYWR5U3Vic2NyaWJlZCA9IHN1YnNjcmliZWRRdWVyaWVzLmluY2x1ZGVzKHF1ZXJ5Q2FjaGVLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFscmVhZHlTdWJzY3JpYmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVkUXVlcmllcy5wdXNoKHF1ZXJ5Q2FjaGVLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHByZXBhcmU6ICgwLCBpbXBvcnRfdG9vbGtpdDYucHJlcGFyZUF1dG9CYXRjaGVkKSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dHJhUmVkdWNlcnM6IGZ1bmN0aW9uIChidWlsZGVyKSB7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuYWRkQ2FzZShxdWVyeVNsaWNlLmFjdGlvbnMucmVtb3ZlUXVlcnlSZXN1bHQsIGZ1bmN0aW9uIChkcmFmdCwgX2opIHtcclxuICAgICAgICAgICAgICAgIHZhciBxdWVyeUNhY2hlS2V5ID0gX2oucGF5bG9hZC5xdWVyeUNhY2hlS2V5O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2sgPSAwLCBfbCA9IE9iamVjdC52YWx1ZXMoZHJhZnQpOyBfayA8IF9sLmxlbmd0aDsgX2srKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWdUeXBlU3Vic2NyaXB0aW9ucyA9IF9sW19rXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbSA9IDAsIF9vID0gT2JqZWN0LnZhbHVlcyh0YWdUeXBlU3Vic2NyaXB0aW9ucyk7IF9tIDwgX28ubGVuZ3RoOyBfbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZFN1YnNjcmlwdGlvbnMgPSBfb1tfbV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZEF0ID0gaWRTdWJzY3JpcHRpb25zLmluZGV4T2YocXVlcnlDYWNoZUtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZEF0ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRTdWJzY3JpcHRpb25zLnNwbGljZShmb3VuZEF0LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkuYWRkTWF0Y2hlcihoYXNSZWh5ZHJhdGlvbkluZm8sIGZ1bmN0aW9uIChkcmFmdCwgYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZWQgPSBleHRyYWN0UmVoeWRyYXRpb25JbmZvKGFjdGlvbikucHJvdmlkZWQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaiA9IDAsIF9rID0gT2JqZWN0LmVudHJpZXMocHJvdmlkZWQpOyBfaiA8IF9rLmxlbmd0aDsgX2orKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfbCA9IF9rW19qXSwgdHlwZSA9IF9sWzBdLCBpbmNvbWluZ1RhZ3MgPSBfbFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbSA9IDAsIF9vID0gT2JqZWN0LmVudHJpZXMoaW5jb21pbmdUYWdzKTsgX20gPCBfby5sZW5ndGg7IF9tKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9wID0gX29bX21dLCBpZCA9IF9wWzBdLCBjYWNoZUtleXMgPSBfcFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmliZWRRdWVyaWVzID0gKF9kID0gKF9iID0gKF9hID0gZHJhZnRbdHlwZV0pICE9IG51bGwgPyBfYSA6IGRyYWZ0W3R5cGVdID0ge30pW19jID0gaWQgfHwgXCJfX2ludGVybmFsX3dpdGhvdXRfaWRcIl0pICE9IG51bGwgPyBfZCA6IF9iW19jXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcSA9IDAsIGNhY2hlS2V5c18xID0gY2FjaGVLZXlzOyBfcSA8IGNhY2hlS2V5c18xLmxlbmd0aDsgX3ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5Q2FjaGVLZXkgPSBjYWNoZUtleXNfMVtfcV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWxyZWFkeVN1YnNjcmliZWQgPSBzdWJzY3JpYmVkUXVlcmllcy5pbmNsdWRlcyhxdWVyeUNhY2hlS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxyZWFkeVN1YnNjcmliZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVkUXVlcmllcy5wdXNoKHF1ZXJ5Q2FjaGVLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS5hZGRNYXRjaGVyKCgwLCBpbXBvcnRfdG9vbGtpdDYuaXNBbnlPZikoKDAsIGltcG9ydF90b29sa2l0Ni5pc0Z1bGZpbGxlZCkocXVlcnlUaHVuayksICgwLCBpbXBvcnRfdG9vbGtpdDYuaXNSZWplY3RlZFdpdGhWYWx1ZSkocXVlcnlUaHVuaykpLCBmdW5jdGlvbiAoZHJhZnQsIGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb3ZpZGVkVGFncyA9IGNhbGN1bGF0ZVByb3ZpZGVkQnlUaHVuayhhY3Rpb24sIFwicHJvdmlkZXNUYWdzXCIsIGRlZmluaXRpb25zLCBhc3NlcnRUYWdUeXBlKTtcclxuICAgICAgICAgICAgICAgIHZhciBxdWVyeUNhY2hlS2V5ID0gYWN0aW9uLm1ldGEuYXJnLnF1ZXJ5Q2FjaGVLZXk7XHJcbiAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TbGljZS5jYXNlUmVkdWNlcnMudXBkYXRlUHJvdmlkZWRCeShkcmFmdCwgaW52YWxpZGF0aW9uU2xpY2UuYWN0aW9ucy51cGRhdGVQcm92aWRlZEJ5KHtcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeUNhY2hlS2V5OiBxdWVyeUNhY2hlS2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkVGFnczogcHJvdmlkZWRUYWdzXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdmFyIHN1YnNjcmlwdGlvblNsaWNlID0gKDAsIGltcG9ydF90b29sa2l0Ni5jcmVhdGVTbGljZSkoe1xyXG4gICAgICAgIG5hbWU6IHJlZHVjZXJQYXRoICsgXCIvc3Vic2NyaXB0aW9uc1wiLFxyXG4gICAgICAgIGluaXRpYWxTdGF0ZTogaW5pdGlhbFN0YXRlLFxyXG4gICAgICAgIHJlZHVjZXJzOiB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnM6IGZ1bmN0aW9uIChkLCBhKSB7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlUXVlcnlSZXN1bHQ6IGZ1bmN0aW9uIChkLCBhKSB7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGludGVybmFsX3Byb2JlU3Vic2NyaXB0aW9uOiBmdW5jdGlvbiAoZCwgYSkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB2YXIgaW50ZXJuYWxTdWJzY3JpcHRpb25zU2xpY2UgPSAoMCwgaW1wb3J0X3Rvb2xraXQ2LmNyZWF0ZVNsaWNlKSh7XHJcbiAgICAgICAgbmFtZTogcmVkdWNlclBhdGggKyBcIi9pbnRlcm5hbFN1YnNjcmlwdGlvbnNcIixcclxuICAgICAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcclxuICAgICAgICByZWR1Y2Vyczoge1xyXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zVXBkYXRlZDoge1xyXG4gICAgICAgICAgICAgICAgcmVkdWNlcjogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGltcG9ydF9pbW1lcjMuYXBwbHlQYXRjaGVzKShzdGF0ZSwgYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHByZXBhcmU6ICgwLCBpbXBvcnRfdG9vbGtpdDYucHJlcGFyZUF1dG9CYXRjaGVkKSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHZhciBjb25maWdTbGljZSA9ICgwLCBpbXBvcnRfdG9vbGtpdDYuY3JlYXRlU2xpY2UpKHtcclxuICAgICAgICBuYW1lOiByZWR1Y2VyUGF0aCArIFwiL2NvbmZpZ1wiLFxyXG4gICAgICAgIGluaXRpYWxTdGF0ZTogX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICBvbmxpbmU6IGlzT25saW5lKCksXHJcbiAgICAgICAgICAgIGZvY3VzZWQ6IGlzRG9jdW1lbnRWaXNpYmxlKCksXHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVSZWdpc3RlcmVkOiBmYWxzZVxyXG4gICAgICAgIH0sIGNvbmZpZyksXHJcbiAgICAgICAgcmVkdWNlcnM6IHtcclxuICAgICAgICAgICAgbWlkZGxld2FyZVJlZ2lzdGVyZWQ6IGZ1bmN0aW9uIChzdGF0ZSwgX2opIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXlsb2FkID0gX2oucGF5bG9hZDtcclxuICAgICAgICAgICAgICAgIHN0YXRlLm1pZGRsZXdhcmVSZWdpc3RlcmVkID0gc3RhdGUubWlkZGxld2FyZVJlZ2lzdGVyZWQgPT09IFwiY29uZmxpY3RcIiB8fCBhcGlVaWQgIT09IHBheWxvYWQgPyBcImNvbmZsaWN0XCIgOiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRyYVJlZHVjZXJzOiBmdW5jdGlvbiAoYnVpbGRlcikge1xyXG4gICAgICAgICAgICBidWlsZGVyLmFkZENhc2Uob25PbmxpbmUsIGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUub25saW5lID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSkuYWRkQ2FzZShvbk9mZmxpbmUsIGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUub25saW5lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pLmFkZENhc2Uob25Gb2N1cywgZnVuY3Rpb24gKHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSkuYWRkQ2FzZShvbkZvY3VzTG9zdCwgZnVuY3Rpb24gKHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pLmFkZE1hdGNoZXIoaGFzUmVoeWRyYXRpb25JbmZvLCBmdW5jdGlvbiAoZHJhZnQpIHsgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKHt9LCBkcmFmdCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdmFyIGNvbWJpbmVkUmVkdWNlciA9ICgwLCBpbXBvcnRfdG9vbGtpdDYuY29tYmluZVJlZHVjZXJzKSh7XHJcbiAgICAgICAgcXVlcmllczogcXVlcnlTbGljZS5yZWR1Y2VyLFxyXG4gICAgICAgIG11dGF0aW9uczogbXV0YXRpb25TbGljZS5yZWR1Y2VyLFxyXG4gICAgICAgIHByb3ZpZGVkOiBpbnZhbGlkYXRpb25TbGljZS5yZWR1Y2VyLFxyXG4gICAgICAgIHN1YnNjcmlwdGlvbnM6IGludGVybmFsU3Vic2NyaXB0aW9uc1NsaWNlLnJlZHVjZXIsXHJcbiAgICAgICAgY29uZmlnOiBjb25maWdTbGljZS5yZWR1Y2VyXHJcbiAgICB9KTtcclxuICAgIHZhciByZWR1Y2VyID0gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHsgcmV0dXJuIGNvbWJpbmVkUmVkdWNlcihyZXNldEFwaVN0YXRlLm1hdGNoKGFjdGlvbikgPyB2b2lkIDAgOiBzdGF0ZSwgYWN0aW9uKTsgfTtcclxuICAgIHZhciBhY3Rpb25zID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgY29uZmlnU2xpY2UuYWN0aW9ucyksIHF1ZXJ5U2xpY2UuYWN0aW9ucyksIHN1YnNjcmlwdGlvblNsaWNlLmFjdGlvbnMpLCBpbnRlcm5hbFN1YnNjcmlwdGlvbnNTbGljZS5hY3Rpb25zKSwgbXV0YXRpb25TbGljZS5hY3Rpb25zKSwgaW52YWxpZGF0aW9uU2xpY2UuYWN0aW9ucyksIHtcclxuICAgICAgICB1bnN1YnNjcmliZU11dGF0aW9uUmVzdWx0OiBtdXRhdGlvblNsaWNlLmFjdGlvbnMucmVtb3ZlTXV0YXRpb25SZXN1bHQsXHJcbiAgICAgICAgcmVzZXRBcGlTdGF0ZTogcmVzZXRBcGlTdGF0ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4geyByZWR1Y2VyOiByZWR1Y2VyLCBhY3Rpb25zOiBhY3Rpb25zIH07XHJcbn1cclxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRTZWxlY3RvcnMudHNcclxudmFyIHNraXBUb2tlbiA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwiUlRLUS9za2lwVG9rZW5cIik7XHJcbnZhciBza2lwU2VsZWN0b3IgPSBza2lwVG9rZW47XHJcbnZhciBpbml0aWFsU3ViU3RhdGUgPSB7XHJcbiAgICBzdGF0dXM6IFF1ZXJ5U3RhdHVzLnVuaW5pdGlhbGl6ZWRcclxufTtcclxudmFyIGRlZmF1bHRRdWVyeVN1YlN0YXRlID0gLyogQF9fUFVSRV9fICovICgwLCBpbXBvcnRfdG9vbGtpdDcuY3JlYXRlTmV4dFN0YXRlKShpbml0aWFsU3ViU3RhdGUsIGZ1bmN0aW9uICgpIHtcclxufSk7XHJcbnZhciBkZWZhdWx0TXV0YXRpb25TdWJTdGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyAoMCwgaW1wb3J0X3Rvb2xraXQ3LmNyZWF0ZU5leHRTdGF0ZSkoaW5pdGlhbFN1YlN0YXRlLCBmdW5jdGlvbiAoKSB7XHJcbn0pO1xyXG5mdW5jdGlvbiBidWlsZFNlbGVjdG9ycyhfaikge1xyXG4gICAgdmFyIHNlcmlhbGl6ZVF1ZXJ5QXJncyA9IF9qLnNlcmlhbGl6ZVF1ZXJ5QXJncywgcmVkdWNlclBhdGggPSBfai5yZWR1Y2VyUGF0aDtcclxuICAgIHZhciBzZWxlY3RTa2lwcGVkUXVlcnkgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGRlZmF1bHRRdWVyeVN1YlN0YXRlOyB9O1xyXG4gICAgdmFyIHNlbGVjdFNraXBwZWRNdXRhdGlvbiA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gZGVmYXVsdE11dGF0aW9uU3ViU3RhdGU7IH07XHJcbiAgICByZXR1cm4geyBidWlsZFF1ZXJ5U2VsZWN0b3I6IGJ1aWxkUXVlcnlTZWxlY3RvciwgYnVpbGRNdXRhdGlvblNlbGVjdG9yOiBidWlsZE11dGF0aW9uU2VsZWN0b3IsIHNlbGVjdEludmFsaWRhdGVkQnk6IHNlbGVjdEludmFsaWRhdGVkQnkgfTtcclxuICAgIGZ1bmN0aW9uIHdpdGhSZXF1ZXN0RmxhZ3Moc3Vic3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHN1YnN0YXRlKSwgZ2V0UmVxdWVzdFN0YXR1c0ZsYWdzKHN1YnN0YXRlLnN0YXR1cykpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2VsZWN0SW50ZXJuYWxTdGF0ZShyb290U3RhdGUpIHtcclxuICAgICAgICB2YXIgc3RhdGUgPSByb290U3RhdGVbcmVkdWNlclBhdGhdO1xyXG4gICAgICAgIGlmICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICghc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RJbnRlcm5hbFN0YXRlLnRyaWdnZXJlZClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RJbnRlcm5hbFN0YXRlLnRyaWdnZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IE5vIGRhdGEgZm91bmQgYXQgYHN0YXRlLlwiICsgcmVkdWNlclBhdGggKyBcImAuIERpZCB5b3UgZm9yZ2V0IHRvIGFkZCB0aGUgcmVkdWNlciB0byB0aGUgc3RvcmU/XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGJ1aWxkUXVlcnlTZWxlY3RvcihlbmRwb2ludE5hbWUsIGVuZHBvaW50RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAocXVlcnlBcmdzKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXJpYWxpemVkQXJncyA9IHNlcmlhbGl6ZVF1ZXJ5QXJncyh7XHJcbiAgICAgICAgICAgICAgICBxdWVyeUFyZ3M6IHF1ZXJ5QXJncyxcclxuICAgICAgICAgICAgICAgIGVuZHBvaW50RGVmaW5pdGlvbjogZW5kcG9pbnREZWZpbml0aW9uLFxyXG4gICAgICAgICAgICAgICAgZW5kcG9pbnROYW1lOiBlbmRwb2ludE5hbWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RRdWVyeVN1YnN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcclxuICAgICAgICAgICAgICAgIHJldHVybiAoX2MgPSAoX2IgPSAoX2EgPSBzZWxlY3RJbnRlcm5hbFN0YXRlKHN0YXRlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnF1ZXJpZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYltzZXJpYWxpemVkQXJnc10pICE9IG51bGwgPyBfYyA6IGRlZmF1bHRRdWVyeVN1YlN0YXRlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgZmluYWxTZWxlY3RRdWVyeVN1YlN0YXRlID0gcXVlcnlBcmdzID09PSBza2lwVG9rZW4gPyBzZWxlY3RTa2lwcGVkUXVlcnkgOiBzZWxlY3RRdWVyeVN1YnN0YXRlO1xyXG4gICAgICAgICAgICByZXR1cm4gKDAsIGltcG9ydF90b29sa2l0Ny5jcmVhdGVTZWxlY3RvcikoZmluYWxTZWxlY3RRdWVyeVN1YlN0YXRlLCB3aXRoUmVxdWVzdEZsYWdzKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYnVpbGRNdXRhdGlvblNlbGVjdG9yKCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICB2YXIgbXV0YXRpb25JZDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRpb25JZCA9IChfYSA9IGdldE11dGF0aW9uQ2FjaGVLZXkoaWQpKSAhPSBudWxsID8gX2EgOiBza2lwVG9rZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdGlvbklkID0gaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHNlbGVjdE11dGF0aW9uU3Vic3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTIsIF9iLCBfYztcclxuICAgICAgICAgICAgICAgIHJldHVybiAoX2MgPSAoX2IgPSAoX2EyID0gc2VsZWN0SW50ZXJuYWxTdGF0ZShzdGF0ZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYTIubXV0YXRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2JbbXV0YXRpb25JZF0pICE9IG51bGwgPyBfYyA6IGRlZmF1bHRNdXRhdGlvblN1YlN0YXRlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgZmluYWxTZWxlY3RNdXRhdGlvblN1YnN0YXRlID0gbXV0YXRpb25JZCA9PT0gc2tpcFRva2VuID8gc2VsZWN0U2tpcHBlZE11dGF0aW9uIDogc2VsZWN0TXV0YXRpb25TdWJzdGF0ZTtcclxuICAgICAgICAgICAgcmV0dXJuICgwLCBpbXBvcnRfdG9vbGtpdDcuY3JlYXRlU2VsZWN0b3IpKGZpbmFsU2VsZWN0TXV0YXRpb25TdWJzdGF0ZSwgd2l0aFJlcXVlc3RGbGFncyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNlbGVjdEludmFsaWRhdGVkQnkoc3RhdGUsIHRhZ3MpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdmFyIGFwaVN0YXRlID0gc3RhdGVbcmVkdWNlclBhdGhdO1xyXG4gICAgICAgIHZhciB0b0ludmFsaWRhdGUgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgZm9yICh2YXIgX2ogPSAwLCBfayA9IHRhZ3MubWFwKGV4cGFuZFRhZ0Rlc2NyaXB0aW9uKTsgX2ogPCBfay5sZW5ndGg7IF9qKyspIHtcclxuICAgICAgICAgICAgdmFyIHRhZyA9IF9rW19qXTtcclxuICAgICAgICAgICAgdmFyIHByb3ZpZGVkID0gYXBpU3RhdGUucHJvdmlkZWRbdGFnLnR5cGVdO1xyXG4gICAgICAgICAgICBpZiAoIXByb3ZpZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaW52YWxpZGF0ZVN1YnNjcmlwdGlvbnMgPSAoX2EgPSB0YWcuaWQgIT09IHZvaWQgMCA/IHByb3ZpZGVkW3RhZy5pZF0gOiBmbGF0dGVuKE9iamVjdC52YWx1ZXMocHJvdmlkZWQpKSkgIT0gbnVsbCA/IF9hIDogW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9sID0gMCwgaW52YWxpZGF0ZVN1YnNjcmlwdGlvbnNfMSA9IGludmFsaWRhdGVTdWJzY3JpcHRpb25zOyBfbCA8IGludmFsaWRhdGVTdWJzY3JpcHRpb25zXzEubGVuZ3RoOyBfbCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW52YWxpZGF0ZSA9IGludmFsaWRhdGVTdWJzY3JpcHRpb25zXzFbX2xdO1xyXG4gICAgICAgICAgICAgICAgdG9JbnZhbGlkYXRlLmFkZChpbnZhbGlkYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmxhdHRlbihBcnJheS5mcm9tKHRvSW52YWxpZGF0ZS52YWx1ZXMoKSkubWFwKGZ1bmN0aW9uIChxdWVyeUNhY2hlS2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeVN1YlN0YXRlID0gYXBpU3RhdGUucXVlcmllc1txdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5U3ViU3RhdGUgPyBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDYWNoZUtleTogcXVlcnlDYWNoZUtleSxcclxuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludE5hbWU6IHF1ZXJ5U3ViU3RhdGUuZW5kcG9pbnROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsQXJnczogcXVlcnlTdWJTdGF0ZS5vcmlnaW5hbEFyZ3NcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSA6IFtdO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG4vLyBzcmMvcXVlcnkvZGVmYXVsdFNlcmlhbGl6ZVF1ZXJ5QXJncy50c1xyXG52YXIgaW1wb3J0X3Rvb2xraXQ4ID0gX190b01vZHVsZShyZXF1aXJlKFwiQHJlZHV4anMvdG9vbGtpdFwiKSk7XHJcbnZhciBjYWNoZSA9IFdlYWtNYXAgPyBuZXcgV2Vha01hcCgpIDogdm9pZCAwO1xyXG52YXIgZGVmYXVsdFNlcmlhbGl6ZVF1ZXJ5QXJncyA9IGZ1bmN0aW9uIChfaikge1xyXG4gICAgdmFyIGVuZHBvaW50TmFtZSA9IF9qLmVuZHBvaW50TmFtZSwgcXVlcnlBcmdzID0gX2oucXVlcnlBcmdzO1xyXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBcIlwiO1xyXG4gICAgdmFyIGNhY2hlZCA9IGNhY2hlID09IG51bGwgPyB2b2lkIDAgOiBjYWNoZS5nZXQocXVlcnlBcmdzKTtcclxuICAgIGlmICh0eXBlb2YgY2FjaGVkID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgc2VyaWFsaXplZCA9IGNhY2hlZDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBzdHJpbmdpZmllZCA9IEpTT04uc3RyaW5naWZ5KHF1ZXJ5QXJncywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsgcmV0dXJuICgwLCBpbXBvcnRfdG9vbGtpdDguaXNQbGFpbk9iamVjdCkodmFsdWUpID8gT2JqZWN0LmtleXModmFsdWUpLnNvcnQoKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5Mikge1xyXG4gICAgICAgICAgICBhY2Nba2V5Ml0gPSB2YWx1ZVtrZXkyXTtcclxuICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICB9LCB7fSkgOiB2YWx1ZTsgfSk7XHJcbiAgICAgICAgaWYgKCgwLCBpbXBvcnRfdG9vbGtpdDguaXNQbGFpbk9iamVjdCkocXVlcnlBcmdzKSkge1xyXG4gICAgICAgICAgICBjYWNoZSA9PSBudWxsID8gdm9pZCAwIDogY2FjaGUuc2V0KHF1ZXJ5QXJncywgc3RyaW5naWZpZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXJpYWxpemVkID0gc3RyaW5naWZpZWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW5kcG9pbnROYW1lICsgXCIoXCIgKyBzZXJpYWxpemVkICsgXCIpXCI7XHJcbn07XHJcbi8vIHNyYy9xdWVyeS9jcmVhdGVBcGkudHNcclxudmFyIGltcG9ydF90b29sa2l0OSA9IF9fdG9Nb2R1bGUocmVxdWlyZShcIkByZWR1eGpzL3Rvb2xraXRcIikpO1xyXG52YXIgaW1wb3J0X3Jlc2VsZWN0ID0gX190b01vZHVsZShyZXF1aXJlKFwicmVzZWxlY3RcIikpO1xyXG5mdW5jdGlvbiBidWlsZENyZWF0ZUFwaSgpIHtcclxuICAgIHZhciBtb2R1bGVzID0gW107XHJcbiAgICBmb3IgKHZhciBfaiA9IDA7IF9qIDwgYXJndW1lbnRzLmxlbmd0aDsgX2orKykge1xyXG4gICAgICAgIG1vZHVsZXNbX2pdID0gYXJndW1lbnRzW19qXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiBiYXNlQ3JlYXRlQXBpKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZXh0cmFjdFJlaHlkcmF0aW9uSW5mbyA9ICgwLCBpbXBvcnRfcmVzZWxlY3QuZGVmYXVsdE1lbW9pemUpKGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIChfYiA9IG9wdGlvbnMuZXh0cmFjdFJlaHlkcmF0aW9uSW5mbykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0aW9ucywgYWN0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICByZWR1Y2VyUGF0aDogKF9hID0gb3B0aW9ucy5yZWR1Y2VyUGF0aCkgIT0gbnVsbCA/IF9hIDogXCJhcGlcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgb3B0aW9uc1dpdGhEZWZhdWx0cyA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICByZWR1Y2VyUGF0aDogXCJhcGlcIixcclxuICAgICAgICAgICAga2VlcFVudXNlZERhdGFGb3I6IDYwLFxyXG4gICAgICAgICAgICByZWZldGNoT25Nb3VudE9yQXJnQ2hhbmdlOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVmZXRjaE9uRm9jdXM6IGZhbHNlLFxyXG4gICAgICAgICAgICByZWZldGNoT25SZWNvbm5lY3Q6IGZhbHNlXHJcbiAgICAgICAgfSwgb3B0aW9ucyksIHtcclxuICAgICAgICAgICAgZXh0cmFjdFJlaHlkcmF0aW9uSW5mbzogZXh0cmFjdFJlaHlkcmF0aW9uSW5mbyxcclxuICAgICAgICAgICAgc2VyaWFsaXplUXVlcnlBcmdzOiBmdW5jdGlvbiAocXVlcnlBcmdzQXBpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxTZXJpYWxpemVRdWVyeUFyZ3MgPSBkZWZhdWx0U2VyaWFsaXplUXVlcnlBcmdzO1xyXG4gICAgICAgICAgICAgICAgaWYgKFwic2VyaWFsaXplUXVlcnlBcmdzXCIgaW4gcXVlcnlBcmdzQXBpLmVuZHBvaW50RGVmaW5pdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRwb2ludFNRQV8xID0gcXVlcnlBcmdzQXBpLmVuZHBvaW50RGVmaW5pdGlvbi5zZXJpYWxpemVRdWVyeUFyZ3M7XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxTZXJpYWxpemVRdWVyeUFyZ3MgPSBmdW5jdGlvbiAocXVlcnlBcmdzQXBpMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbFJlc3VsdCA9IGVuZHBvaW50U1FBXzEocXVlcnlBcmdzQXBpMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdFNlcmlhbGl6ZVF1ZXJ5QXJncyhfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBxdWVyeUFyZ3NBcGkyKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5QXJnczogaW5pdGlhbFJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuc2VyaWFsaXplUXVlcnlBcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxTZXJpYWxpemVRdWVyeUFyZ3MgPSBvcHRpb25zLnNlcmlhbGl6ZVF1ZXJ5QXJncztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmaW5hbFNlcmlhbGl6ZVF1ZXJ5QXJncyhxdWVyeUFyZ3NBcGkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0YWdUeXBlczogX19zcHJlYWRBcnJheShbXSwgb3B0aW9ucy50YWdUeXBlcyB8fCBbXSlcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgZW5kcG9pbnREZWZpbml0aW9uczoge30sXHJcbiAgICAgICAgICAgIGJhdGNoOiBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICAgICAgICAgIGZuKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFwaVVpZDogKDAsIGltcG9ydF90b29sa2l0OS5uYW5vaWQpKCksXHJcbiAgICAgICAgICAgIGV4dHJhY3RSZWh5ZHJhdGlvbkluZm86IGV4dHJhY3RSZWh5ZHJhdGlvbkluZm8sXHJcbiAgICAgICAgICAgIGhhc1JlaHlkcmF0aW9uSW5mbzogKDAsIGltcG9ydF9yZXNlbGVjdC5kZWZhdWx0TWVtb2l6ZSkoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gZXh0cmFjdFJlaHlkcmF0aW9uSW5mbyhhY3Rpb24pICE9IG51bGw7IH0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgYXBpID0ge1xyXG4gICAgICAgICAgICBpbmplY3RFbmRwb2ludHM6IGluamVjdEVuZHBvaW50cyxcclxuICAgICAgICAgICAgZW5oYW5jZUVuZHBvaW50czogZnVuY3Rpb24gKF9qKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWRkVGFnVHlwZXMgPSBfai5hZGRUYWdUeXBlcywgZW5kcG9pbnRzID0gX2ouZW5kcG9pbnRzO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFkZFRhZ1R5cGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2sgPSAwLCBhZGRUYWdUeXBlc18xID0gYWRkVGFnVHlwZXM7IF9rIDwgYWRkVGFnVHlwZXNfMS5sZW5ndGg7IF9rKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVUID0gYWRkVGFnVHlwZXNfMVtfa107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9uc1dpdGhEZWZhdWx0cy50YWdUeXBlcy5pbmNsdWRlcyhlVCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNXaXRoRGVmYXVsdHMudGFnVHlwZXMucHVzaChlVCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kcG9pbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2wgPSAwLCBfbSA9IE9iamVjdC5lbnRyaWVzKGVuZHBvaW50cyk7IF9sIDwgX20ubGVuZ3RoOyBfbCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfbyA9IF9tW19sXSwgZW5kcG9pbnROYW1lID0gX29bMF0sIHBhcnRpYWxEZWZpbml0aW9uID0gX29bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFydGlhbERlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydGlhbERlZmluaXRpb24oY29udGV4dC5lbmRwb2ludERlZmluaXRpb25zW2VuZHBvaW50TmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LmVuZHBvaW50RGVmaW5pdGlvbnNbZW5kcG9pbnROYW1lXSB8fCB7fSwgcGFydGlhbERlZmluaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGluaXRpYWxpemVkTW9kdWxlcyA9IG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmluaXQoYXBpLCBvcHRpb25zV2l0aERlZmF1bHRzLCBjb250ZXh0KTsgfSk7XHJcbiAgICAgICAgZnVuY3Rpb24gaW5qZWN0RW5kcG9pbnRzKGluamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgZXZhbHVhdGVkRW5kcG9pbnRzID0gaW5qZWN0LmVuZHBvaW50cyh7XHJcbiAgICAgICAgICAgICAgICBxdWVyeTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHgpLCB7IHR5cGU6IERlZmluaXRpb25UeXBlLnF1ZXJ5IH0pOyB9LFxyXG4gICAgICAgICAgICAgICAgbXV0YXRpb246IGZ1bmN0aW9uICh4KSB7IHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCB4KSwgeyB0eXBlOiBEZWZpbml0aW9uVHlwZS5tdXRhdGlvbiB9KTsgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2ogPSAwLCBfayA9IE9iamVjdC5lbnRyaWVzKGV2YWx1YXRlZEVuZHBvaW50cyk7IF9qIDwgX2subGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2wgPSBfa1tfal0sIGVuZHBvaW50TmFtZSA9IF9sWzBdLCBkZWZpbml0aW9uID0gX2xbMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWluamVjdC5vdmVycmlkZUV4aXN0aW5nICYmIGVuZHBvaW50TmFtZSBpbiBjb250ZXh0LmVuZHBvaW50RGVmaW5pdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiY2FsbGVkIGBpbmplY3RFbmRwb2ludHNgIHRvIG92ZXJyaWRlIGFscmVhZHktZXhpc3RpbmcgZW5kcG9pbnROYW1lIFwiICsgZW5kcG9pbnROYW1lICsgXCIgd2l0aG91dCBzcGVjaWZ5aW5nIGBvdmVycmlkZUV4aXN0aW5nOiB0cnVlYFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVuZHBvaW50RGVmaW5pdGlvbnNbZW5kcG9pbnROYW1lXSA9IGRlZmluaXRpb247XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfbSA9IDAsIGluaXRpYWxpemVkTW9kdWxlc18xID0gaW5pdGlhbGl6ZWRNb2R1bGVzOyBfbSA8IGluaXRpYWxpemVkTW9kdWxlc18xLmxlbmd0aDsgX20rKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtID0gaW5pdGlhbGl6ZWRNb2R1bGVzXzFbX21dO1xyXG4gICAgICAgICAgICAgICAgICAgIG0uaW5qZWN0RW5kcG9pbnQoZW5kcG9pbnROYW1lLCBkZWZpbml0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYXBpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXBpLmluamVjdEVuZHBvaW50cyh7IGVuZHBvaW50czogb3B0aW9ucy5lbmRwb2ludHMgfSk7XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9xdWVyeS9mYWtlQmFzZVF1ZXJ5LnRzXHJcbmZ1bmN0aW9uIGZha2VCYXNlUXVlcnkoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIldoZW4gdXNpbmcgYGZha2VCYXNlUXVlcnlgLCBhbGwgcXVlcmllcyAmIG11dGF0aW9ucyBtdXN0IHVzZSB0aGUgYHF1ZXJ5Rm5gIGRlZmluaXRpb24gc3ludGF4LlwiKTtcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL2luZGV4LnRzXHJcbnZhciBpbXBvcnRfdG9vbGtpdDEzID0gX190b01vZHVsZShyZXF1aXJlKFwiQHJlZHV4anMvdG9vbGtpdFwiKSk7XHJcbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkTWlkZGxld2FyZS9jYWNoZUNvbGxlY3Rpb24udHNcclxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcclxuICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxudmFyIFRISVJUWV9UV09fQklUX01BWF9USU1FUl9TRUNPTkRTID0gMjE0NzQ4MzY0NyAvIDFlMyAtIDE7XHJcbnZhciBidWlsZENhY2hlQ29sbGVjdGlvbkhhbmRsZXIgPSBmdW5jdGlvbiAoX2opIHtcclxuICAgIHZhciByZWR1Y2VyUGF0aCA9IF9qLnJlZHVjZXJQYXRoLCBhcGkgPSBfai5hcGksIGNvbnRleHQgPSBfai5jb250ZXh0LCBpbnRlcm5hbFN0YXRlID0gX2ouaW50ZXJuYWxTdGF0ZTtcclxuICAgIHZhciBfayA9IGFwaS5pbnRlcm5hbEFjdGlvbnMsIHJlbW92ZVF1ZXJ5UmVzdWx0ID0gX2sucmVtb3ZlUXVlcnlSZXN1bHQsIHVuc3Vic2NyaWJlUXVlcnlSZXN1bHQgPSBfay51bnN1YnNjcmliZVF1ZXJ5UmVzdWx0O1xyXG4gICAgZnVuY3Rpb24gYW55U3Vic2NyaXB0aW9uc1JlbWFpbmluZ0ZvcktleShxdWVyeUNhY2hlS2V5KSB7XHJcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBpbnRlcm5hbFN0YXRlLmN1cnJlbnRTdWJzY3JpcHRpb25zW3F1ZXJ5Q2FjaGVLZXldO1xyXG4gICAgICAgIHJldHVybiAhIXN1YnNjcmlwdGlvbnMgJiYgIWlzT2JqZWN0RW1wdHkoc3Vic2NyaXB0aW9ucyk7XHJcbiAgICB9XHJcbiAgICB2YXIgY3VycmVudFJlbW92YWxUaW1lb3V0cyA9IHt9O1xyXG4gICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoYWN0aW9uLCBtd0FwaSwgaW50ZXJuYWxTdGF0ZTIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlUXVlcnlSZXN1bHQubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBtd0FwaS5nZXRTdGF0ZSgpW3JlZHVjZXJQYXRoXTtcclxuICAgICAgICAgICAgdmFyIHF1ZXJ5Q2FjaGVLZXkgPSBhY3Rpb24ucGF5bG9hZC5xdWVyeUNhY2hlS2V5O1xyXG4gICAgICAgICAgICBoYW5kbGVVbnN1YnNjcmliZShxdWVyeUNhY2hlS2V5LCAoX2EgPSBzdGF0ZS5xdWVyaWVzW3F1ZXJ5Q2FjaGVLZXldKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZW5kcG9pbnROYW1lLCBtd0FwaSwgc3RhdGUuY29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwaS51dGlsLnJlc2V0QXBpU3RhdGUubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaiA9IDAsIF9rID0gT2JqZWN0LmVudHJpZXMoY3VycmVudFJlbW92YWxUaW1lb3V0cyk7IF9qIDwgX2subGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2wgPSBfa1tfal0sIGtleSA9IF9sWzBdLCB0aW1lb3V0ID0gX2xbMV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dClcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgY3VycmVudFJlbW92YWxUaW1lb3V0c1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250ZXh0Lmhhc1JlaHlkcmF0aW9uSW5mbyhhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IG13QXBpLmdldFN0YXRlKClbcmVkdWNlclBhdGhdO1xyXG4gICAgICAgICAgICB2YXIgcXVlcmllcyA9IGNvbnRleHQuZXh0cmFjdFJlaHlkcmF0aW9uSW5mbyhhY3Rpb24pLnF1ZXJpZXM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9tID0gMCwgX28gPSBPYmplY3QuZW50cmllcyhxdWVyaWVzKTsgX20gPCBfby5sZW5ndGg7IF9tKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBfcCA9IF9vW19tXSwgcXVlcnlDYWNoZUtleSA9IF9wWzBdLCBxdWVyeVN0YXRlID0gX3BbMV07XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVVbnN1YnNjcmliZShxdWVyeUNhY2hlS2V5LCBxdWVyeVN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBxdWVyeVN0YXRlLmVuZHBvaW50TmFtZSwgbXdBcGksIHN0YXRlLmNvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZnVuY3Rpb24gaGFuZGxlVW5zdWJzY3JpYmUocXVlcnlDYWNoZUtleSwgZW5kcG9pbnROYW1lLCBhcGkyLCBjb25maWcpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdmFyIGVuZHBvaW50RGVmaW5pdGlvbiA9IGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tlbmRwb2ludE5hbWVdO1xyXG4gICAgICAgIHZhciBrZWVwVW51c2VkRGF0YUZvciA9IChfYSA9IGVuZHBvaW50RGVmaW5pdGlvbiA9PSBudWxsID8gdm9pZCAwIDogZW5kcG9pbnREZWZpbml0aW9uLmtlZXBVbnVzZWREYXRhRm9yKSAhPSBudWxsID8gX2EgOiBjb25maWcua2VlcFVudXNlZERhdGFGb3I7XHJcbiAgICAgICAgaWYgKGtlZXBVbnVzZWREYXRhRm9yID09PSBJbmZpbml0eSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBmaW5hbEtlZXBVbnVzZWREYXRhRm9yID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oa2VlcFVudXNlZERhdGFGb3IsIFRISVJUWV9UV09fQklUX01BWF9USU1FUl9TRUNPTkRTKSk7XHJcbiAgICAgICAgaWYgKCFhbnlTdWJzY3JpcHRpb25zUmVtYWluaW5nRm9yS2V5KHF1ZXJ5Q2FjaGVLZXkpKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZW91dCA9IGN1cnJlbnRSZW1vdmFsVGltZW91dHNbcXVlcnlDYWNoZUtleV07XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGN1cnJlbnRUaW1lb3V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50UmVtb3ZhbFRpbWVvdXRzW3F1ZXJ5Q2FjaGVLZXldID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFueVN1YnNjcmlwdGlvbnNSZW1haW5pbmdGb3JLZXkocXVlcnlDYWNoZUtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcGkyLmRpc3BhdGNoKHJlbW92ZVF1ZXJ5UmVzdWx0KHsgcXVlcnlDYWNoZUtleTogcXVlcnlDYWNoZUtleSB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgY3VycmVudFJlbW92YWxUaW1lb3V0c1txdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICAgICAgfSwgZmluYWxLZWVwVW51c2VkRGF0YUZvciAqIDFlMyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhbmRsZXI7XHJcbn07XHJcbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkTWlkZGxld2FyZS9pbnZhbGlkYXRpb25CeVRhZ3MudHNcclxudmFyIGltcG9ydF90b29sa2l0MTAgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpKTtcclxudmFyIGJ1aWxkSW52YWxpZGF0aW9uQnlUYWdzSGFuZGxlciA9IGZ1bmN0aW9uIChfaikge1xyXG4gICAgdmFyIHJlZHVjZXJQYXRoID0gX2oucmVkdWNlclBhdGgsIGNvbnRleHQgPSBfai5jb250ZXh0LCBlbmRwb2ludERlZmluaXRpb25zID0gX2ouY29udGV4dC5lbmRwb2ludERlZmluaXRpb25zLCBtdXRhdGlvblRodW5rID0gX2oubXV0YXRpb25UaHVuaywgYXBpID0gX2ouYXBpLCBhc3NlcnRUYWdUeXBlID0gX2ouYXNzZXJ0VGFnVHlwZSwgcmVmZXRjaFF1ZXJ5ID0gX2oucmVmZXRjaFF1ZXJ5O1xyXG4gICAgdmFyIHJlbW92ZVF1ZXJ5UmVzdWx0ID0gYXBpLmludGVybmFsQWN0aW9ucy5yZW1vdmVRdWVyeVJlc3VsdDtcclxuICAgIHZhciBpc1RodW5rQWN0aW9uV2l0aFRhZ3MgPSAoMCwgaW1wb3J0X3Rvb2xraXQxMC5pc0FueU9mKSgoMCwgaW1wb3J0X3Rvb2xraXQxMC5pc0Z1bGZpbGxlZCkobXV0YXRpb25UaHVuayksICgwLCBpbXBvcnRfdG9vbGtpdDEwLmlzUmVqZWN0ZWRXaXRoVmFsdWUpKG11dGF0aW9uVGh1bmspKTtcclxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGFjdGlvbiwgbXdBcGkpIHtcclxuICAgICAgICBpZiAoaXNUaHVua0FjdGlvbldpdGhUYWdzKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgaW52YWxpZGF0ZVRhZ3MoY2FsY3VsYXRlUHJvdmlkZWRCeVRodW5rKGFjdGlvbiwgXCJpbnZhbGlkYXRlc1RhZ3NcIiwgZW5kcG9pbnREZWZpbml0aW9ucywgYXNzZXJ0VGFnVHlwZSksIG13QXBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwaS51dGlsLmludmFsaWRhdGVUYWdzLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgaW52YWxpZGF0ZVRhZ3MoY2FsY3VsYXRlUHJvdmlkZWRCeShhY3Rpb24ucGF5bG9hZCwgdm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBhc3NlcnRUYWdUeXBlKSwgbXdBcGkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBpbnZhbGlkYXRlVGFncyh0YWdzLCBtd0FwaSkge1xyXG4gICAgICAgIHZhciByb290U3RhdGUgPSBtd0FwaS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IHJvb3RTdGF0ZVtyZWR1Y2VyUGF0aF07XHJcbiAgICAgICAgdmFyIHRvSW52YWxpZGF0ZSA9IGFwaS51dGlsLnNlbGVjdEludmFsaWRhdGVkQnkocm9vdFN0YXRlLCB0YWdzKTtcclxuICAgICAgICBjb250ZXh0LmJhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVzQXJyYXkgPSBBcnJheS5mcm9tKHRvSW52YWxpZGF0ZS52YWx1ZXMoKSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9qID0gMCwgdmFsdWVzQXJyYXlfMSA9IHZhbHVlc0FycmF5OyBfaiA8IHZhbHVlc0FycmF5XzEubGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlDYWNoZUtleSA9IHZhbHVlc0FycmF5XzFbX2pdLnF1ZXJ5Q2FjaGVLZXk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlTdWJTdGF0ZSA9IHN0YXRlLnF1ZXJpZXNbcXVlcnlDYWNoZUtleV07XHJcbiAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uU3ViU3RhdGUgPSAoX2EgPSBzdGF0ZS5zdWJzY3JpcHRpb25zW3F1ZXJ5Q2FjaGVLZXldKSAhPSBudWxsID8gX2EgOiB7fTtcclxuICAgICAgICAgICAgICAgIGlmIChxdWVyeVN1YlN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvblN1YlN0YXRlKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXdBcGkuZGlzcGF0Y2gocmVtb3ZlUXVlcnlSZXN1bHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlDYWNoZUtleTogcXVlcnlDYWNoZUtleVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHF1ZXJ5U3ViU3RhdGUuc3RhdHVzICE9PSBRdWVyeVN0YXR1cy51bmluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG13QXBpLmRpc3BhdGNoKHJlZmV0Y2hRdWVyeShxdWVyeVN1YlN0YXRlLCBxdWVyeUNhY2hlS2V5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFuZGxlcjtcclxufTtcclxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL3BvbGxpbmcudHNcclxudmFyIGJ1aWxkUG9sbGluZ0hhbmRsZXIgPSBmdW5jdGlvbiAoX2opIHtcclxuICAgIHZhciByZWR1Y2VyUGF0aCA9IF9qLnJlZHVjZXJQYXRoLCBxdWVyeVRodW5rID0gX2oucXVlcnlUaHVuaywgYXBpID0gX2ouYXBpLCByZWZldGNoUXVlcnkgPSBfai5yZWZldGNoUXVlcnksIGludGVybmFsU3RhdGUgPSBfai5pbnRlcm5hbFN0YXRlO1xyXG4gICAgdmFyIGN1cnJlbnRQb2xscyA9IHt9O1xyXG4gICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoYWN0aW9uLCBtd0FwaSkge1xyXG4gICAgICAgIGlmIChhcGkuaW50ZXJuYWxBY3Rpb25zLnVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnMubWF0Y2goYWN0aW9uKSB8fCBhcGkuaW50ZXJuYWxBY3Rpb25zLnVuc3Vic2NyaWJlUXVlcnlSZXN1bHQubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICB1cGRhdGVQb2xsaW5nSW50ZXJ2YWwoYWN0aW9uLnBheWxvYWQsIG13QXBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHF1ZXJ5VGh1bmsucGVuZGluZy5tYXRjaChhY3Rpb24pIHx8IHF1ZXJ5VGh1bmsucmVqZWN0ZWQubWF0Y2goYWN0aW9uKSAmJiBhY3Rpb24ubWV0YS5jb25kaXRpb24pIHtcclxuICAgICAgICAgICAgdXBkYXRlUG9sbGluZ0ludGVydmFsKGFjdGlvbi5tZXRhLmFyZywgbXdBcGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocXVlcnlUaHVuay5mdWxmaWxsZWQubWF0Y2goYWN0aW9uKSB8fCBxdWVyeVRodW5rLnJlamVjdGVkLm1hdGNoKGFjdGlvbikgJiYgIWFjdGlvbi5tZXRhLmNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICBzdGFydE5leHRQb2xsKGFjdGlvbi5tZXRhLmFyZywgbXdBcGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXBpLnV0aWwucmVzZXRBcGlTdGF0ZS5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGNsZWFyUG9sbHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZnVuY3Rpb24gc3RhcnROZXh0UG9sbChfaiwgYXBpMikge1xyXG4gICAgICAgIHZhciBxdWVyeUNhY2hlS2V5ID0gX2oucXVlcnlDYWNoZUtleTtcclxuICAgICAgICB2YXIgc3RhdGUgPSBhcGkyLmdldFN0YXRlKClbcmVkdWNlclBhdGhdO1xyXG4gICAgICAgIHZhciBxdWVyeVN1YlN0YXRlID0gc3RhdGUucXVlcmllc1txdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IGludGVybmFsU3RhdGUuY3VycmVudFN1YnNjcmlwdGlvbnNbcXVlcnlDYWNoZUtleV07XHJcbiAgICAgICAgaWYgKCFxdWVyeVN1YlN0YXRlIHx8IHF1ZXJ5U3ViU3RhdGUuc3RhdHVzID09PSBRdWVyeVN0YXR1cy51bmluaXRpYWxpemVkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIGxvd2VzdFBvbGxpbmdJbnRlcnZhbCA9IGZpbmRMb3dlc3RQb2xsaW5nSW50ZXJ2YWwoc3Vic2NyaXB0aW9ucyk7XHJcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobG93ZXN0UG9sbGluZ0ludGVydmFsKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBjdXJyZW50UG9sbCA9IGN1cnJlbnRQb2xsc1txdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICBpZiAoY3VycmVudFBvbGwgPT0gbnVsbCA/IHZvaWQgMCA6IGN1cnJlbnRQb2xsLnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGN1cnJlbnRQb2xsLnRpbWVvdXQpO1xyXG4gICAgICAgICAgICBjdXJyZW50UG9sbC50aW1lb3V0ID0gdm9pZCAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmV4dFBvbGxUaW1lc3RhbXAgPSBEYXRlLm5vdygpICsgbG93ZXN0UG9sbGluZ0ludGVydmFsO1xyXG4gICAgICAgIHZhciBjdXJyZW50SW50ZXJ2YWwgPSBjdXJyZW50UG9sbHNbcXVlcnlDYWNoZUtleV0gPSB7XHJcbiAgICAgICAgICAgIG5leHRQb2xsVGltZXN0YW1wOiBuZXh0UG9sbFRpbWVzdGFtcCxcclxuICAgICAgICAgICAgcG9sbGluZ0ludGVydmFsOiBsb3dlc3RQb2xsaW5nSW50ZXJ2YWwsXHJcbiAgICAgICAgICAgIHRpbWVvdXQ6IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEludGVydmFsLnRpbWVvdXQgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBhcGkyLmRpc3BhdGNoKHJlZmV0Y2hRdWVyeShxdWVyeVN1YlN0YXRlLCBxdWVyeUNhY2hlS2V5KSk7XHJcbiAgICAgICAgICAgIH0sIGxvd2VzdFBvbGxpbmdJbnRlcnZhbClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9sbGluZ0ludGVydmFsKF9qLCBhcGkyKSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5Q2FjaGVLZXkgPSBfai5xdWVyeUNhY2hlS2V5O1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IGFwaTIuZ2V0U3RhdGUoKVtyZWR1Y2VyUGF0aF07XHJcbiAgICAgICAgdmFyIHF1ZXJ5U3ViU3RhdGUgPSBzdGF0ZS5xdWVyaWVzW3F1ZXJ5Q2FjaGVLZXldO1xyXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gaW50ZXJuYWxTdGF0ZS5jdXJyZW50U3Vic2NyaXB0aW9uc1txdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICBpZiAoIXF1ZXJ5U3ViU3RhdGUgfHwgcXVlcnlTdWJTdGF0ZS5zdGF0dXMgPT09IFF1ZXJ5U3RhdHVzLnVuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbG93ZXN0UG9sbGluZ0ludGVydmFsID0gZmluZExvd2VzdFBvbGxpbmdJbnRlcnZhbChzdWJzY3JpcHRpb25zKTtcclxuICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShsb3dlc3RQb2xsaW5nSW50ZXJ2YWwpKSB7XHJcbiAgICAgICAgICAgIGNsZWFudXBQb2xsRm9yS2V5KHF1ZXJ5Q2FjaGVLZXkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXJyZW50UG9sbCA9IGN1cnJlbnRQb2xsc1txdWVyeUNhY2hlS2V5XTtcclxuICAgICAgICB2YXIgbmV4dFBvbGxUaW1lc3RhbXAgPSBEYXRlLm5vdygpICsgbG93ZXN0UG9sbGluZ0ludGVydmFsO1xyXG4gICAgICAgIGlmICghY3VycmVudFBvbGwgfHwgbmV4dFBvbGxUaW1lc3RhbXAgPCBjdXJyZW50UG9sbC5uZXh0UG9sbFRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICBzdGFydE5leHRQb2xsKHsgcXVlcnlDYWNoZUtleTogcXVlcnlDYWNoZUtleSB9LCBhcGkyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjbGVhbnVwUG9sbEZvcktleShrZXkpIHtcclxuICAgICAgICB2YXIgZXhpc3RpbmdQb2xsID0gY3VycmVudFBvbGxzW2tleV07XHJcbiAgICAgICAgaWYgKGV4aXN0aW5nUG9sbCA9PSBudWxsID8gdm9pZCAwIDogZXhpc3RpbmdQb2xsLnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGV4aXN0aW5nUG9sbC50aW1lb3V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRlIGN1cnJlbnRQb2xsc1trZXldO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2xlYXJQb2xscygpIHtcclxuICAgICAgICBmb3IgKHZhciBfaiA9IDAsIF9rID0gT2JqZWN0LmtleXMoY3VycmVudFBvbGxzKTsgX2ogPCBfay5sZW5ndGg7IF9qKyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IF9rW19qXTtcclxuICAgICAgICAgICAgY2xlYW51cFBvbGxGb3JLZXkoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBmaW5kTG93ZXN0UG9sbGluZ0ludGVydmFsKHN1YnNjcmliZXJzKSB7XHJcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzID09PSB2b2lkIDApIHsgc3Vic2NyaWJlcnMgPSB7fTsgfVxyXG4gICAgICAgIHZhciBsb3dlc3RQb2xsaW5nSW50ZXJ2YWwgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHN1YnNjcmliZXJzKSB7XHJcbiAgICAgICAgICAgIGlmICghIXN1YnNjcmliZXJzW2tleV0ucG9sbGluZ0ludGVydmFsKSB7XHJcbiAgICAgICAgICAgICAgICBsb3dlc3RQb2xsaW5nSW50ZXJ2YWwgPSBNYXRoLm1pbihzdWJzY3JpYmVyc1trZXldLnBvbGxpbmdJbnRlcnZhbCwgbG93ZXN0UG9sbGluZ0ludGVydmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbG93ZXN0UG9sbGluZ0ludGVydmFsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhbmRsZXI7XHJcbn07XHJcbi8vIHNyYy9xdWVyeS9jb3JlL2J1aWxkTWlkZGxld2FyZS93aW5kb3dFdmVudEhhbmRsaW5nLnRzXHJcbnZhciBidWlsZFdpbmRvd0V2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChfaikge1xyXG4gICAgdmFyIHJlZHVjZXJQYXRoID0gX2oucmVkdWNlclBhdGgsIGNvbnRleHQgPSBfai5jb250ZXh0LCBhcGkgPSBfai5hcGksIHJlZmV0Y2hRdWVyeSA9IF9qLnJlZmV0Y2hRdWVyeSwgaW50ZXJuYWxTdGF0ZSA9IF9qLmludGVybmFsU3RhdGU7XHJcbiAgICB2YXIgcmVtb3ZlUXVlcnlSZXN1bHQgPSBhcGkuaW50ZXJuYWxBY3Rpb25zLnJlbW92ZVF1ZXJ5UmVzdWx0O1xyXG4gICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoYWN0aW9uLCBtd0FwaSkge1xyXG4gICAgICAgIGlmIChvbkZvY3VzLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmVmZXRjaFZhbGlkUXVlcmllcyhtd0FwaSwgXCJyZWZldGNoT25Gb2N1c1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9uT25saW5lLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmVmZXRjaFZhbGlkUXVlcmllcyhtd0FwaSwgXCJyZWZldGNoT25SZWNvbm5lY3RcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZ1bmN0aW9uIHJlZmV0Y2hWYWxpZFF1ZXJpZXMoYXBpMiwgdHlwZSkge1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IGFwaTIuZ2V0U3RhdGUoKVtyZWR1Y2VyUGF0aF07XHJcbiAgICAgICAgdmFyIHF1ZXJpZXMgPSBzdGF0ZS5xdWVyaWVzO1xyXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gaW50ZXJuYWxTdGF0ZS5jdXJyZW50U3Vic2NyaXB0aW9ucztcclxuICAgICAgICBjb250ZXh0LmJhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2ogPSAwLCBfayA9IE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnMpOyBfaiA8IF9rLmxlbmd0aDsgX2orKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5Q2FjaGVLZXkgPSBfa1tfal07XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlTdWJTdGF0ZSA9IHF1ZXJpZXNbcXVlcnlDYWNoZUtleV07XHJcbiAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uU3ViU3RhdGUgPSBzdWJzY3JpcHRpb25zW3F1ZXJ5Q2FjaGVLZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpcHRpb25TdWJTdGF0ZSB8fCAhcXVlcnlTdWJTdGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIHZhciBzaG91bGRSZWZldGNoID0gT2JqZWN0LnZhbHVlcyhzdWJzY3JpcHRpb25TdWJTdGF0ZSkuc29tZShmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWJbdHlwZV0gPT09IHRydWU7IH0pIHx8IE9iamVjdC52YWx1ZXMoc3Vic2NyaXB0aW9uU3ViU3RhdGUpLmV2ZXJ5KGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Ylt0eXBlXSA9PT0gdm9pZCAwOyB9KSAmJiBzdGF0ZS5jb25maWdbdHlwZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkUmVmZXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhzdWJzY3JpcHRpb25TdWJTdGF0ZSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaTIuZGlzcGF0Y2gocmVtb3ZlUXVlcnlSZXN1bHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlDYWNoZUtleTogcXVlcnlDYWNoZUtleVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHF1ZXJ5U3ViU3RhdGUuc3RhdHVzICE9PSBRdWVyeVN0YXR1cy51bmluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaTIuZGlzcGF0Y2gocmVmZXRjaFF1ZXJ5KHF1ZXJ5U3ViU3RhdGUsIHF1ZXJ5Q2FjaGVLZXkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBoYW5kbGVyO1xyXG59O1xyXG4vLyBzcmMvcXVlcnkvY29yZS9idWlsZE1pZGRsZXdhcmUvY2FjaGVMaWZlY3ljbGUudHNcclxudmFyIGltcG9ydF90b29sa2l0MTEgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpKTtcclxudmFyIG5ldmVyUmVzb2x2ZWRFcnJvciA9IG5ldyBFcnJvcihcIlByb21pc2UgbmV2ZXIgcmVzb2x2ZWQgYmVmb3JlIGNhY2hlRW50cnlSZW1vdmVkLlwiKTtcclxudmFyIGJ1aWxkQ2FjaGVMaWZlY3ljbGVIYW5kbGVyID0gZnVuY3Rpb24gKF9qKSB7XHJcbiAgICB2YXIgYXBpID0gX2ouYXBpLCByZWR1Y2VyUGF0aCA9IF9qLnJlZHVjZXJQYXRoLCBjb250ZXh0ID0gX2ouY29udGV4dCwgcXVlcnlUaHVuayA9IF9qLnF1ZXJ5VGh1bmssIG11dGF0aW9uVGh1bmsgPSBfai5tdXRhdGlvblRodW5rLCBpbnRlcm5hbFN0YXRlID0gX2ouaW50ZXJuYWxTdGF0ZTtcclxuICAgIHZhciBpc1F1ZXJ5VGh1bmsgPSAoMCwgaW1wb3J0X3Rvb2xraXQxMS5pc0FzeW5jVGh1bmtBY3Rpb24pKHF1ZXJ5VGh1bmspO1xyXG4gICAgdmFyIGlzTXV0YXRpb25UaHVuayA9ICgwLCBpbXBvcnRfdG9vbGtpdDExLmlzQXN5bmNUaHVua0FjdGlvbikobXV0YXRpb25UaHVuayk7XHJcbiAgICB2YXIgaXNGdWxmaWxsZWRUaHVuayA9ICgwLCBpbXBvcnRfdG9vbGtpdDExLmlzRnVsZmlsbGVkKShxdWVyeVRodW5rLCBtdXRhdGlvblRodW5rKTtcclxuICAgIHZhciBsaWZlY3ljbGVNYXAgPSB7fTtcclxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGFjdGlvbiwgbXdBcGksIHN0YXRlQmVmb3JlKSB7XHJcbiAgICAgICAgdmFyIGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkoYWN0aW9uKTtcclxuICAgICAgICBpZiAocXVlcnlUaHVuay5wZW5kaW5nLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgdmFyIG9sZFN0YXRlID0gc3RhdGVCZWZvcmVbcmVkdWNlclBhdGhdLnF1ZXJpZXNbY2FjaGVLZXldO1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBtd0FwaS5nZXRTdGF0ZSgpW3JlZHVjZXJQYXRoXS5xdWVyaWVzW2NhY2hlS2V5XTtcclxuICAgICAgICAgICAgaWYgKCFvbGRTdGF0ZSAmJiBzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlTmV3S2V5KGFjdGlvbi5tZXRhLmFyZy5lbmRwb2ludE5hbWUsIGFjdGlvbi5tZXRhLmFyZy5vcmlnaW5hbEFyZ3MsIGNhY2hlS2V5LCBtd0FwaSwgYWN0aW9uLm1ldGEucmVxdWVzdElkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChtdXRhdGlvblRodW5rLnBlbmRpbmcubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBtd0FwaS5nZXRTdGF0ZSgpW3JlZHVjZXJQYXRoXS5tdXRhdGlvbnNbY2FjaGVLZXldO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZU5ld0tleShhY3Rpb24ubWV0YS5hcmcuZW5kcG9pbnROYW1lLCBhY3Rpb24ubWV0YS5hcmcub3JpZ2luYWxBcmdzLCBjYWNoZUtleSwgbXdBcGksIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNGdWxmaWxsZWRUaHVuayhhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHZhciBsaWZlY3ljbGUgPSBsaWZlY3ljbGVNYXBbY2FjaGVLZXldO1xyXG4gICAgICAgICAgICBpZiAobGlmZWN5Y2xlID09IG51bGwgPyB2b2lkIDAgOiBsaWZlY3ljbGUudmFsdWVSZXNvbHZlZCkge1xyXG4gICAgICAgICAgICAgICAgbGlmZWN5Y2xlLnZhbHVlUmVzb2x2ZWQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGFjdGlvbi5wYXlsb2FkLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6IGFjdGlvbi5tZXRhLmJhc2VRdWVyeU1ldGFcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGxpZmVjeWNsZS52YWx1ZVJlc29sdmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFwaS5pbnRlcm5hbEFjdGlvbnMucmVtb3ZlUXVlcnlSZXN1bHQubWF0Y2goYWN0aW9uKSB8fCBhcGkuaW50ZXJuYWxBY3Rpb25zLnJlbW92ZU11dGF0aW9uUmVzdWx0Lm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgdmFyIGxpZmVjeWNsZSA9IGxpZmVjeWNsZU1hcFtjYWNoZUtleV07XHJcbiAgICAgICAgICAgIGlmIChsaWZlY3ljbGUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBsaWZlY3ljbGVNYXBbY2FjaGVLZXldO1xyXG4gICAgICAgICAgICAgICAgbGlmZWN5Y2xlLmNhY2hlRW50cnlSZW1vdmVkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXBpLnV0aWwucmVzZXRBcGlTdGF0ZS5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9qID0gMCwgX2sgPSBPYmplY3QuZW50cmllcyhsaWZlY3ljbGVNYXApOyBfaiA8IF9rLmxlbmd0aDsgX2orKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9sID0gX2tbX2pdLCBjYWNoZUtleTIgPSBfbFswXSwgbGlmZWN5Y2xlID0gX2xbMV07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgbGlmZWN5Y2xlTWFwW2NhY2hlS2V5Ml07XHJcbiAgICAgICAgICAgICAgICBsaWZlY3ljbGUuY2FjaGVFbnRyeVJlbW92ZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBnZXRDYWNoZUtleShhY3Rpb24pIHtcclxuICAgICAgICBpZiAoaXNRdWVyeVRodW5rKGFjdGlvbikpXHJcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24ubWV0YS5hcmcucXVlcnlDYWNoZUtleTtcclxuICAgICAgICBpZiAoaXNNdXRhdGlvblRodW5rKGFjdGlvbikpXHJcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24ubWV0YS5yZXF1ZXN0SWQ7XHJcbiAgICAgICAgaWYgKGFwaS5pbnRlcm5hbEFjdGlvbnMucmVtb3ZlUXVlcnlSZXN1bHQubWF0Y2goYWN0aW9uKSlcclxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkLnF1ZXJ5Q2FjaGVLZXk7XHJcbiAgICAgICAgaWYgKGFwaS5pbnRlcm5hbEFjdGlvbnMucmVtb3ZlTXV0YXRpb25SZXN1bHQubWF0Y2goYWN0aW9uKSlcclxuICAgICAgICAgICAgcmV0dXJuIGdldE11dGF0aW9uQ2FjaGVLZXkoYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaGFuZGxlTmV3S2V5KGVuZHBvaW50TmFtZSwgb3JpZ2luYWxBcmdzLCBxdWVyeUNhY2hlS2V5LCBtd0FwaSwgcmVxdWVzdElkKSB7XHJcbiAgICAgICAgdmFyIGVuZHBvaW50RGVmaW5pdGlvbiA9IGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tlbmRwb2ludE5hbWVdO1xyXG4gICAgICAgIHZhciBvbkNhY2hlRW50cnlBZGRlZCA9IGVuZHBvaW50RGVmaW5pdGlvbiA9PSBudWxsID8gdm9pZCAwIDogZW5kcG9pbnREZWZpbml0aW9uLm9uQ2FjaGVFbnRyeUFkZGVkO1xyXG4gICAgICAgIGlmICghb25DYWNoZUVudHJ5QWRkZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgbGlmZWN5Y2xlID0ge307XHJcbiAgICAgICAgdmFyIGNhY2hlRW50cnlSZW1vdmVkID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgbGlmZWN5Y2xlLmNhY2hlRW50cnlSZW1vdmVkID0gcmVzb2x2ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgY2FjaGVEYXRhTG9hZGVkID0gUHJvbWlzZS5yYWNlKFtcclxuICAgICAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgIGxpZmVjeWNsZS52YWx1ZVJlc29sdmVkID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGNhY2hlRW50cnlSZW1vdmVkLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV2ZXJSZXNvbHZlZEVycm9yO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIGNhY2hlRGF0YUxvYWRlZC5jYXRjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGlmZWN5Y2xlTWFwW3F1ZXJ5Q2FjaGVLZXldID0gbGlmZWN5Y2xlO1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IGFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXS5zZWxlY3QoZW5kcG9pbnREZWZpbml0aW9uLnR5cGUgPT09IERlZmluaXRpb25UeXBlLnF1ZXJ5ID8gb3JpZ2luYWxBcmdzIDogcXVlcnlDYWNoZUtleSk7XHJcbiAgICAgICAgdmFyIGV4dHJhID0gbXdBcGkuZGlzcGF0Y2goZnVuY3Rpb24gKF8sIF9fLCBleHRyYTIpIHsgcmV0dXJuIGV4dHJhMjsgfSk7XHJcbiAgICAgICAgdmFyIGxpZmVjeWNsZUFwaSA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG13QXBpKSwge1xyXG4gICAgICAgICAgICBnZXRDYWNoZUVudHJ5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxlY3Rvcihtd0FwaS5nZXRTdGF0ZSgpKTsgfSxcclxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgdXBkYXRlQ2FjaGVkRGF0YTogZW5kcG9pbnREZWZpbml0aW9uLnR5cGUgPT09IERlZmluaXRpb25UeXBlLnF1ZXJ5ID8gZnVuY3Rpb24gKHVwZGF0ZVJlY2lwZSkgeyByZXR1cm4gbXdBcGkuZGlzcGF0Y2goYXBpLnV0aWwudXBkYXRlUXVlcnlEYXRhKGVuZHBvaW50TmFtZSwgb3JpZ2luYWxBcmdzLCB1cGRhdGVSZWNpcGUpKTsgfSA6IHZvaWQgMCxcclxuICAgICAgICAgICAgY2FjaGVEYXRhTG9hZGVkOiBjYWNoZURhdGFMb2FkZWQsXHJcbiAgICAgICAgICAgIGNhY2hlRW50cnlSZW1vdmVkOiBjYWNoZUVudHJ5UmVtb3ZlZFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBydW5uaW5nSGFuZGxlciA9IG9uQ2FjaGVFbnRyeUFkZGVkKG9yaWdpbmFsQXJncywgbGlmZWN5Y2xlQXBpKTtcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUocnVubmluZ0hhbmRsZXIpLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChlID09PSBuZXZlclJlc29sdmVkRXJyb3IpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFuZGxlcjtcclxufTtcclxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL3F1ZXJ5TGlmZWN5Y2xlLnRzXHJcbnZhciBpbXBvcnRfdG9vbGtpdDEyID0gX190b01vZHVsZShyZXF1aXJlKFwiQHJlZHV4anMvdG9vbGtpdFwiKSk7XHJcbnZhciBidWlsZFF1ZXJ5TGlmZWN5Y2xlSGFuZGxlciA9IGZ1bmN0aW9uIChfaikge1xyXG4gICAgdmFyIGFwaSA9IF9qLmFwaSwgY29udGV4dCA9IF9qLmNvbnRleHQsIHF1ZXJ5VGh1bmsgPSBfai5xdWVyeVRodW5rLCBtdXRhdGlvblRodW5rID0gX2oubXV0YXRpb25UaHVuaztcclxuICAgIHZhciBpc1BlbmRpbmdUaHVuayA9ICgwLCBpbXBvcnRfdG9vbGtpdDEyLmlzUGVuZGluZykocXVlcnlUaHVuaywgbXV0YXRpb25UaHVuayk7XHJcbiAgICB2YXIgaXNSZWplY3RlZFRodW5rID0gKDAsIGltcG9ydF90b29sa2l0MTIuaXNSZWplY3RlZCkocXVlcnlUaHVuaywgbXV0YXRpb25UaHVuayk7XHJcbiAgICB2YXIgaXNGdWxsZmlsbGVkVGh1bmsgPSAoMCwgaW1wb3J0X3Rvb2xraXQxMi5pc0Z1bGZpbGxlZCkocXVlcnlUaHVuaywgbXV0YXRpb25UaHVuayk7XHJcbiAgICB2YXIgbGlmZWN5Y2xlTWFwID0ge307XHJcbiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChhY3Rpb24sIG13QXBpKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XHJcbiAgICAgICAgaWYgKGlzUGVuZGluZ1RodW5rKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgdmFyIF9qID0gYWN0aW9uLm1ldGEsIHJlcXVlc3RJZCA9IF9qLnJlcXVlc3RJZCwgX2sgPSBfai5hcmcsIGVuZHBvaW50TmFtZV8xID0gX2suZW5kcG9pbnROYW1lLCBvcmlnaW5hbEFyZ3NfMSA9IF9rLm9yaWdpbmFsQXJncztcclxuICAgICAgICAgICAgdmFyIGVuZHBvaW50RGVmaW5pdGlvbiA9IGNvbnRleHQuZW5kcG9pbnREZWZpbml0aW9uc1tlbmRwb2ludE5hbWVfMV07XHJcbiAgICAgICAgICAgIHZhciBvblF1ZXJ5U3RhcnRlZCA9IGVuZHBvaW50RGVmaW5pdGlvbiA9PSBudWxsID8gdm9pZCAwIDogZW5kcG9pbnREZWZpbml0aW9uLm9uUXVlcnlTdGFydGVkO1xyXG4gICAgICAgICAgICBpZiAob25RdWVyeVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaWZlY3ljbGVfMSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5RnVsZmlsbGVkID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpZmVjeWNsZV8xLnJlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpZmVjeWNsZV8xLnJlamVjdCA9IHJlamVjdDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcXVlcnlGdWxmaWxsZWQuY2F0Y2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBsaWZlY3ljbGVNYXBbcmVxdWVzdElkXSA9IGxpZmVjeWNsZV8xO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yXzEgPSBhcGkuZW5kcG9pbnRzW2VuZHBvaW50TmFtZV8xXS5zZWxlY3QoZW5kcG9pbnREZWZpbml0aW9uLnR5cGUgPT09IERlZmluaXRpb25UeXBlLnF1ZXJ5ID8gb3JpZ2luYWxBcmdzXzEgOiByZXF1ZXN0SWQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4dHJhID0gbXdBcGkuZGlzcGF0Y2goZnVuY3Rpb24gKF8sIF9fLCBleHRyYTIpIHsgcmV0dXJuIGV4dHJhMjsgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlmZWN5Y2xlQXBpID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbXdBcGkpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FjaGVFbnRyeTogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZWN0b3JfMShtd0FwaS5nZXRTdGF0ZSgpKTsgfSxcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2FjaGVkRGF0YTogZW5kcG9pbnREZWZpbml0aW9uLnR5cGUgPT09IERlZmluaXRpb25UeXBlLnF1ZXJ5ID8gZnVuY3Rpb24gKHVwZGF0ZVJlY2lwZSkgeyByZXR1cm4gbXdBcGkuZGlzcGF0Y2goYXBpLnV0aWwudXBkYXRlUXVlcnlEYXRhKGVuZHBvaW50TmFtZV8xLCBvcmlnaW5hbEFyZ3NfMSwgdXBkYXRlUmVjaXBlKSk7IH0gOiB2b2lkIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlGdWxmaWxsZWQ6IHF1ZXJ5RnVsZmlsbGVkXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG9uUXVlcnlTdGFydGVkKG9yaWdpbmFsQXJnc18xLCBsaWZlY3ljbGVBcGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzRnVsbGZpbGxlZFRodW5rKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgdmFyIF9sID0gYWN0aW9uLm1ldGEsIHJlcXVlc3RJZCA9IF9sLnJlcXVlc3RJZCwgYmFzZVF1ZXJ5TWV0YSA9IF9sLmJhc2VRdWVyeU1ldGE7XHJcbiAgICAgICAgICAgIChfYSA9IGxpZmVjeWNsZU1hcFtyZXF1ZXN0SWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2EucmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBhY3Rpb24ucGF5bG9hZCxcclxuICAgICAgICAgICAgICAgIG1ldGE6IGJhc2VRdWVyeU1ldGFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBsaWZlY3ljbGVNYXBbcmVxdWVzdElkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNSZWplY3RlZFRodW5rKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgdmFyIF9tID0gYWN0aW9uLm1ldGEsIHJlcXVlc3RJZCA9IF9tLnJlcXVlc3RJZCwgcmVqZWN0ZWRXaXRoVmFsdWUgPSBfbS5yZWplY3RlZFdpdGhWYWx1ZSwgYmFzZVF1ZXJ5TWV0YSA9IF9tLmJhc2VRdWVyeU1ldGE7XHJcbiAgICAgICAgICAgIChfYyA9IGxpZmVjeWNsZU1hcFtyZXF1ZXN0SWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2MucmVqZWN0KHtcclxuICAgICAgICAgICAgICAgIGVycm9yOiAoX2IgPSBhY3Rpb24ucGF5bG9hZCkgIT0gbnVsbCA/IF9iIDogYWN0aW9uLmVycm9yLFxyXG4gICAgICAgICAgICAgICAgaXNVbmhhbmRsZWRFcnJvcjogIXJlamVjdGVkV2l0aFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogYmFzZVF1ZXJ5TWV0YVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGVsZXRlIGxpZmVjeWNsZU1hcFtyZXF1ZXN0SWRdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gaGFuZGxlcjtcclxufTtcclxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL2Rldk1pZGRsZXdhcmUudHNcclxudmFyIGJ1aWxkRGV2Q2hlY2tIYW5kbGVyID0gZnVuY3Rpb24gKF9qKSB7XHJcbiAgICB2YXIgYXBpID0gX2ouYXBpLCBhcGlVaWQgPSBfai5jb250ZXh0LmFwaVVpZCwgcmVkdWNlclBhdGggPSBfai5yZWR1Y2VyUGF0aDtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uLCBtd0FwaSkge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgaWYgKGFwaS51dGlsLnJlc2V0QXBpU3RhdGUubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICBtd0FwaS5kaXNwYXRjaChhcGkuaW50ZXJuYWxBY3Rpb25zLm1pZGRsZXdhcmVSZWdpc3RlcmVkKGFwaVVpZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoYXBpLmludGVybmFsQWN0aW9ucy5taWRkbGV3YXJlUmVnaXN0ZXJlZC5tYXRjaChhY3Rpb24pICYmIGFjdGlvbi5wYXlsb2FkID09PSBhcGlVaWQgJiYgKChfYiA9IChfYSA9IG13QXBpLmdldFN0YXRlKClbcmVkdWNlclBhdGhdKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2IubWlkZGxld2FyZVJlZ2lzdGVyZWQpID09PSBcImNvbmZsaWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZXJlIGlzIGEgbWlzbWF0Y2ggYmV0d2VlbiBzbGljZSBhbmQgbWlkZGxld2FyZSBmb3IgdGhlIHJlZHVjZXJQYXRoIFxcXCJcIiArIHJlZHVjZXJQYXRoICsgXCJcXFwiLlxcbllvdSBjYW4gb25seSBoYXZlIG9uZSBhcGkgcGVyIHJlZHVjZXIgcGF0aCwgdGhpcyB3aWxsIGxlYWQgdG8gY3Jhc2hlcyBpbiB2YXJpb3VzIHNpdHVhdGlvbnMhXCIgKyAocmVkdWNlclBhdGggPT09IFwiYXBpXCIgPyBcIlxcbklmIHlvdSBoYXZlIG11bHRpcGxlIGFwaXMsIHlvdSAqaGF2ZSogdG8gc3BlY2lmeSB0aGUgcmVkdWNlclBhdGggb3B0aW9uIHdoZW4gdXNpbmcgY3JlYXRlQXBpIVwiIDogXCJcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuLy8gc3JjL3F1ZXJ5L2NvcmUvYnVpbGRNaWRkbGV3YXJlL2JhdGNoQWN0aW9ucy50c1xyXG52YXIgaW1wb3J0X2ltbWVyNCA9IF9fdG9Nb2R1bGUocmVxdWlyZShcImltbWVyXCIpKTtcclxudmFyIHByb21pc2U7XHJcbnZhciBxdWV1ZU1pY3JvdGFza1NoaW0gPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09IFwiZnVuY3Rpb25cIiA/IHF1ZXVlTWljcm90YXNrLmJpbmQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiBnbG9iYWxUaGlzKSA6IGZ1bmN0aW9uIChjYikgeyByZXR1cm4gKHByb21pc2UgfHwgKHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKSkpLnRoZW4oY2IpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgdGhyb3cgZXJyO1xyXG59LCAwKTsgfSk7IH07XHJcbnZhciBidWlsZEJhdGNoZWRBY3Rpb25zSGFuZGxlciA9IGZ1bmN0aW9uIChfaikge1xyXG4gICAgdmFyIGFwaSA9IF9qLmFwaSwgcXVlcnlUaHVuayA9IF9qLnF1ZXJ5VGh1bmssIGludGVybmFsU3RhdGUgPSBfai5pbnRlcm5hbFN0YXRlO1xyXG4gICAgdmFyIHN1YnNjcmlwdGlvbnNQcmVmaXggPSBhcGkucmVkdWNlclBhdGggKyBcIi9zdWJzY3JpcHRpb25zXCI7XHJcbiAgICB2YXIgcHJldmlvdXNTdWJzY3JpcHRpb25zID0gbnVsbDtcclxuICAgIHZhciBkaXNwYXRjaFF1ZXVlZCA9IGZhbHNlO1xyXG4gICAgdmFyIF9rID0gYXBpLmludGVybmFsQWN0aW9ucywgdXBkYXRlU3Vic2NyaXB0aW9uT3B0aW9ucyA9IF9rLnVwZGF0ZVN1YnNjcmlwdGlvbk9wdGlvbnMsIHVuc3Vic2NyaWJlUXVlcnlSZXN1bHQgPSBfay51bnN1YnNjcmliZVF1ZXJ5UmVzdWx0O1xyXG4gICAgdmFyIGFjdHVhbGx5TXV0YXRlU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIChtdXRhYmxlU3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9pO1xyXG4gICAgICAgIGlmICh1cGRhdGVTdWJzY3JpcHRpb25PcHRpb25zLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgdmFyIF9qID0gYWN0aW9uLnBheWxvYWQsIHF1ZXJ5Q2FjaGVLZXkgPSBfai5xdWVyeUNhY2hlS2V5LCByZXF1ZXN0SWQgPSBfai5yZXF1ZXN0SWQsIG9wdGlvbnMgPSBfai5vcHRpb25zO1xyXG4gICAgICAgICAgICBpZiAoKF9hID0gbXV0YWJsZVN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBtdXRhYmxlU3RhdGVbcXVlcnlDYWNoZUtleV0pID09IG51bGwgPyB2b2lkIDAgOiBfYVtyZXF1ZXN0SWRdKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhYmxlU3RhdGVbcXVlcnlDYWNoZUtleV1bcmVxdWVzdElkXSA9IG9wdGlvbnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bnN1YnNjcmliZVF1ZXJ5UmVzdWx0Lm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgdmFyIF9rID0gYWN0aW9uLnBheWxvYWQsIHF1ZXJ5Q2FjaGVLZXkgPSBfay5xdWVyeUNhY2hlS2V5LCByZXF1ZXN0SWQgPSBfay5yZXF1ZXN0SWQ7XHJcbiAgICAgICAgICAgIGlmIChtdXRhYmxlU3RhdGVbcXVlcnlDYWNoZUtleV0pIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBtdXRhYmxlU3RhdGVbcXVlcnlDYWNoZUtleV1bcmVxdWVzdElkXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwaS5pbnRlcm5hbEFjdGlvbnMucmVtb3ZlUXVlcnlSZXN1bHQubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgbXV0YWJsZVN0YXRlW2FjdGlvbi5wYXlsb2FkLnF1ZXJ5Q2FjaGVLZXldO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHF1ZXJ5VGh1bmsucGVuZGluZy5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHZhciBfbCA9IGFjdGlvbi5tZXRhLCBhcmcgPSBfbC5hcmcsIHJlcXVlc3RJZCA9IF9sLnJlcXVlc3RJZDtcclxuICAgICAgICAgICAgaWYgKGFyZy5zdWJzY3JpYmUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdWJzdGF0ZSA9IChfYyA9IG11dGFibGVTdGF0ZVtfYiA9IGFyZy5xdWVyeUNhY2hlS2V5XSkgIT0gbnVsbCA/IF9jIDogbXV0YWJsZVN0YXRlW19iXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgc3Vic3RhdGVbcmVxdWVzdElkXSA9IChfZSA9IChfZCA9IGFyZy5zdWJzY3JpcHRpb25PcHRpb25zKSAhPSBudWxsID8gX2QgOiBzdWJzdGF0ZVtyZXF1ZXN0SWRdKSAhPSBudWxsID8gX2UgOiB7fTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChxdWVyeVRodW5rLnJlamVjdGVkLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgdmFyIF9tID0gYWN0aW9uLm1ldGEsIGNvbmRpdGlvbiA9IF9tLmNvbmRpdGlvbiwgYXJnID0gX20uYXJnLCByZXF1ZXN0SWQgPSBfbS5yZXF1ZXN0SWQ7XHJcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24gJiYgYXJnLnN1YnNjcmliZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1YnN0YXRlID0gKF9nID0gbXV0YWJsZVN0YXRlW19mID0gYXJnLnF1ZXJ5Q2FjaGVLZXldKSAhPSBudWxsID8gX2cgOiBtdXRhYmxlU3RhdGVbX2ZdID0ge307XHJcbiAgICAgICAgICAgICAgICBzdWJzdGF0ZVtyZXF1ZXN0SWRdID0gKF9pID0gKF9oID0gYXJnLnN1YnNjcmlwdGlvbk9wdGlvbnMpICE9IG51bGwgPyBfaCA6IHN1YnN0YXRlW3JlcXVlc3RJZF0pICE9IG51bGwgPyBfaSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uLCBtd0FwaSkge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgaWYgKCFwcmV2aW91c1N1YnNjcmlwdGlvbnMpIHtcclxuICAgICAgICAgICAgcHJldmlvdXNTdWJzY3JpcHRpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpbnRlcm5hbFN0YXRlLmN1cnJlbnRTdWJzY3JpcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcGkudXRpbC5yZXNldEFwaVN0YXRlLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcHJldmlvdXNTdWJzY3JpcHRpb25zID0gaW50ZXJuYWxTdGF0ZS5jdXJyZW50U3Vic2NyaXB0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICByZXR1cm4gW3RydWUsIGZhbHNlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwaS5pbnRlcm5hbEFjdGlvbnMuaW50ZXJuYWxfcHJvYmVTdWJzY3JpcHRpb24ubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICB2YXIgX2ogPSBhY3Rpb24ucGF5bG9hZCwgcXVlcnlDYWNoZUtleSA9IF9qLnF1ZXJ5Q2FjaGVLZXksIHJlcXVlc3RJZCA9IF9qLnJlcXVlc3RJZDtcclxuICAgICAgICAgICAgdmFyIGhhc1N1YnNjcmlwdGlvbiA9ICEhKChfYSA9IGludGVybmFsU3RhdGUuY3VycmVudFN1YnNjcmlwdGlvbnNbcXVlcnlDYWNoZUtleV0pID09IG51bGwgPyB2b2lkIDAgOiBfYVtyZXF1ZXN0SWRdKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgaGFzU3Vic2NyaXB0aW9uXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRpZE11dGF0ZSA9IGFjdHVhbGx5TXV0YXRlU3Vic2NyaXB0aW9ucyhpbnRlcm5hbFN0YXRlLmN1cnJlbnRTdWJzY3JpcHRpb25zLCBhY3Rpb24pO1xyXG4gICAgICAgIGlmIChkaWRNdXRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKCFkaXNwYXRjaFF1ZXVlZCkge1xyXG4gICAgICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2tTaGltKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U3Vic2NyaXB0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaW50ZXJuYWxTdGF0ZS5jdXJyZW50U3Vic2NyaXB0aW9ucykpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfaiA9ICgwLCBpbXBvcnRfaW1tZXI0LnByb2R1Y2VXaXRoUGF0Y2hlcykocHJldmlvdXNTdWJzY3JpcHRpb25zLCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXdTdWJzY3JpcHRpb25zOyB9KSwgcGF0Y2hlcyA9IF9qWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIG13QXBpLm5leHQoYXBpLmludGVybmFsQWN0aW9ucy5zdWJzY3JpcHRpb25zVXBkYXRlZChwYXRjaGVzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNTdWJzY3JpcHRpb25zID0gbmV3U3Vic2NyaXB0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGlzU3Vic2NyaXB0aW9uU2xpY2VBY3Rpb24gPSAhISgoX2IgPSBhY3Rpb24udHlwZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnN0YXJ0c1dpdGgoc3Vic2NyaXB0aW9uc1ByZWZpeCkpO1xyXG4gICAgICAgICAgICB2YXIgaXNBZGRpdGlvbmFsU3Vic2NyaXB0aW9uQWN0aW9uID0gcXVlcnlUaHVuay5yZWplY3RlZC5tYXRjaChhY3Rpb24pICYmIGFjdGlvbi5tZXRhLmNvbmRpdGlvbiAmJiAhIWFjdGlvbi5tZXRhLmFyZy5zdWJzY3JpYmU7XHJcbiAgICAgICAgICAgIHZhciBhY3Rpb25TaG91bGRDb250aW51ZSA9ICFpc1N1YnNjcmlwdGlvblNsaWNlQWN0aW9uICYmICFpc0FkZGl0aW9uYWxTdWJzY3JpcHRpb25BY3Rpb247XHJcbiAgICAgICAgICAgIHJldHVybiBbYWN0aW9uU2hvdWxkQ29udGludWUsIGZhbHNlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFt0cnVlLCBmYWxzZV07XHJcbiAgICB9O1xyXG59O1xyXG4vLyBzcmMvcXVlcnkvY29yZS9idWlsZE1pZGRsZXdhcmUvaW5kZXgudHNcclxuZnVuY3Rpb24gYnVpbGRNaWRkbGV3YXJlKGlucHV0KSB7XHJcbiAgICB2YXIgcmVkdWNlclBhdGggPSBpbnB1dC5yZWR1Y2VyUGF0aCwgcXVlcnlUaHVuayA9IGlucHV0LnF1ZXJ5VGh1bmssIGFwaSA9IGlucHV0LmFwaSwgY29udGV4dCA9IGlucHV0LmNvbnRleHQ7XHJcbiAgICB2YXIgYXBpVWlkID0gY29udGV4dC5hcGlVaWQ7XHJcbiAgICB2YXIgYWN0aW9ucyA9IHtcclxuICAgICAgICBpbnZhbGlkYXRlVGFnczogKDAsIGltcG9ydF90b29sa2l0MTMuY3JlYXRlQWN0aW9uKShyZWR1Y2VyUGF0aCArIFwiL2ludmFsaWRhdGVUYWdzXCIpXHJcbiAgICB9O1xyXG4gICAgdmFyIGlzVGhpc0FwaVNsaWNlQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiAhIWFjdGlvbiAmJiB0eXBlb2YgYWN0aW9uLnR5cGUgPT09IFwic3RyaW5nXCIgJiYgYWN0aW9uLnR5cGUuc3RhcnRzV2l0aChyZWR1Y2VyUGF0aCArIFwiL1wiKTtcclxuICAgIH07XHJcbiAgICB2YXIgaGFuZGxlckJ1aWxkZXJzID0gW1xyXG4gICAgICAgIGJ1aWxkRGV2Q2hlY2tIYW5kbGVyLFxyXG4gICAgICAgIGJ1aWxkQ2FjaGVDb2xsZWN0aW9uSGFuZGxlcixcclxuICAgICAgICBidWlsZEludmFsaWRhdGlvbkJ5VGFnc0hhbmRsZXIsXHJcbiAgICAgICAgYnVpbGRQb2xsaW5nSGFuZGxlcixcclxuICAgICAgICBidWlsZENhY2hlTGlmZWN5Y2xlSGFuZGxlcixcclxuICAgICAgICBidWlsZFF1ZXJ5TGlmZWN5Y2xlSGFuZGxlclxyXG4gICAgXTtcclxuICAgIHZhciBtaWRkbGV3YXJlID0gZnVuY3Rpb24gKG13QXBpKSB7XHJcbiAgICAgICAgdmFyIGluaXRpYWxpemVkMiA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBpbnRlcm5hbFN0YXRlID0ge1xyXG4gICAgICAgICAgICBjdXJyZW50U3Vic2NyaXB0aW9uczoge31cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBidWlsZGVyQXJncyA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGlucHV0KSwge1xyXG4gICAgICAgICAgICBpbnRlcm5hbFN0YXRlOiBpbnRlcm5hbFN0YXRlLFxyXG4gICAgICAgICAgICByZWZldGNoUXVlcnk6IHJlZmV0Y2hRdWVyeVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBoYW5kbGVycyA9IGhhbmRsZXJCdWlsZGVycy5tYXAoZnVuY3Rpb24gKGJ1aWxkKSB7IHJldHVybiBidWlsZChidWlsZGVyQXJncyk7IH0pO1xyXG4gICAgICAgIHZhciBiYXRjaGVkQWN0aW9uc0hhbmRsZXIgPSBidWlsZEJhdGNoZWRBY3Rpb25zSGFuZGxlcihidWlsZGVyQXJncyk7XHJcbiAgICAgICAgdmFyIHdpbmRvd0V2ZW50c0hhbmRsZXIgPSBidWlsZFdpbmRvd0V2ZW50SGFuZGxlcihidWlsZGVyQXJncyk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVkMiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbXdBcGkuZGlzcGF0Y2goYXBpLmludGVybmFsQWN0aW9ucy5taWRkbGV3YXJlUmVnaXN0ZXJlZChhcGlVaWQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtd0FwaVdpdGhOZXh0ID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbXdBcGkpLCB7IG5leHQ6IG5leHQgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVCZWZvcmUgPSBtd0FwaS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9qID0gYmF0Y2hlZEFjdGlvbnNIYW5kbGVyKGFjdGlvbiwgbXdBcGlXaXRoTmV4dCwgc3RhdGVCZWZvcmUpLCBhY3Rpb25TaG91bGRDb250aW51ZSA9IF9qWzBdLCBoYXNTdWJzY3JpcHRpb24gPSBfalsxXTtcclxuICAgICAgICAgICAgICAgIHZhciByZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uU2hvdWxkQ29udGludWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBoYXNTdWJzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoISFtd0FwaS5nZXRTdGF0ZSgpW3JlZHVjZXJQYXRoXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd0V2ZW50c0hhbmRsZXIoYWN0aW9uLCBtd0FwaVdpdGhOZXh0LCBzdGF0ZUJlZm9yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVGhpc0FwaVNsaWNlQWN0aW9uKGFjdGlvbikgfHwgY29udGV4dC5oYXNSZWh5ZHJhdGlvbkluZm8oYWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfayA9IDAsIGhhbmRsZXJzXzEgPSBoYW5kbGVyczsgX2sgPCBoYW5kbGVyc18xLmxlbmd0aDsgX2srKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBoYW5kbGVyc18xW19rXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIoYWN0aW9uLCBtd0FwaVdpdGhOZXh0LCBzdGF0ZUJlZm9yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHsgbWlkZGxld2FyZTogbWlkZGxld2FyZSwgYWN0aW9uczogYWN0aW9ucyB9O1xyXG4gICAgZnVuY3Rpb24gcmVmZXRjaFF1ZXJ5KHF1ZXJ5U3ViU3RhdGUsIHF1ZXJ5Q2FjaGVLZXksIG92ZXJyaWRlKSB7XHJcbiAgICAgICAgaWYgKG92ZXJyaWRlID09PSB2b2lkIDApIHsgb3ZlcnJpZGUgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBxdWVyeVRodW5rKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgdHlwZTogXCJxdWVyeVwiLFxyXG4gICAgICAgICAgICBlbmRwb2ludE5hbWU6IHF1ZXJ5U3ViU3RhdGUuZW5kcG9pbnROYW1lLFxyXG4gICAgICAgICAgICBvcmlnaW5hbEFyZ3M6IHF1ZXJ5U3ViU3RhdGUub3JpZ2luYWxBcmdzLFxyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IGZhbHNlLFxyXG4gICAgICAgICAgICBmb3JjZVJlZmV0Y2g6IHRydWUsXHJcbiAgICAgICAgICAgIHF1ZXJ5Q2FjaGVLZXk6IHF1ZXJ5Q2FjaGVLZXlcclxuICAgICAgICB9LCBvdmVycmlkZSkpO1xyXG4gICAgfVxyXG59XHJcbi8vIHNyYy9xdWVyeS90c0hlbHBlcnMudHNcclxuZnVuY3Rpb24gYXNzZXJ0Q2FzdCh2KSB7XHJcbn1cclxuZnVuY3Rpb24gc2FmZUFzc2lnbih0YXJnZXQpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaiA9IDE7IF9qIDwgYXJndW1lbnRzLmxlbmd0aDsgX2orKykge1xyXG4gICAgICAgIGFyZ3NbX2ogLSAxXSA9IGFyZ3VtZW50c1tfal07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgX19zcHJlYWRBcnJheShbdGFyZ2V0XSwgYXJncykpO1xyXG59XHJcbi8vIHNyYy9xdWVyeS9jb3JlL21vZHVsZS50c1xyXG52YXIgaW1wb3J0X2ltbWVyNSA9IF9fdG9Nb2R1bGUocmVxdWlyZShcImltbWVyXCIpKTtcclxudmFyIGNvcmVNb2R1bGVOYW1lID0gLyogQF9fUFVSRV9fICovIFN5bWJvbCgpO1xyXG52YXIgY29yZU1vZHVsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XHJcbiAgICBuYW1lOiBjb3JlTW9kdWxlTmFtZSxcclxuICAgIGluaXQ6IGZ1bmN0aW9uIChhcGksIF9qLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIGJhc2VRdWVyeSA9IF9qLmJhc2VRdWVyeSwgdGFnVHlwZXMgPSBfai50YWdUeXBlcywgcmVkdWNlclBhdGggPSBfai5yZWR1Y2VyUGF0aCwgc2VyaWFsaXplUXVlcnlBcmdzID0gX2ouc2VyaWFsaXplUXVlcnlBcmdzLCBrZWVwVW51c2VkRGF0YUZvciA9IF9qLmtlZXBVbnVzZWREYXRhRm9yLCByZWZldGNoT25Nb3VudE9yQXJnQ2hhbmdlID0gX2oucmVmZXRjaE9uTW91bnRPckFyZ0NoYW5nZSwgcmVmZXRjaE9uRm9jdXMgPSBfai5yZWZldGNoT25Gb2N1cywgcmVmZXRjaE9uUmVjb25uZWN0ID0gX2oucmVmZXRjaE9uUmVjb25uZWN0O1xyXG4gICAgICAgICgwLCBpbXBvcnRfaW1tZXI1LmVuYWJsZVBhdGNoZXMpKCk7XHJcbiAgICAgICAgYXNzZXJ0Q2FzdChzZXJpYWxpemVRdWVyeUFyZ3MpO1xyXG4gICAgICAgIHZhciBhc3NlcnRUYWdUeXBlID0gZnVuY3Rpb24gKHRhZykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0YWdUeXBlcy5pbmNsdWRlcyh0YWcudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVGFnIHR5cGUgJ1wiICsgdGFnLnR5cGUgKyBcIicgd2FzIHVzZWQsIGJ1dCBub3Qgc3BlY2lmaWVkIGluIGB0YWdUeXBlc2AhXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0YWc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuYXNzaWduKGFwaSwge1xyXG4gICAgICAgICAgICByZWR1Y2VyUGF0aDogcmVkdWNlclBhdGgsXHJcbiAgICAgICAgICAgIGVuZHBvaW50czoge30sXHJcbiAgICAgICAgICAgIGludGVybmFsQWN0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgb25PbmxpbmU6IG9uT25saW5lLFxyXG4gICAgICAgICAgICAgICAgb25PZmZsaW5lOiBvbk9mZmxpbmUsXHJcbiAgICAgICAgICAgICAgICBvbkZvY3VzOiBvbkZvY3VzLFxyXG4gICAgICAgICAgICAgICAgb25Gb2N1c0xvc3Q6IG9uRm9jdXNMb3N0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHV0aWw6IHt9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIF9rID0gYnVpbGRUaHVua3Moe1xyXG4gICAgICAgICAgICBiYXNlUXVlcnk6IGJhc2VRdWVyeSxcclxuICAgICAgICAgICAgcmVkdWNlclBhdGg6IHJlZHVjZXJQYXRoLFxyXG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxyXG4gICAgICAgICAgICBhcGk6IGFwaSxcclxuICAgICAgICAgICAgc2VyaWFsaXplUXVlcnlBcmdzOiBzZXJpYWxpemVRdWVyeUFyZ3MsXHJcbiAgICAgICAgICAgIGFzc2VydFRhZ1R5cGU6IGFzc2VydFRhZ1R5cGVcclxuICAgICAgICB9KSwgcXVlcnlUaHVuayA9IF9rLnF1ZXJ5VGh1bmssIG11dGF0aW9uVGh1bmsgPSBfay5tdXRhdGlvblRodW5rLCBwYXRjaFF1ZXJ5RGF0YSA9IF9rLnBhdGNoUXVlcnlEYXRhLCB1cGRhdGVRdWVyeURhdGEgPSBfay51cGRhdGVRdWVyeURhdGEsIHVwc2VydFF1ZXJ5RGF0YSA9IF9rLnVwc2VydFF1ZXJ5RGF0YSwgcHJlZmV0Y2ggPSBfay5wcmVmZXRjaCwgYnVpbGRNYXRjaFRodW5rQWN0aW9ucyA9IF9rLmJ1aWxkTWF0Y2hUaHVua0FjdGlvbnM7XHJcbiAgICAgICAgdmFyIF9sID0gYnVpbGRTbGljZSh7XHJcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXHJcbiAgICAgICAgICAgIHF1ZXJ5VGh1bms6IHF1ZXJ5VGh1bmssXHJcbiAgICAgICAgICAgIG11dGF0aW9uVGh1bms6IG11dGF0aW9uVGh1bmssXHJcbiAgICAgICAgICAgIHJlZHVjZXJQYXRoOiByZWR1Y2VyUGF0aCxcclxuICAgICAgICAgICAgYXNzZXJ0VGFnVHlwZTogYXNzZXJ0VGFnVHlwZSxcclxuICAgICAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgICAgICByZWZldGNoT25Gb2N1czogcmVmZXRjaE9uRm9jdXMsXHJcbiAgICAgICAgICAgICAgICByZWZldGNoT25SZWNvbm5lY3Q6IHJlZmV0Y2hPblJlY29ubmVjdCxcclxuICAgICAgICAgICAgICAgIHJlZmV0Y2hPbk1vdW50T3JBcmdDaGFuZ2U6IHJlZmV0Y2hPbk1vdW50T3JBcmdDaGFuZ2UsXHJcbiAgICAgICAgICAgICAgICBrZWVwVW51c2VkRGF0YUZvcjoga2VlcFVudXNlZERhdGFGb3IsXHJcbiAgICAgICAgICAgICAgICByZWR1Y2VyUGF0aDogcmVkdWNlclBhdGhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLCByZWR1Y2VyID0gX2wucmVkdWNlciwgc2xpY2VBY3Rpb25zID0gX2wuYWN0aW9ucztcclxuICAgICAgICBzYWZlQXNzaWduKGFwaS51dGlsLCB7XHJcbiAgICAgICAgICAgIHBhdGNoUXVlcnlEYXRhOiBwYXRjaFF1ZXJ5RGF0YSxcclxuICAgICAgICAgICAgdXBkYXRlUXVlcnlEYXRhOiB1cGRhdGVRdWVyeURhdGEsXHJcbiAgICAgICAgICAgIHVwc2VydFF1ZXJ5RGF0YTogdXBzZXJ0UXVlcnlEYXRhLFxyXG4gICAgICAgICAgICBwcmVmZXRjaDogcHJlZmV0Y2gsXHJcbiAgICAgICAgICAgIHJlc2V0QXBpU3RhdGU6IHNsaWNlQWN0aW9ucy5yZXNldEFwaVN0YXRlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2FmZUFzc2lnbihhcGkuaW50ZXJuYWxBY3Rpb25zLCBzbGljZUFjdGlvbnMpO1xyXG4gICAgICAgIHZhciBfbSA9IGJ1aWxkTWlkZGxld2FyZSh7XHJcbiAgICAgICAgICAgIHJlZHVjZXJQYXRoOiByZWR1Y2VyUGF0aCxcclxuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcclxuICAgICAgICAgICAgcXVlcnlUaHVuazogcXVlcnlUaHVuayxcclxuICAgICAgICAgICAgbXV0YXRpb25UaHVuazogbXV0YXRpb25UaHVuayxcclxuICAgICAgICAgICAgYXBpOiBhcGksXHJcbiAgICAgICAgICAgIGFzc2VydFRhZ1R5cGU6IGFzc2VydFRhZ1R5cGVcclxuICAgICAgICB9KSwgbWlkZGxld2FyZSA9IF9tLm1pZGRsZXdhcmUsIG1pZGRsZXdhcmVBY3Rpb25zID0gX20uYWN0aW9ucztcclxuICAgICAgICBzYWZlQXNzaWduKGFwaS51dGlsLCBtaWRkbGV3YXJlQWN0aW9ucyk7XHJcbiAgICAgICAgc2FmZUFzc2lnbihhcGksIHsgcmVkdWNlcjogcmVkdWNlciwgbWlkZGxld2FyZTogbWlkZGxld2FyZSB9KTtcclxuICAgICAgICB2YXIgX28gPSBidWlsZFNlbGVjdG9ycyh7XHJcbiAgICAgICAgICAgIHNlcmlhbGl6ZVF1ZXJ5QXJnczogc2VyaWFsaXplUXVlcnlBcmdzLFxyXG4gICAgICAgICAgICByZWR1Y2VyUGF0aDogcmVkdWNlclBhdGhcclxuICAgICAgICB9KSwgYnVpbGRRdWVyeVNlbGVjdG9yID0gX28uYnVpbGRRdWVyeVNlbGVjdG9yLCBidWlsZE11dGF0aW9uU2VsZWN0b3IgPSBfby5idWlsZE11dGF0aW9uU2VsZWN0b3IsIHNlbGVjdEludmFsaWRhdGVkQnkgPSBfby5zZWxlY3RJbnZhbGlkYXRlZEJ5O1xyXG4gICAgICAgIHNhZmVBc3NpZ24oYXBpLnV0aWwsIHsgc2VsZWN0SW52YWxpZGF0ZWRCeTogc2VsZWN0SW52YWxpZGF0ZWRCeSB9KTtcclxuICAgICAgICB2YXIgX3AgPSBidWlsZEluaXRpYXRlKHtcclxuICAgICAgICAgICAgcXVlcnlUaHVuazogcXVlcnlUaHVuayxcclxuICAgICAgICAgICAgbXV0YXRpb25UaHVuazogbXV0YXRpb25UaHVuayxcclxuICAgICAgICAgICAgYXBpOiBhcGksXHJcbiAgICAgICAgICAgIHNlcmlhbGl6ZVF1ZXJ5QXJnczogc2VyaWFsaXplUXVlcnlBcmdzLFxyXG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0XHJcbiAgICAgICAgfSksIGJ1aWxkSW5pdGlhdGVRdWVyeSA9IF9wLmJ1aWxkSW5pdGlhdGVRdWVyeSwgYnVpbGRJbml0aWF0ZU11dGF0aW9uID0gX3AuYnVpbGRJbml0aWF0ZU11dGF0aW9uLCBnZXRSdW5uaW5nTXV0YXRpb25UaHVuayA9IF9wLmdldFJ1bm5pbmdNdXRhdGlvblRodW5rLCBnZXRSdW5uaW5nTXV0YXRpb25zVGh1bmsgPSBfcC5nZXRSdW5uaW5nTXV0YXRpb25zVGh1bmssIGdldFJ1bm5pbmdRdWVyaWVzVGh1bmsgPSBfcC5nZXRSdW5uaW5nUXVlcmllc1RodW5rLCBnZXRSdW5uaW5nUXVlcnlUaHVuayA9IF9wLmdldFJ1bm5pbmdRdWVyeVRodW5rLCBnZXRSdW5uaW5nT3BlcmF0aW9uUHJvbWlzZXMgPSBfcC5nZXRSdW5uaW5nT3BlcmF0aW9uUHJvbWlzZXMsIHJlbW92YWxXYXJuaW5nID0gX3AucmVtb3ZhbFdhcm5pbmc7XHJcbiAgICAgICAgc2FmZUFzc2lnbihhcGkudXRpbCwge1xyXG4gICAgICAgICAgICBnZXRSdW5uaW5nT3BlcmF0aW9uUHJvbWlzZXM6IGdldFJ1bm5pbmdPcGVyYXRpb25Qcm9taXNlcyxcclxuICAgICAgICAgICAgZ2V0UnVubmluZ09wZXJhdGlvblByb21pc2U6IHJlbW92YWxXYXJuaW5nLFxyXG4gICAgICAgICAgICBnZXRSdW5uaW5nTXV0YXRpb25UaHVuazogZ2V0UnVubmluZ011dGF0aW9uVGh1bmssXHJcbiAgICAgICAgICAgIGdldFJ1bm5pbmdNdXRhdGlvbnNUaHVuazogZ2V0UnVubmluZ011dGF0aW9uc1RodW5rLFxyXG4gICAgICAgICAgICBnZXRSdW5uaW5nUXVlcnlUaHVuazogZ2V0UnVubmluZ1F1ZXJ5VGh1bmssXHJcbiAgICAgICAgICAgIGdldFJ1bm5pbmdRdWVyaWVzVGh1bms6IGdldFJ1bm5pbmdRdWVyaWVzVGh1bmtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuYW1lOiBjb3JlTW9kdWxlTmFtZSxcclxuICAgICAgICAgICAgaW5qZWN0RW5kcG9pbnQ6IGZ1bmN0aW9uIChlbmRwb2ludE5hbWUsIGRlZmluaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgICAgICAgICB2YXIgYW55QXBpID0gYXBpO1xyXG4gICAgICAgICAgICAgICAgKF9iID0gKF9hID0gYW55QXBpLmVuZHBvaW50cylbZW5kcG9pbnROYW1lXSkgIT0gbnVsbCA/IF9iIDogX2FbZW5kcG9pbnROYW1lXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUXVlcnlEZWZpbml0aW9uKGRlZmluaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2FmZUFzc2lnbihhbnlBcGkuZW5kcG9pbnRzW2VuZHBvaW50TmFtZV0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZW5kcG9pbnROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IGJ1aWxkUXVlcnlTZWxlY3RvcihlbmRwb2ludE5hbWUsIGRlZmluaXRpb24pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWF0ZTogYnVpbGRJbml0aWF0ZVF1ZXJ5KGVuZHBvaW50TmFtZSwgZGVmaW5pdGlvbilcclxuICAgICAgICAgICAgICAgICAgICB9LCBidWlsZE1hdGNoVGh1bmtBY3Rpb25zKHF1ZXJ5VGh1bmssIGVuZHBvaW50TmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNNdXRhdGlvbkRlZmluaXRpb24oZGVmaW5pdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzYWZlQXNzaWduKGFueUFwaS5lbmRwb2ludHNbZW5kcG9pbnROYW1lXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlbmRwb2ludE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdDogYnVpbGRNdXRhdGlvblNlbGVjdG9yKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYXRlOiBidWlsZEluaXRpYXRlTXV0YXRpb24oZW5kcG9pbnROYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGJ1aWxkTWF0Y2hUaHVua0FjdGlvbnMobXV0YXRpb25UaHVuaywgZW5kcG9pbnROYW1lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KTsgfTtcclxuLy8gc3JjL3F1ZXJ5L2NvcmUvaW5kZXgudHNcclxudmFyIGNyZWF0ZUFwaSA9IC8qIEBfX1BVUkVfXyAqLyBidWlsZENyZWF0ZUFwaShjb3JlTW9kdWxlKCkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydGstcXVlcnkuY2pzLmRldmVsb3BtZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.cjs.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/rtk-query.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryStatus: () => (/* binding */ QueryStatus),\n/* harmony export */   buildCreateApi: () => (/* binding */ buildCreateApi),\n/* harmony export */   copyWithStructuralSharing: () => (/* binding */ copyWithStructuralSharing),\n/* harmony export */   coreModule: () => (/* binding */ coreModule),\n/* harmony export */   coreModuleName: () => (/* binding */ coreModuleName),\n/* harmony export */   createApi: () => (/* binding */ createApi),\n/* harmony export */   defaultSerializeQueryArgs: () => (/* binding */ defaultSerializeQueryArgs),\n/* harmony export */   fakeBaseQuery: () => (/* binding */ fakeBaseQuery),\n/* harmony export */   fetchBaseQuery: () => (/* binding */ fetchBaseQuery),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   setupListeners: () => (/* binding */ setupListeners),\n/* harmony export */   skipSelector: () => (/* binding */ skipSelector),\n/* harmony export */   skipToken: () => (/* binding */ skipToken)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.cjs.development.js\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.esm.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/lib/index.js\");\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nvar __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = function (obj, key, value) { return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : obj[key] = value; };\r\nvar __spreadValues = function (a, b) {\r\n    for (var prop in b || (b = {}))\r\n        if (__hasOwnProp.call(b, prop))\r\n            __defNormalProp(a, prop, b[prop]);\r\n    if (__getOwnPropSymbols)\r\n        for (var _j = 0, _k = __getOwnPropSymbols(b); _j < _k.length; _j++) {\r\n            var prop = _k[_j];\r\n            if (__propIsEnum.call(b, prop))\r\n                __defNormalProp(a, prop, b[prop]);\r\n        }\r\n    return a;\r\n};\r\nvar __spreadProps = function (a, b) { return __defProps(a, __getOwnPropDescs(b)); };\r\nvar __objRest = function (source, exclude) {\r\n    var target = {};\r\n    for (var prop in source)\r\n        if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\r\n            target[prop] = source[prop];\r\n    if (source != null && __getOwnPropSymbols)\r\n        for (var _j = 0, _k = __getOwnPropSymbols(source); _j < _k.length; _j++) {\r\n            var prop = _k[_j];\r\n            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\r\n                target[prop] = source[prop];\r\n        }\r\n    return target;\r\n};\r\nvar __async = function (__this, __arguments, generator) {\r\n    return new Promise(function (resolve, reject) {\r\n        var fulfilled = function (value) {\r\n            try {\r\n                step(generator.next(value));\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        };\r\n        var rejected = function (value) {\r\n            try {\r\n                step(generator.throw(value));\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        };\r\n        var step = function (x) { return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected); };\r\n        step((generator = generator.apply(__this, __arguments)).next());\r\n    });\r\n};\r\n// src/query/core/apiState.ts\r\nvar QueryStatus;\r\n(function (QueryStatus2) {\r\n    QueryStatus2[\"uninitialized\"] = \"uninitialized\";\r\n    QueryStatus2[\"pending\"] = \"pending\";\r\n    QueryStatus2[\"fulfilled\"] = \"fulfilled\";\r\n    QueryStatus2[\"rejected\"] = \"rejected\";\r\n})(QueryStatus || (QueryStatus = {}));\r\nfunction getRequestStatusFlags(status) {\r\n    return {\r\n        status: status,\r\n        isUninitialized: status === QueryStatus.uninitialized,\r\n        isLoading: status === QueryStatus.pending,\r\n        isSuccess: status === QueryStatus.fulfilled,\r\n        isError: status === QueryStatus.rejected\r\n    };\r\n}\r\n// src/query/utils/isAbsoluteUrl.ts\r\nfunction isAbsoluteUrl(url) {\r\n    return new RegExp(\"(^|:)//\").test(url);\r\n}\r\n// src/query/utils/joinUrls.ts\r\nvar withoutTrailingSlash = function (url) { return url.replace(/\\/$/, \"\"); };\r\nvar withoutLeadingSlash = function (url) { return url.replace(/^\\//, \"\"); };\r\nfunction joinUrls(base, url) {\r\n    if (!base) {\r\n        return url;\r\n    }\r\n    if (!url) {\r\n        return base;\r\n    }\r\n    if (isAbsoluteUrl(url)) {\r\n        return url;\r\n    }\r\n    var delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\r\n    base = withoutTrailingSlash(base);\r\n    url = withoutLeadingSlash(url);\r\n    return \"\" + base + delimiter + url;\r\n}\r\n// src/query/utils/flatten.ts\r\nvar flatten = function (arr) { return [].concat.apply([], arr); };\r\n// src/query/utils/isOnline.ts\r\nfunction isOnline() {\r\n    return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\r\n}\r\n// src/query/utils/isDocumentVisible.ts\r\nfunction isDocumentVisible() {\r\n    if (typeof document === \"undefined\") {\r\n        return true;\r\n    }\r\n    return document.visibilityState !== \"hidden\";\r\n}\r\n// src/query/utils/copyWithStructuralSharing.ts\r\n\r\nvar isPlainObject = _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject;\r\nfunction copyWithStructuralSharing(oldObj, newObj) {\r\n    if (oldObj === newObj || !(isPlainObject(oldObj) && isPlainObject(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\r\n        return newObj;\r\n    }\r\n    var newKeys = Object.keys(newObj);\r\n    var oldKeys = Object.keys(oldObj);\r\n    var isSameObject = newKeys.length === oldKeys.length;\r\n    var mergeObj = Array.isArray(newObj) ? [] : {};\r\n    for (var _j = 0, newKeys_1 = newKeys; _j < newKeys_1.length; _j++) {\r\n        var key = newKeys_1[_j];\r\n        mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\r\n        if (isSameObject)\r\n            isSameObject = oldObj[key] === mergeObj[key];\r\n    }\r\n    return isSameObject ? oldObj : mergeObj;\r\n}\r\n// src/query/fetchBaseQuery.ts\r\n\r\nvar defaultFetchFn = function () {\r\n    var args = [];\r\n    for (var _j = 0; _j < arguments.length; _j++) {\r\n        args[_j] = arguments[_j];\r\n    }\r\n    return fetch.apply(void 0, args);\r\n};\r\nvar defaultValidateStatus = function (response) { return response.status >= 200 && response.status <= 299; };\r\nvar defaultIsJsonContentType = function (headers) { return /ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\"); };\r\nfunction stripUndefined(obj) {\r\n    if (!(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(obj)) {\r\n        return obj;\r\n    }\r\n    var copy = __spreadValues({}, obj);\r\n    for (var _j = 0, _k = Object.entries(copy); _j < _k.length; _j++) {\r\n        var _l = _k[_j], k = _l[0], v = _l[1];\r\n        if (v === void 0)\r\n            delete copy[k];\r\n    }\r\n    return copy;\r\n}\r\nfunction fetchBaseQuery(_a) {\r\n    var _this = this;\r\n    if (_a === void 0) { _a = {}; }\r\n    var _b = _a, baseUrl = _b.baseUrl, _j = _b.prepareHeaders, prepareHeaders = _j === void 0 ? function (x) { return x; } : _j, _k = _b.fetchFn, fetchFn = _k === void 0 ? defaultFetchFn : _k, paramsSerializer = _b.paramsSerializer, _l = _b.isJsonContentType, isJsonContentType = _l === void 0 ? defaultIsJsonContentType : _l, _m = _b.jsonContentType, jsonContentType = _m === void 0 ? \"application/json\" : _m, jsonReplacer = _b.jsonReplacer, defaultTimeout = _b.timeout, globalResponseHandler = _b.responseHandler, globalValidateStatus = _b.validateStatus, baseFetchOptions = __objRest(_b, [\r\n        \"baseUrl\",\r\n        \"prepareHeaders\",\r\n        \"fetchFn\",\r\n        \"paramsSerializer\",\r\n        \"isJsonContentType\",\r\n        \"jsonContentType\",\r\n        \"jsonReplacer\",\r\n        \"timeout\",\r\n        \"responseHandler\",\r\n        \"validateStatus\"\r\n    ]);\r\n    if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\r\n        console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\r\n    }\r\n    return function (arg, api) { return __async(_this, null, function () {\r\n        var signal, getState, extra, endpoint, forced, type, meta, _a2, url, _j, headers, _k, params, _l, responseHandler, _m, validateStatus, _o, timeout, rest, config, _p, isJsonifiable, divider, query, request, requestClone, response, timedOut, timeoutId, e_1, responseClone, resultData, responseText, handleResponseError_1, e_2;\r\n        return __generator(this, function (_q) {\r\n            switch (_q.label) {\r\n                case 0:\r\n                    signal = api.signal, getState = api.getState, extra = api.extra, endpoint = api.endpoint, forced = api.forced, type = api.type;\r\n                    _a2 = typeof arg == \"string\" ? { url: arg } : arg, url = _a2.url, _j = _a2.headers, headers = _j === void 0 ? new Headers(baseFetchOptions.headers) : _j, _k = _a2.params, params = _k === void 0 ? void 0 : _k, _l = _a2.responseHandler, responseHandler = _l === void 0 ? globalResponseHandler != null ? globalResponseHandler : \"json\" : _l, _m = _a2.validateStatus, validateStatus = _m === void 0 ? globalValidateStatus != null ? globalValidateStatus : defaultValidateStatus : _m, _o = _a2.timeout, timeout = _o === void 0 ? defaultTimeout : _o, rest = __objRest(_a2, [\r\n                        \"url\",\r\n                        \"headers\",\r\n                        \"params\",\r\n                        \"responseHandler\",\r\n                        \"validateStatus\",\r\n                        \"timeout\"\r\n                    ]);\r\n                    config = __spreadValues(__spreadProps(__spreadValues({}, baseFetchOptions), {\r\n                        signal: signal\r\n                    }), rest);\r\n                    headers = new Headers(stripUndefined(headers));\r\n                    _p = config;\r\n                    return [4 /*yield*/, prepareHeaders(headers, {\r\n                            getState: getState,\r\n                            extra: extra,\r\n                            endpoint: endpoint,\r\n                            forced: forced,\r\n                            type: type\r\n                        })];\r\n                case 1:\r\n                    _p.headers = (_q.sent()) || headers;\r\n                    isJsonifiable = function (body) { return typeof body === \"object\" && ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(body) || Array.isArray(body) || typeof body.toJSON === \"function\"); };\r\n                    if (!config.headers.has(\"content-type\") && isJsonifiable(config.body)) {\r\n                        config.headers.set(\"content-type\", jsonContentType);\r\n                    }\r\n                    if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\r\n                        config.body = JSON.stringify(config.body, jsonReplacer);\r\n                    }\r\n                    if (params) {\r\n                        divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\r\n                        query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\r\n                        url += divider + query;\r\n                    }\r\n                    url = joinUrls(baseUrl, url);\r\n                    request = new Request(url, config);\r\n                    requestClone = new Request(url, config);\r\n                    meta = { request: requestClone };\r\n                    timedOut = false, timeoutId = timeout && setTimeout(function () {\r\n                        timedOut = true;\r\n                        api.abort();\r\n                    }, timeout);\r\n                    _q.label = 2;\r\n                case 2:\r\n                    _q.trys.push([2, 4, 5, 6]);\r\n                    return [4 /*yield*/, fetchFn(request)];\r\n                case 3:\r\n                    response = _q.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 4:\r\n                    e_1 = _q.sent();\r\n                    return [2 /*return*/, {\r\n                            error: {\r\n                                status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\r\n                                error: String(e_1)\r\n                            },\r\n                            meta: meta\r\n                        }];\r\n                case 5:\r\n                    if (timeoutId)\r\n                        clearTimeout(timeoutId);\r\n                    return [7 /*endfinally*/];\r\n                case 6:\r\n                    responseClone = response.clone();\r\n                    meta.response = responseClone;\r\n                    responseText = \"\";\r\n                    _q.label = 7;\r\n                case 7:\r\n                    _q.trys.push([7, 9, , 10]);\r\n                    return [4 /*yield*/, Promise.all([\r\n                            handleResponse(response, responseHandler).then(function (r) { return resultData = r; }, function (e) { return handleResponseError_1 = e; }),\r\n                            responseClone.text().then(function (r) { return responseText = r; }, function () {\r\n                            })\r\n                        ])];\r\n                case 8:\r\n                    _q.sent();\r\n                    if (handleResponseError_1)\r\n                        throw handleResponseError_1;\r\n                    return [3 /*break*/, 10];\r\n                case 9:\r\n                    e_2 = _q.sent();\r\n                    return [2 /*return*/, {\r\n                            error: {\r\n                                status: \"PARSING_ERROR\",\r\n                                originalStatus: response.status,\r\n                                data: responseText,\r\n                                error: String(e_2)\r\n                            },\r\n                            meta: meta\r\n                        }];\r\n                case 10: return [2 /*return*/, validateStatus(response, resultData) ? {\r\n                        data: resultData,\r\n                        meta: meta\r\n                    } : {\r\n                        error: {\r\n                            status: response.status,\r\n                            data: resultData\r\n                        },\r\n                        meta: meta\r\n                    }];\r\n            }\r\n        });\r\n    }); };\r\n    function handleResponse(response, responseHandler) {\r\n        return __async(this, null, function () {\r\n            var text;\r\n            return __generator(this, function (_j) {\r\n                switch (_j.label) {\r\n                    case 0:\r\n                        if (typeof responseHandler === \"function\") {\r\n                            return [2 /*return*/, responseHandler(response)];\r\n                        }\r\n                        if (responseHandler === \"content-type\") {\r\n                            responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\r\n                        }\r\n                        if (!(responseHandler === \"json\")) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, response.text()];\r\n                    case 1:\r\n                        text = _j.sent();\r\n                        return [2 /*return*/, text.length ? JSON.parse(text) : null];\r\n                    case 2: return [2 /*return*/, response.text()];\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n// src/query/HandledError.ts\r\nvar HandledError = /** @class */ (function () {\r\n    function HandledError(value, meta) {\r\n        if (meta === void 0) { meta = void 0; }\r\n        this.value = value;\r\n        this.meta = meta;\r\n    }\r\n    return HandledError;\r\n}());\r\n// src/query/retry.ts\r\nfunction defaultBackoff(attempt, maxRetries) {\r\n    if (attempt === void 0) { attempt = 0; }\r\n    if (maxRetries === void 0) { maxRetries = 5; }\r\n    return __async(this, null, function () {\r\n        var attempts, timeout;\r\n        return __generator(this, function (_j) {\r\n            switch (_j.label) {\r\n                case 0:\r\n                    attempts = Math.min(attempt, maxRetries);\r\n                    timeout = ~~((Math.random() + 0.4) * (300 << attempts));\r\n                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(function (res) { return resolve(res); }, timeout); })];\r\n                case 1:\r\n                    _j.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction fail(e) {\r\n    throw Object.assign(new HandledError({ error: e }), {\r\n        throwImmediately: true\r\n    });\r\n}\r\nvar EMPTY_OPTIONS = {};\r\nvar retryWithBackoff = function (baseQuery, defaultOptions) { return function (args, api, extraOptions) { return __async(void 0, null, function () {\r\n    var possibleMaxRetries, maxRetries, defaultRetryCondition, options, retry2, result, e_3;\r\n    return __generator(this, function (_j) {\r\n        switch (_j.label) {\r\n            case 0:\r\n                possibleMaxRetries = [\r\n                    5,\r\n                    (defaultOptions || EMPTY_OPTIONS).maxRetries,\r\n                    (extraOptions || EMPTY_OPTIONS).maxRetries\r\n                ].filter(function (x) { return x !== void 0; });\r\n                maxRetries = possibleMaxRetries.slice(-1)[0];\r\n                defaultRetryCondition = function (_, __, _j) {\r\n                    var attempt = _j.attempt;\r\n                    return attempt <= maxRetries;\r\n                };\r\n                options = __spreadValues(__spreadValues({\r\n                    maxRetries: maxRetries,\r\n                    backoff: defaultBackoff,\r\n                    retryCondition: defaultRetryCondition\r\n                }, defaultOptions), extraOptions);\r\n                retry2 = 0;\r\n                _j.label = 1;\r\n            case 1:\r\n                if (false) {}\r\n                _j.label = 2;\r\n            case 2:\r\n                _j.trys.push([2, 4, , 6]);\r\n                return [4 /*yield*/, baseQuery(args, api, extraOptions)];\r\n            case 3:\r\n                result = _j.sent();\r\n                if (result.error) {\r\n                    throw new HandledError(result);\r\n                }\r\n                return [2 /*return*/, result];\r\n            case 4:\r\n                e_3 = _j.sent();\r\n                retry2++;\r\n                if (e_3.throwImmediately) {\r\n                    if (e_3 instanceof HandledError) {\r\n                        return [2 /*return*/, e_3.value];\r\n                    }\r\n                    throw e_3;\r\n                }\r\n                if (e_3 instanceof HandledError && !options.retryCondition(e_3.value.error, args, {\r\n                    attempt: retry2,\r\n                    baseQueryApi: api,\r\n                    extraOptions: extraOptions\r\n                })) {\r\n                    return [2 /*return*/, e_3.value];\r\n                }\r\n                return [4 /*yield*/, options.backoff(retry2, options.maxRetries)];\r\n            case 5:\r\n                _j.sent();\r\n                return [3 /*break*/, 6];\r\n            case 6: return [3 /*break*/, 1];\r\n            case 7: return [2 /*return*/];\r\n        }\r\n    });\r\n}); }; };\r\nvar retry = /* @__PURE__ */ Object.assign(retryWithBackoff, { fail: fail });\r\n// src/query/core/setupListeners.ts\r\n\r\nvar onFocus = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)(\"__rtkq/focused\");\r\nvar onFocusLost = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)(\"__rtkq/unfocused\");\r\nvar onOnline = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)(\"__rtkq/online\");\r\nvar onOffline = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)(\"__rtkq/offline\");\r\nvar initialized = false;\r\nfunction setupListeners(dispatch, customHandler) {\r\n    function defaultHandler() {\r\n        var handleFocus = function () { return dispatch(onFocus()); };\r\n        var handleFocusLost = function () { return dispatch(onFocusLost()); };\r\n        var handleOnline = function () { return dispatch(onOnline()); };\r\n        var handleOffline = function () { return dispatch(onOffline()); };\r\n        var handleVisibilityChange = function () {\r\n            if (window.document.visibilityState === \"visible\") {\r\n                handleFocus();\r\n            }\r\n            else {\r\n                handleFocusLost();\r\n            }\r\n        };\r\n        if (!initialized) {\r\n            if (typeof window !== \"undefined\" && window.addEventListener) {\r\n                window.addEventListener(\"visibilitychange\", handleVisibilityChange, false);\r\n                window.addEventListener(\"focus\", handleFocus, false);\r\n                window.addEventListener(\"online\", handleOnline, false);\r\n                window.addEventListener(\"offline\", handleOffline, false);\r\n                initialized = true;\r\n            }\r\n        }\r\n        var unsubscribe = function () {\r\n            window.removeEventListener(\"focus\", handleFocus);\r\n            window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n            window.removeEventListener(\"online\", handleOnline);\r\n            window.removeEventListener(\"offline\", handleOffline);\r\n            initialized = false;\r\n        };\r\n        return unsubscribe;\r\n    }\r\n    return customHandler ? customHandler(dispatch, { onFocus: onFocus, onFocusLost: onFocusLost, onOffline: onOffline, onOnline: onOnline }) : defaultHandler();\r\n}\r\n// src/query/core/buildSelectors.ts\r\n\r\n// src/query/endpointDefinitions.ts\r\nvar DefinitionType;\r\n(function (DefinitionType2) {\r\n    DefinitionType2[\"query\"] = \"query\";\r\n    DefinitionType2[\"mutation\"] = \"mutation\";\r\n})(DefinitionType || (DefinitionType = {}));\r\nfunction isQueryDefinition(e) {\r\n    return e.type === DefinitionType.query;\r\n}\r\nfunction isMutationDefinition(e) {\r\n    return e.type === DefinitionType.mutation;\r\n}\r\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\r\n    if (isFunction(description)) {\r\n        return description(result, error, queryArg, meta).map(expandTagDescription).map(assertTagTypes);\r\n    }\r\n    if (Array.isArray(description)) {\r\n        return description.map(expandTagDescription).map(assertTagTypes);\r\n    }\r\n    return [];\r\n}\r\nfunction isFunction(t) {\r\n    return typeof t === \"function\";\r\n}\r\nfunction expandTagDescription(description) {\r\n    return typeof description === \"string\" ? { type: description } : description;\r\n}\r\n// src/query/core/buildSlice.ts\r\n\r\n// src/query/utils/isNotNullish.ts\r\nfunction isNotNullish(v) {\r\n    return v != null;\r\n}\r\n// src/query/core/buildInitiate.ts\r\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\r\nvar isUpsertQuery = function (arg) { return typeof arg[forceQueryFnSymbol] === \"function\"; };\r\nfunction buildInitiate(_j) {\r\n    var serializeQueryArgs = _j.serializeQueryArgs, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, api = _j.api, context = _j.context;\r\n    var runningQueries = new Map();\r\n    var runningMutations = new Map();\r\n    var _k = api.internalActions, unsubscribeQueryResult = _k.unsubscribeQueryResult, removeMutationResult = _k.removeMutationResult, updateSubscriptionOptions = _k.updateSubscriptionOptions;\r\n    return {\r\n        buildInitiateQuery: buildInitiateQuery,\r\n        buildInitiateMutation: buildInitiateMutation,\r\n        getRunningQueryThunk: getRunningQueryThunk,\r\n        getRunningMutationThunk: getRunningMutationThunk,\r\n        getRunningQueriesThunk: getRunningQueriesThunk,\r\n        getRunningMutationsThunk: getRunningMutationsThunk,\r\n        getRunningOperationPromises: getRunningOperationPromises,\r\n        removalWarning: removalWarning\r\n    };\r\n    function removalWarning() {\r\n        throw new Error(\"This method had to be removed due to a conceptual bug in RTK.\\n       Please see https://github.com/reduxjs/redux-toolkit/pull/2481 for details.\\n       See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for new guidance on SSR.\");\r\n    }\r\n    function getRunningOperationPromises() {\r\n        if (typeof process !== \"undefined\" && \"development\" === \"development\") {\r\n            removalWarning();\r\n        }\r\n        else {\r\n            var extract = function (v) { return Array.from(v.values()).flatMap(function (queriesForStore) { return queriesForStore ? Object.values(queriesForStore) : []; }); };\r\n            return __spreadArray(__spreadArray([], extract(runningQueries)), extract(runningMutations)).filter(isNotNullish);\r\n        }\r\n    }\r\n    function getRunningQueryThunk(endpointName, queryArgs) {\r\n        return function (dispatch) {\r\n            var _a;\r\n            var endpointDefinition = context.endpointDefinitions[endpointName];\r\n            var queryCacheKey = serializeQueryArgs({\r\n                queryArgs: queryArgs,\r\n                endpointDefinition: endpointDefinition,\r\n                endpointName: endpointName\r\n            });\r\n            return (_a = runningQueries.get(dispatch)) == null ? void 0 : _a[queryCacheKey];\r\n        };\r\n    }\r\n    function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\r\n        return function (dispatch) {\r\n            var _a;\r\n            return (_a = runningMutations.get(dispatch)) == null ? void 0 : _a[fixedCacheKeyOrRequestId];\r\n        };\r\n    }\r\n    function getRunningQueriesThunk() {\r\n        return function (dispatch) { return Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish); };\r\n    }\r\n    function getRunningMutationsThunk() {\r\n        return function (dispatch) { return Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish); };\r\n    }\r\n    function middlewareWarning(dispatch) {\r\n        if (true) {\r\n            if (middlewareWarning.triggered)\r\n                return;\r\n            var registered = dispatch(api.internalActions.internal_probeSubscription({\r\n                queryCacheKey: \"DOES_NOT_EXIST\",\r\n                requestId: \"DUMMY_REQUEST_ID\"\r\n            }));\r\n            middlewareWarning.triggered = true;\r\n            if (typeof registered !== \"boolean\") {\r\n                throw new Error(\"Warning: Middleware for RTK-Query API at reducerPath \\\"\" + api.reducerPath + \"\\\" has not been added to the store.\\nYou must add the middleware for RTK-Query to function correctly!\");\r\n            }\r\n        }\r\n    }\r\n    function buildInitiateQuery(endpointName, endpointDefinition) {\r\n        var queryAction = function (arg, _j) {\r\n            var _k = _j === void 0 ? {} : _j, _l = _k.subscribe, subscribe = _l === void 0 ? true : _l, forceRefetch = _k.forceRefetch, subscriptionOptions = _k.subscriptionOptions, _m = forceQueryFnSymbol, forceQueryFn = _k[_m];\r\n            return function (dispatch, getState) {\r\n                var _j;\r\n                var _a;\r\n                var queryCacheKey = serializeQueryArgs({\r\n                    queryArgs: arg,\r\n                    endpointDefinition: endpointDefinition,\r\n                    endpointName: endpointName\r\n                });\r\n                var thunk = queryThunk((_j = {\r\n                        type: \"query\",\r\n                        subscribe: subscribe,\r\n                        forceRefetch: forceRefetch,\r\n                        subscriptionOptions: subscriptionOptions,\r\n                        endpointName: endpointName,\r\n                        originalArgs: arg,\r\n                        queryCacheKey: queryCacheKey\r\n                    },\r\n                    _j[forceQueryFnSymbol] = forceQueryFn,\r\n                    _j));\r\n                var selector = api.endpoints[endpointName].select(arg);\r\n                var thunkResult = dispatch(thunk);\r\n                var stateAfter = selector(getState());\r\n                middlewareWarning(dispatch);\r\n                var requestId = thunkResult.requestId, abort = thunkResult.abort;\r\n                var skippedSynchronously = stateAfter.requestId !== requestId;\r\n                var runningQuery = (_a = runningQueries.get(dispatch)) == null ? void 0 : _a[queryCacheKey];\r\n                var selectFromState = function () { return selector(getState()); };\r\n                var statePromise = Object.assign(forceQueryFn ? thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ? Promise.resolve(stateAfter) : Promise.all([runningQuery, thunkResult]).then(selectFromState), {\r\n                    arg: arg,\r\n                    requestId: requestId,\r\n                    subscriptionOptions: subscriptionOptions,\r\n                    queryCacheKey: queryCacheKey,\r\n                    abort: abort,\r\n                    unwrap: function () {\r\n                        return __async(this, null, function () {\r\n                            var result;\r\n                            return __generator(this, function (_j) {\r\n                                switch (_j.label) {\r\n                                    case 0: return [4 /*yield*/, statePromise];\r\n                                    case 1:\r\n                                        result = _j.sent();\r\n                                        if (result.isError) {\r\n                                            throw result.error;\r\n                                        }\r\n                                        return [2 /*return*/, result.data];\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    refetch: function () { return dispatch(queryAction(arg, { subscribe: false, forceRefetch: true })); },\r\n                    unsubscribe: function () {\r\n                        if (subscribe)\r\n                            dispatch(unsubscribeQueryResult({\r\n                                queryCacheKey: queryCacheKey,\r\n                                requestId: requestId\r\n                            }));\r\n                    },\r\n                    updateSubscriptionOptions: function (options) {\r\n                        statePromise.subscriptionOptions = options;\r\n                        dispatch(updateSubscriptionOptions({\r\n                            endpointName: endpointName,\r\n                            requestId: requestId,\r\n                            queryCacheKey: queryCacheKey,\r\n                            options: options\r\n                        }));\r\n                    }\r\n                });\r\n                if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\r\n                    var running_1 = runningQueries.get(dispatch) || {};\r\n                    running_1[queryCacheKey] = statePromise;\r\n                    runningQueries.set(dispatch, running_1);\r\n                    statePromise.then(function () {\r\n                        delete running_1[queryCacheKey];\r\n                        if (!Object.keys(running_1).length) {\r\n                            runningQueries.delete(dispatch);\r\n                        }\r\n                    });\r\n                }\r\n                return statePromise;\r\n            };\r\n        };\r\n        return queryAction;\r\n    }\r\n    function buildInitiateMutation(endpointName) {\r\n        return function (arg, _j) {\r\n            var _k = _j === void 0 ? {} : _j, _l = _k.track, track = _l === void 0 ? true : _l, fixedCacheKey = _k.fixedCacheKey;\r\n            return function (dispatch, getState) {\r\n                var thunk = mutationThunk({\r\n                    type: \"mutation\",\r\n                    endpointName: endpointName,\r\n                    originalArgs: arg,\r\n                    track: track,\r\n                    fixedCacheKey: fixedCacheKey\r\n                });\r\n                var thunkResult = dispatch(thunk);\r\n                middlewareWarning(dispatch);\r\n                var requestId = thunkResult.requestId, abort = thunkResult.abort, unwrap = thunkResult.unwrap;\r\n                var returnValuePromise = thunkResult.unwrap().then(function (data) { return ({ data: data }); }).catch(function (error) { return ({ error: error }); });\r\n                var reset = function () {\r\n                    dispatch(removeMutationResult({ requestId: requestId, fixedCacheKey: fixedCacheKey }));\r\n                };\r\n                var ret = Object.assign(returnValuePromise, {\r\n                    arg: thunkResult.arg,\r\n                    requestId: requestId,\r\n                    abort: abort,\r\n                    unwrap: unwrap,\r\n                    unsubscribe: reset,\r\n                    reset: reset\r\n                });\r\n                var running = runningMutations.get(dispatch) || {};\r\n                runningMutations.set(dispatch, running);\r\n                running[requestId] = ret;\r\n                ret.then(function () {\r\n                    delete running[requestId];\r\n                    if (!Object.keys(running).length) {\r\n                        runningMutations.delete(dispatch);\r\n                    }\r\n                });\r\n                if (fixedCacheKey) {\r\n                    running[fixedCacheKey] = ret;\r\n                    ret.then(function () {\r\n                        if (running[fixedCacheKey] === ret) {\r\n                            delete running[fixedCacheKey];\r\n                            if (!Object.keys(running).length) {\r\n                                runningMutations.delete(dispatch);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                return ret;\r\n            };\r\n        };\r\n    }\r\n}\r\n// src/query/core/buildThunks.ts\r\n\r\n\r\n\r\nfunction defaultTransformResponse(baseQueryReturnValue) {\r\n    return baseQueryReturnValue;\r\n}\r\nfunction buildThunks(_j) {\r\n    var _this = this;\r\n    var reducerPath = _j.reducerPath, baseQuery = _j.baseQuery, endpointDefinitions = _j.context.endpointDefinitions, serializeQueryArgs = _j.serializeQueryArgs, api = _j.api, assertTagType = _j.assertTagType;\r\n    var patchQueryData = function (endpointName, args, patches, updateProvided) { return function (dispatch, getState) {\r\n        var endpointDefinition = endpointDefinitions[endpointName];\r\n        var queryCacheKey = serializeQueryArgs({\r\n            queryArgs: args,\r\n            endpointDefinition: endpointDefinition,\r\n            endpointName: endpointName\r\n        });\r\n        dispatch(api.internalActions.queryResultPatched({ queryCacheKey: queryCacheKey, patches: patches }));\r\n        if (!updateProvided) {\r\n            return;\r\n        }\r\n        var newValue = api.endpoints[endpointName].select(args)(getState());\r\n        var providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, args, {}, assertTagType);\r\n        dispatch(api.internalActions.updateProvidedBy({ queryCacheKey: queryCacheKey, providedTags: providedTags }));\r\n    }; };\r\n    var updateQueryData = function (endpointName, args, updateRecipe, updateProvided) {\r\n        if (updateProvided === void 0) { updateProvided = true; }\r\n        return function (dispatch, getState) {\r\n            var _j, _k;\r\n            var endpointDefinition = api.endpoints[endpointName];\r\n            var currentState = endpointDefinition.select(args)(getState());\r\n            var ret = {\r\n                patches: [],\r\n                inversePatches: [],\r\n                undo: function () { return dispatch(api.util.patchQueryData(endpointName, args, ret.inversePatches, updateProvided)); }\r\n            };\r\n            if (currentState.status === QueryStatus.uninitialized) {\r\n                return ret;\r\n            }\r\n            var newValue;\r\n            if (\"data\" in currentState) {\r\n                if ((0,immer__WEBPACK_IMPORTED_MODULE_1__.isDraftable)(currentState.data)) {\r\n                    var _l = (0,immer__WEBPACK_IMPORTED_MODULE_1__.produceWithPatches)(currentState.data, updateRecipe), value = _l[0], patches = _l[1], inversePatches = _l[2];\r\n                    (_j = ret.patches).push.apply(_j, patches);\r\n                    (_k = ret.inversePatches).push.apply(_k, inversePatches);\r\n                    newValue = value;\r\n                }\r\n                else {\r\n                    newValue = updateRecipe(currentState.data);\r\n                    ret.patches.push({ op: \"replace\", path: [], value: newValue });\r\n                    ret.inversePatches.push({\r\n                        op: \"replace\",\r\n                        path: [],\r\n                        value: currentState.data\r\n                    });\r\n                }\r\n            }\r\n            dispatch(api.util.patchQueryData(endpointName, args, ret.patches, updateProvided));\r\n            return ret;\r\n        };\r\n    };\r\n    var upsertQueryData = function (endpointName, args, value) { return function (dispatch) {\r\n        var _j;\r\n        return dispatch(api.endpoints[endpointName].initiate(args, (_j = {\r\n                subscribe: false,\r\n                forceRefetch: true\r\n            },\r\n            _j[forceQueryFnSymbol] = function () { return ({\r\n                data: value\r\n            }); },\r\n            _j)));\r\n    }; };\r\n    var executeEndpoint = function (_0, _1) { return __async(_this, [_0, _1], function (arg, _j) {\r\n        var endpointDefinition, transformResponse, result, baseQueryApi_1, forceQueryFn, what, err, _k, _l, key, _m, error_1, catchedError, transformErrorResponse, _o, e_4;\r\n        var _p, _q;\r\n        var signal = _j.signal, abort = _j.abort, rejectWithValue = _j.rejectWithValue, fulfillWithValue = _j.fulfillWithValue, dispatch = _j.dispatch, getState = _j.getState, extra = _j.extra;\r\n        return __generator(this, function (_r) {\r\n            switch (_r.label) {\r\n                case 0:\r\n                    endpointDefinition = endpointDefinitions[arg.endpointName];\r\n                    _r.label = 1;\r\n                case 1:\r\n                    _r.trys.push([1, 8, , 13]);\r\n                    transformResponse = defaultTransformResponse;\r\n                    result = void 0;\r\n                    baseQueryApi_1 = {\r\n                        signal: signal,\r\n                        abort: abort,\r\n                        dispatch: dispatch,\r\n                        getState: getState,\r\n                        extra: extra,\r\n                        endpoint: arg.endpointName,\r\n                        type: arg.type,\r\n                        forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0\r\n                    };\r\n                    forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\r\n                    if (!forceQueryFn) return [3 /*break*/, 2];\r\n                    result = forceQueryFn();\r\n                    return [3 /*break*/, 6];\r\n                case 2:\r\n                    if (!endpointDefinition.query) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi_1, endpointDefinition.extraOptions)];\r\n                case 3:\r\n                    result = _r.sent();\r\n                    if (endpointDefinition.transformResponse) {\r\n                        transformResponse = endpointDefinition.transformResponse;\r\n                    }\r\n                    return [3 /*break*/, 6];\r\n                case 4: return [4 /*yield*/, endpointDefinition.queryFn(arg.originalArgs, baseQueryApi_1, endpointDefinition.extraOptions, function (arg2) { return baseQuery(arg2, baseQueryApi_1, endpointDefinition.extraOptions); })];\r\n                case 5:\r\n                    result = _r.sent();\r\n                    _r.label = 6;\r\n                case 6:\r\n                    if (typeof process !== \"undefined\" && \"development\" === \"development\") {\r\n                        what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\r\n                        err = void 0;\r\n                        if (!result) {\r\n                            err = what + \" did not return anything.\";\r\n                        }\r\n                        else if (typeof result !== \"object\") {\r\n                            err = what + \" did not return an object.\";\r\n                        }\r\n                        else if (result.error && result.data) {\r\n                            err = what + \" returned an object containing both `error` and `result`.\";\r\n                        }\r\n                        else if (result.error === void 0 && result.data === void 0) {\r\n                            err = what + \" returned an object containing neither a valid `error` and `result`. At least one of them should not be `undefined`\";\r\n                        }\r\n                        else {\r\n                            for (_k = 0, _l = Object.keys(result); _k < _l.length; _k++) {\r\n                                key = _l[_k];\r\n                                if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\r\n                                    err = \"The object returned by \" + what + \" has the unknown property \" + key + \".\";\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (err) {\r\n                            console.error(\"Error encountered handling the endpoint \" + arg.endpointName + \".\\n              \" + err + \"\\n              It needs to return an object with either the shape `{ data: <value> }` or `{ error: <value> }` that may contain an optional `meta` property.\\n              Object returned was:\", result);\r\n                        }\r\n                    }\r\n                    if (result.error)\r\n                        throw new HandledError(result.error, result.meta);\r\n                    _m = fulfillWithValue;\r\n                    return [4 /*yield*/, transformResponse(result.data, result.meta, arg.originalArgs)];\r\n                case 7: return [2 /*return*/, _m.apply(void 0, [_r.sent(), (_p = {\r\n                                fulfilledTimeStamp: Date.now(),\r\n                                baseQueryMeta: result.meta\r\n                            },\r\n                            _p[_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.SHOULD_AUTOBATCH] = true,\r\n                            _p)])];\r\n                case 8:\r\n                    error_1 = _r.sent();\r\n                    catchedError = error_1;\r\n                    if (!(catchedError instanceof HandledError)) return [3 /*break*/, 12];\r\n                    transformErrorResponse = defaultTransformResponse;\r\n                    if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {\r\n                        transformErrorResponse = endpointDefinition.transformErrorResponse;\r\n                    }\r\n                    _r.label = 9;\r\n                case 9:\r\n                    _r.trys.push([9, 11, , 12]);\r\n                    _o = rejectWithValue;\r\n                    return [4 /*yield*/, transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs)];\r\n                case 10: return [2 /*return*/, _o.apply(void 0, [_r.sent(), (_q = { baseQueryMeta: catchedError.meta }, _q[_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.SHOULD_AUTOBATCH] = true, _q)])];\r\n                case 11:\r\n                    e_4 = _r.sent();\r\n                    catchedError = e_4;\r\n                    return [3 /*break*/, 12];\r\n                case 12:\r\n                    if (typeof process !== \"undefined\" && \"development\" !== \"production\") {\r\n                        console.error(\"An unhandled error occurred processing a request for the endpoint \\\"\" + arg.endpointName + \"\\\".\\nIn the case of an unhandled error, no tags will be \\\"provided\\\" or \\\"invalidated\\\".\", catchedError);\r\n                    }\r\n                    else {\r\n                        console.error(catchedError);\r\n                    }\r\n                    throw catchedError;\r\n                case 13: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); };\r\n    function isForcedQuery(arg, state) {\r\n        var _a, _b, _c, _d;\r\n        var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[arg.queryCacheKey];\r\n        var baseFetchOnMountOrArgChange = (_c = state[reducerPath]) == null ? void 0 : _c.config.refetchOnMountOrArgChange;\r\n        var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\r\n        var refetchVal = (_d = arg.forceRefetch) != null ? _d : arg.subscribe && baseFetchOnMountOrArgChange;\r\n        if (refetchVal) {\r\n            return refetchVal === true || (Number(new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\r\n        }\r\n        return false;\r\n    }\r\n    var queryThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)(reducerPath + \"/executeQuery\", executeEndpoint, {\r\n        getPendingMeta: function () {\r\n            var _j;\r\n            return _j = { startedTimeStamp: Date.now() }, _j[_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.SHOULD_AUTOBATCH] = true, _j;\r\n        },\r\n        condition: function (queryThunkArgs, _j) {\r\n            var getState = _j.getState;\r\n            var _a, _b, _c;\r\n            var state = getState();\r\n            var requestState = (_b = (_a = state[reducerPath]) == null ? void 0 : _a.queries) == null ? void 0 : _b[queryThunkArgs.queryCacheKey];\r\n            var fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;\r\n            var currentArg = queryThunkArgs.originalArgs;\r\n            var previousArg = requestState == null ? void 0 : requestState.originalArgs;\r\n            var endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];\r\n            if (isUpsertQuery(queryThunkArgs)) {\r\n                return true;\r\n            }\r\n            if ((requestState == null ? void 0 : requestState.status) === \"pending\") {\r\n                return false;\r\n            }\r\n            if (isForcedQuery(queryThunkArgs, state)) {\r\n                return true;\r\n            }\r\n            if (isQueryDefinition(endpointDefinition) && ((_c = endpointDefinition == null ? void 0 : endpointDefinition.forceRefetch) == null ? void 0 : _c.call(endpointDefinition, {\r\n                currentArg: currentArg,\r\n                previousArg: previousArg,\r\n                endpointState: requestState,\r\n                state: state\r\n            }))) {\r\n                return true;\r\n            }\r\n            if (fulfilledVal) {\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        dispatchConditionRejection: true\r\n    });\r\n    var mutationThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAsyncThunk)(reducerPath + \"/executeMutation\", executeEndpoint, {\r\n        getPendingMeta: function () {\r\n            var _j;\r\n            return _j = { startedTimeStamp: Date.now() }, _j[_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.SHOULD_AUTOBATCH] = true, _j;\r\n        }\r\n    });\r\n    var hasTheForce = function (options) { return \"force\" in options; };\r\n    var hasMaxAge = function (options) { return \"ifOlderThan\" in options; };\r\n    var prefetch = function (endpointName, arg, options) { return function (dispatch, getState) {\r\n        var force = hasTheForce(options) && options.force;\r\n        var maxAge = hasMaxAge(options) && options.ifOlderThan;\r\n        var queryAction = function (force2) {\r\n            if (force2 === void 0) { force2 = true; }\r\n            return api.endpoints[endpointName].initiate(arg, { forceRefetch: force2 });\r\n        };\r\n        var latestStateValue = api.endpoints[endpointName].select(arg)(getState());\r\n        if (force) {\r\n            dispatch(queryAction());\r\n        }\r\n        else if (maxAge) {\r\n            var lastFulfilledTs = latestStateValue == null ? void 0 : latestStateValue.fulfilledTimeStamp;\r\n            if (!lastFulfilledTs) {\r\n                dispatch(queryAction());\r\n                return;\r\n            }\r\n            var shouldRetrigger = (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\r\n            if (shouldRetrigger) {\r\n                dispatch(queryAction());\r\n            }\r\n        }\r\n        else {\r\n            dispatch(queryAction(false));\r\n        }\r\n    }; };\r\n    function matchesEndpoint(endpointName) {\r\n        return function (action) {\r\n            var _a, _b;\r\n            return ((_b = (_a = action == null ? void 0 : action.meta) == null ? void 0 : _a.arg) == null ? void 0 : _b.endpointName) === endpointName;\r\n        };\r\n    }\r\n    function buildMatchThunkActions(thunk, endpointName) {\r\n        return {\r\n            matchPending: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPending)(thunk), matchesEndpoint(endpointName)),\r\n            matchFulfilled: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isFulfilled)(thunk), matchesEndpoint(endpointName)),\r\n            matchRejected: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isRejected)(thunk), matchesEndpoint(endpointName))\r\n        };\r\n    }\r\n    return {\r\n        queryThunk: queryThunk,\r\n        mutationThunk: mutationThunk,\r\n        prefetch: prefetch,\r\n        updateQueryData: updateQueryData,\r\n        upsertQueryData: upsertQueryData,\r\n        patchQueryData: patchQueryData,\r\n        buildMatchThunkActions: buildMatchThunkActions\r\n    };\r\n}\r\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\r\n    return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isFulfilled)(action) ? action.payload : void 0, (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isRejectedWithValue)(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\r\n}\r\n// src/query/core/buildSlice.ts\r\n\r\n\r\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\r\n    var substate = state[queryCacheKey];\r\n    if (substate) {\r\n        update(substate);\r\n    }\r\n}\r\nfunction getMutationCacheKey(id) {\r\n    var _a;\r\n    return (_a = \"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) != null ? _a : id.requestId;\r\n}\r\nfunction updateMutationSubstateIfExists(state, id, update) {\r\n    var substate = state[getMutationCacheKey(id)];\r\n    if (substate) {\r\n        update(substate);\r\n    }\r\n}\r\nvar initialState = {};\r\nfunction buildSlice(_j) {\r\n    var reducerPath = _j.reducerPath, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, _k = _j.context, definitions = _k.endpointDefinitions, apiUid = _k.apiUid, extractRehydrationInfo = _k.extractRehydrationInfo, hasRehydrationInfo = _k.hasRehydrationInfo, assertTagType = _j.assertTagType, config = _j.config;\r\n    var resetApiState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)(reducerPath + \"/resetApiState\");\r\n    var querySlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\r\n        name: reducerPath + \"/queries\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeQueryResult: {\r\n                reducer: function (draft, _j) {\r\n                    var queryCacheKey = _j.payload.queryCacheKey;\r\n                    delete draft[queryCacheKey];\r\n                },\r\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.prepareAutoBatched)()\r\n            },\r\n            queryResultPatched: {\r\n                reducer: function (draft, _j) {\r\n                    var _k = _j.payload, queryCacheKey = _k.queryCacheKey, patches = _k.patches;\r\n                    updateQuerySubstateIfExists(draft, queryCacheKey, function (substate) {\r\n                        substate.data = (0,immer__WEBPACK_IMPORTED_MODULE_1__.applyPatches)(substate.data, patches.concat());\r\n                    });\r\n                },\r\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.prepareAutoBatched)()\r\n            }\r\n        },\r\n        extraReducers: function (builder) {\r\n            builder.addCase(queryThunk.pending, function (draft, _j) {\r\n                var meta = _j.meta, arg = _j.meta.arg;\r\n                var _a, _b;\r\n                var upserting = isUpsertQuery(arg);\r\n                if (arg.subscribe || upserting) {\r\n                    (_b = draft[_a = arg.queryCacheKey]) != null ? _b : draft[_a] = {\r\n                        status: QueryStatus.uninitialized,\r\n                        endpointName: arg.endpointName\r\n                    };\r\n                }\r\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\r\n                    substate.status = QueryStatus.pending;\r\n                    substate.requestId = upserting && substate.requestId ? substate.requestId : meta.requestId;\r\n                    if (arg.originalArgs !== void 0) {\r\n                        substate.originalArgs = arg.originalArgs;\r\n                    }\r\n                    substate.startedTimeStamp = meta.startedTimeStamp;\r\n                });\r\n            }).addCase(queryThunk.fulfilled, function (draft, _j) {\r\n                var meta = _j.meta, payload = _j.payload;\r\n                updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, function (substate) {\r\n                    var _a;\r\n                    if (substate.requestId !== meta.requestId && !isUpsertQuery(meta.arg))\r\n                        return;\r\n                    var merge = definitions[meta.arg.endpointName].merge;\r\n                    substate.status = QueryStatus.fulfilled;\r\n                    if (merge) {\r\n                        if (substate.data !== void 0) {\r\n                            var fulfilledTimeStamp_1 = meta.fulfilledTimeStamp, arg_1 = meta.arg, baseQueryMeta_1 = meta.baseQueryMeta, requestId_1 = meta.requestId;\r\n                            var newData = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createNextState)(substate.data, function (draftSubstateData) {\r\n                                return merge(draftSubstateData, payload, {\r\n                                    arg: arg_1.originalArgs,\r\n                                    baseQueryMeta: baseQueryMeta_1,\r\n                                    fulfilledTimeStamp: fulfilledTimeStamp_1,\r\n                                    requestId: requestId_1\r\n                                });\r\n                            });\r\n                            substate.data = newData;\r\n                        }\r\n                        else {\r\n                            substate.data = payload;\r\n                        }\r\n                    }\r\n                    else {\r\n                        substate.data = ((_a = definitions[meta.arg.endpointName].structuralSharing) != null ? _a : true) ? copyWithStructuralSharing((0,immer__WEBPACK_IMPORTED_MODULE_1__.isDraft)(substate.data) ? (0,immer__WEBPACK_IMPORTED_MODULE_1__.original)(substate.data) : substate.data, payload) : payload;\r\n                    }\r\n                    delete substate.error;\r\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\r\n                });\r\n            }).addCase(queryThunk.rejected, function (draft, _j) {\r\n                var _k = _j.meta, condition = _k.condition, arg = _k.arg, requestId = _k.requestId, error = _j.error, payload = _j.payload;\r\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, function (substate) {\r\n                    if (condition) {\r\n                    }\r\n                    else {\r\n                        if (substate.requestId !== requestId)\r\n                            return;\r\n                        substate.status = QueryStatus.rejected;\r\n                        substate.error = payload != null ? payload : error;\r\n                    }\r\n                });\r\n            }).addMatcher(hasRehydrationInfo, function (draft, action) {\r\n                var queries = extractRehydrationInfo(action).queries;\r\n                for (var _j = 0, _k = Object.entries(queries); _j < _k.length; _j++) {\r\n                    var _l = _k[_j], key = _l[0], entry = _l[1];\r\n                    if ((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) {\r\n                        draft[key] = entry;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    var mutationSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\r\n        name: reducerPath + \"/mutations\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeMutationResult: {\r\n                reducer: function (draft, _j) {\r\n                    var payload = _j.payload;\r\n                    var cacheKey = getMutationCacheKey(payload);\r\n                    if (cacheKey in draft) {\r\n                        delete draft[cacheKey];\r\n                    }\r\n                },\r\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.prepareAutoBatched)()\r\n            }\r\n        },\r\n        extraReducers: function (builder) {\r\n            builder.addCase(mutationThunk.pending, function (draft, _j) {\r\n                var meta = _j.meta, _k = _j.meta, requestId = _k.requestId, arg = _k.arg, startedTimeStamp = _k.startedTimeStamp;\r\n                if (!arg.track)\r\n                    return;\r\n                draft[getMutationCacheKey(meta)] = {\r\n                    requestId: requestId,\r\n                    status: QueryStatus.pending,\r\n                    endpointName: arg.endpointName,\r\n                    startedTimeStamp: startedTimeStamp\r\n                };\r\n            }).addCase(mutationThunk.fulfilled, function (draft, _j) {\r\n                var payload = _j.payload, meta = _j.meta;\r\n                if (!meta.arg.track)\r\n                    return;\r\n                updateMutationSubstateIfExists(draft, meta, function (substate) {\r\n                    if (substate.requestId !== meta.requestId)\r\n                        return;\r\n                    substate.status = QueryStatus.fulfilled;\r\n                    substate.data = payload;\r\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\r\n                });\r\n            }).addCase(mutationThunk.rejected, function (draft, _j) {\r\n                var payload = _j.payload, error = _j.error, meta = _j.meta;\r\n                if (!meta.arg.track)\r\n                    return;\r\n                updateMutationSubstateIfExists(draft, meta, function (substate) {\r\n                    if (substate.requestId !== meta.requestId)\r\n                        return;\r\n                    substate.status = QueryStatus.rejected;\r\n                    substate.error = payload != null ? payload : error;\r\n                });\r\n            }).addMatcher(hasRehydrationInfo, function (draft, action) {\r\n                var mutations = extractRehydrationInfo(action).mutations;\r\n                for (var _j = 0, _k = Object.entries(mutations); _j < _k.length; _j++) {\r\n                    var _l = _k[_j], key = _l[0], entry = _l[1];\r\n                    if (((entry == null ? void 0 : entry.status) === QueryStatus.fulfilled || (entry == null ? void 0 : entry.status) === QueryStatus.rejected) && key !== (entry == null ? void 0 : entry.requestId)) {\r\n                        draft[key] = entry;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    var invalidationSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\r\n        name: reducerPath + \"/invalidation\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            updateProvidedBy: {\r\n                reducer: function (draft, action) {\r\n                    var _a, _b, _c, _d;\r\n                    var _j = action.payload, queryCacheKey = _j.queryCacheKey, providedTags = _j.providedTags;\r\n                    for (var _k = 0, _l = Object.values(draft); _k < _l.length; _k++) {\r\n                        var tagTypeSubscriptions = _l[_k];\r\n                        for (var _m = 0, _o = Object.values(tagTypeSubscriptions); _m < _o.length; _m++) {\r\n                            var idSubscriptions = _o[_m];\r\n                            var foundAt = idSubscriptions.indexOf(queryCacheKey);\r\n                            if (foundAt !== -1) {\r\n                                idSubscriptions.splice(foundAt, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    for (var _p = 0, providedTags_1 = providedTags; _p < providedTags_1.length; _p++) {\r\n                        var _q = providedTags_1[_p], type = _q.type, id = _q.id;\r\n                        var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\r\n                        var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\r\n                        if (!alreadySubscribed) {\r\n                            subscribedQueries.push(queryCacheKey);\r\n                        }\r\n                    }\r\n                },\r\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.prepareAutoBatched)()\r\n            }\r\n        },\r\n        extraReducers: function (builder) {\r\n            builder.addCase(querySlice.actions.removeQueryResult, function (draft, _j) {\r\n                var queryCacheKey = _j.payload.queryCacheKey;\r\n                for (var _k = 0, _l = Object.values(draft); _k < _l.length; _k++) {\r\n                    var tagTypeSubscriptions = _l[_k];\r\n                    for (var _m = 0, _o = Object.values(tagTypeSubscriptions); _m < _o.length; _m++) {\r\n                        var idSubscriptions = _o[_m];\r\n                        var foundAt = idSubscriptions.indexOf(queryCacheKey);\r\n                        if (foundAt !== -1) {\r\n                            idSubscriptions.splice(foundAt, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }).addMatcher(hasRehydrationInfo, function (draft, action) {\r\n                var _a, _b, _c, _d;\r\n                var provided = extractRehydrationInfo(action).provided;\r\n                for (var _j = 0, _k = Object.entries(provided); _j < _k.length; _j++) {\r\n                    var _l = _k[_j], type = _l[0], incomingTags = _l[1];\r\n                    for (var _m = 0, _o = Object.entries(incomingTags); _m < _o.length; _m++) {\r\n                        var _p = _o[_m], id = _p[0], cacheKeys = _p[1];\r\n                        var subscribedQueries = (_d = (_b = (_a = draft[type]) != null ? _a : draft[type] = {})[_c = id || \"__internal_without_id\"]) != null ? _d : _b[_c] = [];\r\n                        for (var _q = 0, cacheKeys_1 = cacheKeys; _q < cacheKeys_1.length; _q++) {\r\n                            var queryCacheKey = cacheKeys_1[_q];\r\n                            var alreadySubscribed = subscribedQueries.includes(queryCacheKey);\r\n                            if (!alreadySubscribed) {\r\n                                subscribedQueries.push(queryCacheKey);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }).addMatcher((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isFulfilled)(queryThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isRejectedWithValue)(queryThunk)), function (draft, action) {\r\n                var providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\r\n                var queryCacheKey = action.meta.arg.queryCacheKey;\r\n                invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy({\r\n                    queryCacheKey: queryCacheKey,\r\n                    providedTags: providedTags\r\n                }));\r\n            });\r\n        }\r\n    });\r\n    var subscriptionSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\r\n        name: reducerPath + \"/subscriptions\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            updateSubscriptionOptions: function (d, a) {\r\n            },\r\n            unsubscribeQueryResult: function (d, a) {\r\n            },\r\n            internal_probeSubscription: function (d, a) {\r\n            }\r\n        }\r\n    });\r\n    var internalSubscriptionsSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\r\n        name: reducerPath + \"/internalSubscriptions\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            subscriptionsUpdated: {\r\n                reducer: function (state, action) {\r\n                    return (0,immer__WEBPACK_IMPORTED_MODULE_1__.applyPatches)(state, action.payload);\r\n                },\r\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.prepareAutoBatched)()\r\n            }\r\n        }\r\n    });\r\n    var configSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\r\n        name: reducerPath + \"/config\",\r\n        initialState: __spreadValues({\r\n            online: isOnline(),\r\n            focused: isDocumentVisible(),\r\n            middlewareRegistered: false\r\n        }, config),\r\n        reducers: {\r\n            middlewareRegistered: function (state, _j) {\r\n                var payload = _j.payload;\r\n                state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\r\n            }\r\n        },\r\n        extraReducers: function (builder) {\r\n            builder.addCase(onOnline, function (state) {\r\n                state.online = true;\r\n            }).addCase(onOffline, function (state) {\r\n                state.online = false;\r\n            }).addCase(onFocus, function (state) {\r\n                state.focused = true;\r\n            }).addCase(onFocusLost, function (state) {\r\n                state.focused = false;\r\n            }).addMatcher(hasRehydrationInfo, function (draft) { return __spreadValues({}, draft); });\r\n        }\r\n    });\r\n    var combinedReducer = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.combineReducers)({\r\n        queries: querySlice.reducer,\r\n        mutations: mutationSlice.reducer,\r\n        provided: invalidationSlice.reducer,\r\n        subscriptions: internalSubscriptionsSlice.reducer,\r\n        config: configSlice.reducer\r\n    });\r\n    var reducer = function (state, action) { return combinedReducer(resetApiState.match(action) ? void 0 : state, action); };\r\n    var actions = __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, configSlice.actions), querySlice.actions), subscriptionSlice.actions), internalSubscriptionsSlice.actions), mutationSlice.actions), invalidationSlice.actions), {\r\n        unsubscribeMutationResult: mutationSlice.actions.removeMutationResult,\r\n        resetApiState: resetApiState\r\n    });\r\n    return { reducer: reducer, actions: actions };\r\n}\r\n// src/query/core/buildSelectors.ts\r\nvar skipToken = /* @__PURE__ */ Symbol.for(\"RTKQ/skipToken\");\r\nvar skipSelector = skipToken;\r\nvar initialSubState = {\r\n    status: QueryStatus.uninitialized\r\n};\r\nvar defaultQuerySubState = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createNextState)(initialSubState, function () {\r\n});\r\nvar defaultMutationSubState = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createNextState)(initialSubState, function () {\r\n});\r\nfunction buildSelectors(_j) {\r\n    var serializeQueryArgs = _j.serializeQueryArgs, reducerPath = _j.reducerPath;\r\n    var selectSkippedQuery = function (state) { return defaultQuerySubState; };\r\n    var selectSkippedMutation = function (state) { return defaultMutationSubState; };\r\n    return { buildQuerySelector: buildQuerySelector, buildMutationSelector: buildMutationSelector, selectInvalidatedBy: selectInvalidatedBy };\r\n    function withRequestFlags(substate) {\r\n        return __spreadValues(__spreadValues({}, substate), getRequestStatusFlags(substate.status));\r\n    }\r\n    function selectInternalState(rootState) {\r\n        var state = rootState[reducerPath];\r\n        if (true) {\r\n            if (!state) {\r\n                if (selectInternalState.triggered)\r\n                    return state;\r\n                selectInternalState.triggered = true;\r\n                console.error(\"Error: No data found at `state.\" + reducerPath + \"`. Did you forget to add the reducer to the store?\");\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n    function buildQuerySelector(endpointName, endpointDefinition) {\r\n        return function (queryArgs) {\r\n            var serializedArgs = serializeQueryArgs({\r\n                queryArgs: queryArgs,\r\n                endpointDefinition: endpointDefinition,\r\n                endpointName: endpointName\r\n            });\r\n            var selectQuerySubstate = function (state) {\r\n                var _a, _b, _c;\r\n                return (_c = (_b = (_a = selectInternalState(state)) == null ? void 0 : _a.queries) == null ? void 0 : _b[serializedArgs]) != null ? _c : defaultQuerySubState;\r\n            };\r\n            var finalSelectQuerySubState = queryArgs === skipToken ? selectSkippedQuery : selectQuerySubstate;\r\n            return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSelector)(finalSelectQuerySubState, withRequestFlags);\r\n        };\r\n    }\r\n    function buildMutationSelector() {\r\n        return function (id) {\r\n            var _a;\r\n            var mutationId;\r\n            if (typeof id === \"object\") {\r\n                mutationId = (_a = getMutationCacheKey(id)) != null ? _a : skipToken;\r\n            }\r\n            else {\r\n                mutationId = id;\r\n            }\r\n            var selectMutationSubstate = function (state) {\r\n                var _a2, _b, _c;\r\n                return (_c = (_b = (_a2 = selectInternalState(state)) == null ? void 0 : _a2.mutations) == null ? void 0 : _b[mutationId]) != null ? _c : defaultMutationSubState;\r\n            };\r\n            var finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\r\n            return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSelector)(finalSelectMutationSubstate, withRequestFlags);\r\n        };\r\n    }\r\n    function selectInvalidatedBy(state, tags) {\r\n        var _a;\r\n        var apiState = state[reducerPath];\r\n        var toInvalidate = new Set();\r\n        for (var _j = 0, _k = tags.map(expandTagDescription); _j < _k.length; _j++) {\r\n            var tag = _k[_j];\r\n            var provided = apiState.provided[tag.type];\r\n            if (!provided) {\r\n                continue;\r\n            }\r\n            var invalidateSubscriptions = (_a = tag.id !== void 0 ? provided[tag.id] : flatten(Object.values(provided))) != null ? _a : [];\r\n            for (var _l = 0, invalidateSubscriptions_1 = invalidateSubscriptions; _l < invalidateSubscriptions_1.length; _l++) {\r\n                var invalidate = invalidateSubscriptions_1[_l];\r\n                toInvalidate.add(invalidate);\r\n            }\r\n        }\r\n        return flatten(Array.from(toInvalidate.values()).map(function (queryCacheKey) {\r\n            var querySubState = apiState.queries[queryCacheKey];\r\n            return querySubState ? [\r\n                {\r\n                    queryCacheKey: queryCacheKey,\r\n                    endpointName: querySubState.endpointName,\r\n                    originalArgs: querySubState.originalArgs\r\n                }\r\n            ] : [];\r\n        }));\r\n    }\r\n}\r\n// src/query/defaultSerializeQueryArgs.ts\r\n\r\nvar cache = WeakMap ? new WeakMap() : void 0;\r\nvar defaultSerializeQueryArgs = function (_j) {\r\n    var endpointName = _j.endpointName, queryArgs = _j.queryArgs;\r\n    var serialized = \"\";\r\n    var cached = cache == null ? void 0 : cache.get(queryArgs);\r\n    if (typeof cached === \"string\") {\r\n        serialized = cached;\r\n    }\r\n    else {\r\n        var stringified = JSON.stringify(queryArgs, function (key, value) { return (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) ? Object.keys(value).sort().reduce(function (acc, key2) {\r\n            acc[key2] = value[key2];\r\n            return acc;\r\n        }, {}) : value; });\r\n        if ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(queryArgs)) {\r\n            cache == null ? void 0 : cache.set(queryArgs, stringified);\r\n        }\r\n        serialized = stringified;\r\n    }\r\n    return endpointName + \"(\" + serialized + \")\";\r\n};\r\n// src/query/createApi.ts\r\n\r\n\r\nfunction buildCreateApi() {\r\n    var modules = [];\r\n    for (var _j = 0; _j < arguments.length; _j++) {\r\n        modules[_j] = arguments[_j];\r\n    }\r\n    return function baseCreateApi(options) {\r\n        var extractRehydrationInfo = (0,reselect__WEBPACK_IMPORTED_MODULE_2__.defaultMemoize)(function (action) {\r\n            var _a, _b;\r\n            return (_b = options.extractRehydrationInfo) == null ? void 0 : _b.call(options, action, {\r\n                reducerPath: (_a = options.reducerPath) != null ? _a : \"api\"\r\n            });\r\n        });\r\n        var optionsWithDefaults = __spreadProps(__spreadValues({\r\n            reducerPath: \"api\",\r\n            keepUnusedDataFor: 60,\r\n            refetchOnMountOrArgChange: false,\r\n            refetchOnFocus: false,\r\n            refetchOnReconnect: false\r\n        }, options), {\r\n            extractRehydrationInfo: extractRehydrationInfo,\r\n            serializeQueryArgs: function (queryArgsApi) {\r\n                var finalSerializeQueryArgs = defaultSerializeQueryArgs;\r\n                if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\r\n                    var endpointSQA_1 = queryArgsApi.endpointDefinition.serializeQueryArgs;\r\n                    finalSerializeQueryArgs = function (queryArgsApi2) {\r\n                        var initialResult = endpointSQA_1(queryArgsApi2);\r\n                        if (typeof initialResult === \"string\") {\r\n                            return initialResult;\r\n                        }\r\n                        else {\r\n                            return defaultSerializeQueryArgs(__spreadProps(__spreadValues({}, queryArgsApi2), {\r\n                                queryArgs: initialResult\r\n                            }));\r\n                        }\r\n                    };\r\n                }\r\n                else if (options.serializeQueryArgs) {\r\n                    finalSerializeQueryArgs = options.serializeQueryArgs;\r\n                }\r\n                return finalSerializeQueryArgs(queryArgsApi);\r\n            },\r\n            tagTypes: __spreadArray([], options.tagTypes || [])\r\n        });\r\n        var context = {\r\n            endpointDefinitions: {},\r\n            batch: function (fn) {\r\n                fn();\r\n            },\r\n            apiUid: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.nanoid)(),\r\n            extractRehydrationInfo: extractRehydrationInfo,\r\n            hasRehydrationInfo: (0,reselect__WEBPACK_IMPORTED_MODULE_2__.defaultMemoize)(function (action) { return extractRehydrationInfo(action) != null; })\r\n        };\r\n        var api = {\r\n            injectEndpoints: injectEndpoints,\r\n            enhanceEndpoints: function (_j) {\r\n                var addTagTypes = _j.addTagTypes, endpoints = _j.endpoints;\r\n                if (addTagTypes) {\r\n                    for (var _k = 0, addTagTypes_1 = addTagTypes; _k < addTagTypes_1.length; _k++) {\r\n                        var eT = addTagTypes_1[_k];\r\n                        if (!optionsWithDefaults.tagTypes.includes(eT)) {\r\n                            ;\r\n                            optionsWithDefaults.tagTypes.push(eT);\r\n                        }\r\n                    }\r\n                }\r\n                if (endpoints) {\r\n                    for (var _l = 0, _m = Object.entries(endpoints); _l < _m.length; _l++) {\r\n                        var _o = _m[_l], endpointName = _o[0], partialDefinition = _o[1];\r\n                        if (typeof partialDefinition === \"function\") {\r\n                            partialDefinition(context.endpointDefinitions[endpointName]);\r\n                        }\r\n                        else {\r\n                            Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\r\n                        }\r\n                    }\r\n                }\r\n                return api;\r\n            }\r\n        };\r\n        var initializedModules = modules.map(function (m) { return m.init(api, optionsWithDefaults, context); });\r\n        function injectEndpoints(inject) {\r\n            var evaluatedEndpoints = inject.endpoints({\r\n                query: function (x) { return __spreadProps(__spreadValues({}, x), { type: DefinitionType.query }); },\r\n                mutation: function (x) { return __spreadProps(__spreadValues({}, x), { type: DefinitionType.mutation }); }\r\n            });\r\n            for (var _j = 0, _k = Object.entries(evaluatedEndpoints); _j < _k.length; _j++) {\r\n                var _l = _k[_j], endpointName = _l[0], definition = _l[1];\r\n                if (!inject.overrideExisting && endpointName in context.endpointDefinitions) {\r\n                    if (typeof process !== \"undefined\" && \"development\" === \"development\") {\r\n                        console.error(\"called `injectEndpoints` to override already-existing endpointName \" + endpointName + \" without specifying `overrideExisting: true`\");\r\n                    }\r\n                    continue;\r\n                }\r\n                context.endpointDefinitions[endpointName] = definition;\r\n                for (var _m = 0, initializedModules_1 = initializedModules; _m < initializedModules_1.length; _m++) {\r\n                    var m = initializedModules_1[_m];\r\n                    m.injectEndpoint(endpointName, definition);\r\n                }\r\n            }\r\n            return api;\r\n        }\r\n        return api.injectEndpoints({ endpoints: options.endpoints });\r\n    };\r\n}\r\n// src/query/fakeBaseQuery.ts\r\nfunction fakeBaseQuery() {\r\n    return function () {\r\n        throw new Error(\"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\r\n    };\r\n}\r\n// src/query/core/buildMiddleware/index.ts\r\n\r\n// src/query/core/buildMiddleware/cacheCollection.ts\r\nfunction isObjectEmpty(obj) {\r\n    for (var k in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\r\nvar buildCacheCollectionHandler = function (_j) {\r\n    var reducerPath = _j.reducerPath, api = _j.api, context = _j.context, internalState = _j.internalState;\r\n    var _k = api.internalActions, removeQueryResult = _k.removeQueryResult, unsubscribeQueryResult = _k.unsubscribeQueryResult;\r\n    function anySubscriptionsRemainingForKey(queryCacheKey) {\r\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\r\n        return !!subscriptions && !isObjectEmpty(subscriptions);\r\n    }\r\n    var currentRemovalTimeouts = {};\r\n    var handler = function (action, mwApi, internalState2) {\r\n        var _a;\r\n        if (unsubscribeQueryResult.match(action)) {\r\n            var state = mwApi.getState()[reducerPath];\r\n            var queryCacheKey = action.payload.queryCacheKey;\r\n            handleUnsubscribe(queryCacheKey, (_a = state.queries[queryCacheKey]) == null ? void 0 : _a.endpointName, mwApi, state.config);\r\n        }\r\n        if (api.util.resetApiState.match(action)) {\r\n            for (var _j = 0, _k = Object.entries(currentRemovalTimeouts); _j < _k.length; _j++) {\r\n                var _l = _k[_j], key = _l[0], timeout = _l[1];\r\n                if (timeout)\r\n                    clearTimeout(timeout);\r\n                delete currentRemovalTimeouts[key];\r\n            }\r\n        }\r\n        if (context.hasRehydrationInfo(action)) {\r\n            var state = mwApi.getState()[reducerPath];\r\n            var queries = context.extractRehydrationInfo(action).queries;\r\n            for (var _m = 0, _o = Object.entries(queries); _m < _o.length; _m++) {\r\n                var _p = _o[_m], queryCacheKey = _p[0], queryState = _p[1];\r\n                handleUnsubscribe(queryCacheKey, queryState == null ? void 0 : queryState.endpointName, mwApi, state.config);\r\n            }\r\n        }\r\n    };\r\n    function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\r\n        var _a;\r\n        var endpointDefinition = context.endpointDefinitions[endpointName];\r\n        var keepUnusedDataFor = (_a = endpointDefinition == null ? void 0 : endpointDefinition.keepUnusedDataFor) != null ? _a : config.keepUnusedDataFor;\r\n        if (keepUnusedDataFor === Infinity) {\r\n            return;\r\n        }\r\n        var finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\r\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\r\n            var currentTimeout = currentRemovalTimeouts[queryCacheKey];\r\n            if (currentTimeout) {\r\n                clearTimeout(currentTimeout);\r\n            }\r\n            currentRemovalTimeouts[queryCacheKey] = setTimeout(function () {\r\n                if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\r\n                    api2.dispatch(removeQueryResult({ queryCacheKey: queryCacheKey }));\r\n                }\r\n                delete currentRemovalTimeouts[queryCacheKey];\r\n            }, finalKeepUnusedDataFor * 1e3);\r\n        }\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/invalidationByTags.ts\r\n\r\nvar buildInvalidationByTagsHandler = function (_j) {\r\n    var reducerPath = _j.reducerPath, context = _j.context, endpointDefinitions = _j.context.endpointDefinitions, mutationThunk = _j.mutationThunk, api = _j.api, assertTagType = _j.assertTagType, refetchQuery = _j.refetchQuery;\r\n    var removeQueryResult = api.internalActions.removeQueryResult;\r\n    var isThunkActionWithTags = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isFulfilled)(mutationThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isRejectedWithValue)(mutationThunk));\r\n    var handler = function (action, mwApi) {\r\n        if (isThunkActionWithTags(action)) {\r\n            invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\r\n        }\r\n        if (api.util.invalidateTags.match(action)) {\r\n            invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\r\n        }\r\n    };\r\n    function invalidateTags(tags, mwApi) {\r\n        var rootState = mwApi.getState();\r\n        var state = rootState[reducerPath];\r\n        var toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\r\n        context.batch(function () {\r\n            var _a;\r\n            var valuesArray = Array.from(toInvalidate.values());\r\n            for (var _j = 0, valuesArray_1 = valuesArray; _j < valuesArray_1.length; _j++) {\r\n                var queryCacheKey = valuesArray_1[_j].queryCacheKey;\r\n                var querySubState = state.queries[queryCacheKey];\r\n                var subscriptionSubState = (_a = state.subscriptions[queryCacheKey]) != null ? _a : {};\r\n                if (querySubState) {\r\n                    if (Object.keys(subscriptionSubState).length === 0) {\r\n                        mwApi.dispatch(removeQueryResult({\r\n                            queryCacheKey: queryCacheKey\r\n                        }));\r\n                    }\r\n                    else if (querySubState.status !== QueryStatus.uninitialized) {\r\n                        mwApi.dispatch(refetchQuery(querySubState, queryCacheKey));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/polling.ts\r\nvar buildPollingHandler = function (_j) {\r\n    var reducerPath = _j.reducerPath, queryThunk = _j.queryThunk, api = _j.api, refetchQuery = _j.refetchQuery, internalState = _j.internalState;\r\n    var currentPolls = {};\r\n    var handler = function (action, mwApi) {\r\n        if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\r\n            updatePollingInterval(action.payload, mwApi);\r\n        }\r\n        if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\r\n            updatePollingInterval(action.meta.arg, mwApi);\r\n        }\r\n        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\r\n            startNextPoll(action.meta.arg, mwApi);\r\n        }\r\n        if (api.util.resetApiState.match(action)) {\r\n            clearPolls();\r\n        }\r\n    };\r\n    function startNextPoll(_j, api2) {\r\n        var queryCacheKey = _j.queryCacheKey;\r\n        var state = api2.getState()[reducerPath];\r\n        var querySubState = state.queries[queryCacheKey];\r\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\r\n        if (!querySubState || querySubState.status === QueryStatus.uninitialized)\r\n            return;\r\n        var lowestPollingInterval = findLowestPollingInterval(subscriptions);\r\n        if (!Number.isFinite(lowestPollingInterval))\r\n            return;\r\n        var currentPoll = currentPolls[queryCacheKey];\r\n        if (currentPoll == null ? void 0 : currentPoll.timeout) {\r\n            clearTimeout(currentPoll.timeout);\r\n            currentPoll.timeout = void 0;\r\n        }\r\n        var nextPollTimestamp = Date.now() + lowestPollingInterval;\r\n        var currentInterval = currentPolls[queryCacheKey] = {\r\n            nextPollTimestamp: nextPollTimestamp,\r\n            pollingInterval: lowestPollingInterval,\r\n            timeout: setTimeout(function () {\r\n                currentInterval.timeout = void 0;\r\n                api2.dispatch(refetchQuery(querySubState, queryCacheKey));\r\n            }, lowestPollingInterval)\r\n        };\r\n    }\r\n    function updatePollingInterval(_j, api2) {\r\n        var queryCacheKey = _j.queryCacheKey;\r\n        var state = api2.getState()[reducerPath];\r\n        var querySubState = state.queries[queryCacheKey];\r\n        var subscriptions = internalState.currentSubscriptions[queryCacheKey];\r\n        if (!querySubState || querySubState.status === QueryStatus.uninitialized) {\r\n            return;\r\n        }\r\n        var lowestPollingInterval = findLowestPollingInterval(subscriptions);\r\n        if (!Number.isFinite(lowestPollingInterval)) {\r\n            cleanupPollForKey(queryCacheKey);\r\n            return;\r\n        }\r\n        var currentPoll = currentPolls[queryCacheKey];\r\n        var nextPollTimestamp = Date.now() + lowestPollingInterval;\r\n        if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\r\n            startNextPoll({ queryCacheKey: queryCacheKey }, api2);\r\n        }\r\n    }\r\n    function cleanupPollForKey(key) {\r\n        var existingPoll = currentPolls[key];\r\n        if (existingPoll == null ? void 0 : existingPoll.timeout) {\r\n            clearTimeout(existingPoll.timeout);\r\n        }\r\n        delete currentPolls[key];\r\n    }\r\n    function clearPolls() {\r\n        for (var _j = 0, _k = Object.keys(currentPolls); _j < _k.length; _j++) {\r\n            var key = _k[_j];\r\n            cleanupPollForKey(key);\r\n        }\r\n    }\r\n    function findLowestPollingInterval(subscribers) {\r\n        if (subscribers === void 0) { subscribers = {}; }\r\n        var lowestPollingInterval = Number.POSITIVE_INFINITY;\r\n        for (var key in subscribers) {\r\n            if (!!subscribers[key].pollingInterval) {\r\n                lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\r\n            }\r\n        }\r\n        return lowestPollingInterval;\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/windowEventHandling.ts\r\nvar buildWindowEventHandler = function (_j) {\r\n    var reducerPath = _j.reducerPath, context = _j.context, api = _j.api, refetchQuery = _j.refetchQuery, internalState = _j.internalState;\r\n    var removeQueryResult = api.internalActions.removeQueryResult;\r\n    var handler = function (action, mwApi) {\r\n        if (onFocus.match(action)) {\r\n            refetchValidQueries(mwApi, \"refetchOnFocus\");\r\n        }\r\n        if (onOnline.match(action)) {\r\n            refetchValidQueries(mwApi, \"refetchOnReconnect\");\r\n        }\r\n    };\r\n    function refetchValidQueries(api2, type) {\r\n        var state = api2.getState()[reducerPath];\r\n        var queries = state.queries;\r\n        var subscriptions = internalState.currentSubscriptions;\r\n        context.batch(function () {\r\n            for (var _j = 0, _k = Object.keys(subscriptions); _j < _k.length; _j++) {\r\n                var queryCacheKey = _k[_j];\r\n                var querySubState = queries[queryCacheKey];\r\n                var subscriptionSubState = subscriptions[queryCacheKey];\r\n                if (!subscriptionSubState || !querySubState)\r\n                    continue;\r\n                var shouldRefetch = Object.values(subscriptionSubState).some(function (sub) { return sub[type] === true; }) || Object.values(subscriptionSubState).every(function (sub) { return sub[type] === void 0; }) && state.config[type];\r\n                if (shouldRefetch) {\r\n                    if (Object.keys(subscriptionSubState).length === 0) {\r\n                        api2.dispatch(removeQueryResult({\r\n                            queryCacheKey: queryCacheKey\r\n                        }));\r\n                    }\r\n                    else if (querySubState.status !== QueryStatus.uninitialized) {\r\n                        api2.dispatch(refetchQuery(querySubState, queryCacheKey));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/cacheLifecycle.ts\r\n\r\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\r\nvar buildCacheLifecycleHandler = function (_j) {\r\n    var api = _j.api, reducerPath = _j.reducerPath, context = _j.context, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk, internalState = _j.internalState;\r\n    var isQueryThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAsyncThunkAction)(queryThunk);\r\n    var isMutationThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAsyncThunkAction)(mutationThunk);\r\n    var isFulfilledThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isFulfilled)(queryThunk, mutationThunk);\r\n    var lifecycleMap = {};\r\n    var handler = function (action, mwApi, stateBefore) {\r\n        var cacheKey = getCacheKey(action);\r\n        if (queryThunk.pending.match(action)) {\r\n            var oldState = stateBefore[reducerPath].queries[cacheKey];\r\n            var state = mwApi.getState()[reducerPath].queries[cacheKey];\r\n            if (!oldState && state) {\r\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\r\n            }\r\n        }\r\n        else if (mutationThunk.pending.match(action)) {\r\n            var state = mwApi.getState()[reducerPath].mutations[cacheKey];\r\n            if (state) {\r\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\r\n            }\r\n        }\r\n        else if (isFulfilledThunk(action)) {\r\n            var lifecycle = lifecycleMap[cacheKey];\r\n            if (lifecycle == null ? void 0 : lifecycle.valueResolved) {\r\n                lifecycle.valueResolved({\r\n                    data: action.payload,\r\n                    meta: action.meta.baseQueryMeta\r\n                });\r\n                delete lifecycle.valueResolved;\r\n            }\r\n        }\r\n        else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\r\n            var lifecycle = lifecycleMap[cacheKey];\r\n            if (lifecycle) {\r\n                delete lifecycleMap[cacheKey];\r\n                lifecycle.cacheEntryRemoved();\r\n            }\r\n        }\r\n        else if (api.util.resetApiState.match(action)) {\r\n            for (var _j = 0, _k = Object.entries(lifecycleMap); _j < _k.length; _j++) {\r\n                var _l = _k[_j], cacheKey2 = _l[0], lifecycle = _l[1];\r\n                delete lifecycleMap[cacheKey2];\r\n                lifecycle.cacheEntryRemoved();\r\n            }\r\n        }\r\n    };\r\n    function getCacheKey(action) {\r\n        if (isQueryThunk(action))\r\n            return action.meta.arg.queryCacheKey;\r\n        if (isMutationThunk(action))\r\n            return action.meta.requestId;\r\n        if (api.internalActions.removeQueryResult.match(action))\r\n            return action.payload.queryCacheKey;\r\n        if (api.internalActions.removeMutationResult.match(action))\r\n            return getMutationCacheKey(action.payload);\r\n        return \"\";\r\n    }\r\n    function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\r\n        var endpointDefinition = context.endpointDefinitions[endpointName];\r\n        var onCacheEntryAdded = endpointDefinition == null ? void 0 : endpointDefinition.onCacheEntryAdded;\r\n        if (!onCacheEntryAdded)\r\n            return;\r\n        var lifecycle = {};\r\n        var cacheEntryRemoved = new Promise(function (resolve) {\r\n            lifecycle.cacheEntryRemoved = resolve;\r\n        });\r\n        var cacheDataLoaded = Promise.race([\r\n            new Promise(function (resolve) {\r\n                lifecycle.valueResolved = resolve;\r\n            }),\r\n            cacheEntryRemoved.then(function () {\r\n                throw neverResolvedError;\r\n            })\r\n        ]);\r\n        cacheDataLoaded.catch(function () {\r\n        });\r\n        lifecycleMap[queryCacheKey] = lifecycle;\r\n        var selector = api.endpoints[endpointName].select(endpointDefinition.type === DefinitionType.query ? originalArgs : queryCacheKey);\r\n        var extra = mwApi.dispatch(function (_, __, extra2) { return extra2; });\r\n        var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\r\n            getCacheEntry: function () { return selector(mwApi.getState()); },\r\n            requestId: requestId,\r\n            extra: extra,\r\n            updateCachedData: endpointDefinition.type === DefinitionType.query ? function (updateRecipe) { return mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)); } : void 0,\r\n            cacheDataLoaded: cacheDataLoaded,\r\n            cacheEntryRemoved: cacheEntryRemoved\r\n        });\r\n        var runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\r\n        Promise.resolve(runningHandler).catch(function (e) {\r\n            if (e === neverResolvedError)\r\n                return;\r\n            throw e;\r\n        });\r\n    }\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/queryLifecycle.ts\r\n\r\nvar buildQueryLifecycleHandler = function (_j) {\r\n    var api = _j.api, context = _j.context, queryThunk = _j.queryThunk, mutationThunk = _j.mutationThunk;\r\n    var isPendingThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPending)(queryThunk, mutationThunk);\r\n    var isRejectedThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isRejected)(queryThunk, mutationThunk);\r\n    var isFullfilledThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isFulfilled)(queryThunk, mutationThunk);\r\n    var lifecycleMap = {};\r\n    var handler = function (action, mwApi) {\r\n        var _a, _b, _c;\r\n        if (isPendingThunk(action)) {\r\n            var _j = action.meta, requestId = _j.requestId, _k = _j.arg, endpointName_1 = _k.endpointName, originalArgs_1 = _k.originalArgs;\r\n            var endpointDefinition = context.endpointDefinitions[endpointName_1];\r\n            var onQueryStarted = endpointDefinition == null ? void 0 : endpointDefinition.onQueryStarted;\r\n            if (onQueryStarted) {\r\n                var lifecycle_1 = {};\r\n                var queryFulfilled = new Promise(function (resolve, reject) {\r\n                    lifecycle_1.resolve = resolve;\r\n                    lifecycle_1.reject = reject;\r\n                });\r\n                queryFulfilled.catch(function () {\r\n                });\r\n                lifecycleMap[requestId] = lifecycle_1;\r\n                var selector_1 = api.endpoints[endpointName_1].select(endpointDefinition.type === DefinitionType.query ? originalArgs_1 : requestId);\r\n                var extra = mwApi.dispatch(function (_, __, extra2) { return extra2; });\r\n                var lifecycleApi = __spreadProps(__spreadValues({}, mwApi), {\r\n                    getCacheEntry: function () { return selector_1(mwApi.getState()); },\r\n                    requestId: requestId,\r\n                    extra: extra,\r\n                    updateCachedData: endpointDefinition.type === DefinitionType.query ? function (updateRecipe) { return mwApi.dispatch(api.util.updateQueryData(endpointName_1, originalArgs_1, updateRecipe)); } : void 0,\r\n                    queryFulfilled: queryFulfilled\r\n                });\r\n                onQueryStarted(originalArgs_1, lifecycleApi);\r\n            }\r\n        }\r\n        else if (isFullfilledThunk(action)) {\r\n            var _l = action.meta, requestId = _l.requestId, baseQueryMeta = _l.baseQueryMeta;\r\n            (_a = lifecycleMap[requestId]) == null ? void 0 : _a.resolve({\r\n                data: action.payload,\r\n                meta: baseQueryMeta\r\n            });\r\n            delete lifecycleMap[requestId];\r\n        }\r\n        else if (isRejectedThunk(action)) {\r\n            var _m = action.meta, requestId = _m.requestId, rejectedWithValue = _m.rejectedWithValue, baseQueryMeta = _m.baseQueryMeta;\r\n            (_c = lifecycleMap[requestId]) == null ? void 0 : _c.reject({\r\n                error: (_b = action.payload) != null ? _b : action.error,\r\n                isUnhandledError: !rejectedWithValue,\r\n                meta: baseQueryMeta\r\n            });\r\n            delete lifecycleMap[requestId];\r\n        }\r\n    };\r\n    return handler;\r\n};\r\n// src/query/core/buildMiddleware/devMiddleware.ts\r\nvar buildDevCheckHandler = function (_j) {\r\n    var api = _j.api, apiUid = _j.context.apiUid, reducerPath = _j.reducerPath;\r\n    return function (action, mwApi) {\r\n        var _a, _b;\r\n        if (api.util.resetApiState.match(action)) {\r\n            mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\r\n        }\r\n        if (typeof process !== \"undefined\" && \"development\" === \"development\") {\r\n            if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && ((_b = (_a = mwApi.getState()[reducerPath]) == null ? void 0 : _a.config) == null ? void 0 : _b.middlewareRegistered) === \"conflict\") {\r\n                console.warn(\"There is a mismatch between slice and middleware for the reducerPath \\\"\" + reducerPath + \"\\\".\\nYou can only have one api per reducer path, this will lead to crashes in various situations!\" + (reducerPath === \"api\" ? \"\\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!\" : \"\"));\r\n            }\r\n        }\r\n    };\r\n};\r\n// src/query/core/buildMiddleware/batchActions.ts\r\n\r\nvar promise;\r\nvar queueMicrotaskShim = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : globalThis) : function (cb) { return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) { return setTimeout(function () {\r\n    throw err;\r\n}, 0); }); };\r\nvar buildBatchedActionsHandler = function (_j) {\r\n    var api = _j.api, queryThunk = _j.queryThunk, internalState = _j.internalState;\r\n    var subscriptionsPrefix = api.reducerPath + \"/subscriptions\";\r\n    var previousSubscriptions = null;\r\n    var dispatchQueued = false;\r\n    var _k = api.internalActions, updateSubscriptionOptions = _k.updateSubscriptionOptions, unsubscribeQueryResult = _k.unsubscribeQueryResult;\r\n    var actuallyMutateSubscriptions = function (mutableState, action) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _i;\r\n        if (updateSubscriptionOptions.match(action)) {\r\n            var _j = action.payload, queryCacheKey = _j.queryCacheKey, requestId = _j.requestId, options = _j.options;\r\n            if ((_a = mutableState == null ? void 0 : mutableState[queryCacheKey]) == null ? void 0 : _a[requestId]) {\r\n                mutableState[queryCacheKey][requestId] = options;\r\n            }\r\n            return true;\r\n        }\r\n        if (unsubscribeQueryResult.match(action)) {\r\n            var _k = action.payload, queryCacheKey = _k.queryCacheKey, requestId = _k.requestId;\r\n            if (mutableState[queryCacheKey]) {\r\n                delete mutableState[queryCacheKey][requestId];\r\n            }\r\n            return true;\r\n        }\r\n        if (api.internalActions.removeQueryResult.match(action)) {\r\n            delete mutableState[action.payload.queryCacheKey];\r\n            return true;\r\n        }\r\n        if (queryThunk.pending.match(action)) {\r\n            var _l = action.meta, arg = _l.arg, requestId = _l.requestId;\r\n            if (arg.subscribe) {\r\n                var substate = (_c = mutableState[_b = arg.queryCacheKey]) != null ? _c : mutableState[_b] = {};\r\n                substate[requestId] = (_e = (_d = arg.subscriptionOptions) != null ? _d : substate[requestId]) != null ? _e : {};\r\n                return true;\r\n            }\r\n        }\r\n        if (queryThunk.rejected.match(action)) {\r\n            var _m = action.meta, condition = _m.condition, arg = _m.arg, requestId = _m.requestId;\r\n            if (condition && arg.subscribe) {\r\n                var substate = (_g = mutableState[_f = arg.queryCacheKey]) != null ? _g : mutableState[_f] = {};\r\n                substate[requestId] = (_i = (_h = arg.subscriptionOptions) != null ? _h : substate[requestId]) != null ? _i : {};\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return function (action, mwApi) {\r\n        var _a, _b;\r\n        if (!previousSubscriptions) {\r\n            previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\r\n        }\r\n        if (api.util.resetApiState.match(action)) {\r\n            previousSubscriptions = internalState.currentSubscriptions = {};\r\n            return [true, false];\r\n        }\r\n        if (api.internalActions.internal_probeSubscription.match(action)) {\r\n            var _j = action.payload, queryCacheKey = _j.queryCacheKey, requestId = _j.requestId;\r\n            var hasSubscription = !!((_a = internalState.currentSubscriptions[queryCacheKey]) == null ? void 0 : _a[requestId]);\r\n            return [false, hasSubscription];\r\n        }\r\n        var didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\r\n        if (didMutate) {\r\n            if (!dispatchQueued) {\r\n                queueMicrotaskShim(function () {\r\n                    var newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\r\n                    var _j = (0,immer__WEBPACK_IMPORTED_MODULE_1__.produceWithPatches)(previousSubscriptions, function () { return newSubscriptions; }), patches = _j[1];\r\n                    mwApi.next(api.internalActions.subscriptionsUpdated(patches));\r\n                    previousSubscriptions = newSubscriptions;\r\n                    dispatchQueued = false;\r\n                });\r\n                dispatchQueued = true;\r\n            }\r\n            var isSubscriptionSliceAction = !!((_b = action.type) == null ? void 0 : _b.startsWith(subscriptionsPrefix));\r\n            var isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\r\n            var actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\r\n            return [actionShouldContinue, false];\r\n        }\r\n        return [true, false];\r\n    };\r\n};\r\n// src/query/core/buildMiddleware/index.ts\r\nfunction buildMiddleware(input) {\r\n    var reducerPath = input.reducerPath, queryThunk = input.queryThunk, api = input.api, context = input.context;\r\n    var apiUid = context.apiUid;\r\n    var actions = {\r\n        invalidateTags: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createAction)(reducerPath + \"/invalidateTags\")\r\n    };\r\n    var isThisApiSliceAction = function (action) {\r\n        return !!action && typeof action.type === \"string\" && action.type.startsWith(reducerPath + \"/\");\r\n    };\r\n    var handlerBuilders = [\r\n        buildDevCheckHandler,\r\n        buildCacheCollectionHandler,\r\n        buildInvalidationByTagsHandler,\r\n        buildPollingHandler,\r\n        buildCacheLifecycleHandler,\r\n        buildQueryLifecycleHandler\r\n    ];\r\n    var middleware = function (mwApi) {\r\n        var initialized2 = false;\r\n        var internalState = {\r\n            currentSubscriptions: {}\r\n        };\r\n        var builderArgs = __spreadProps(__spreadValues({}, input), {\r\n            internalState: internalState,\r\n            refetchQuery: refetchQuery\r\n        });\r\n        var handlers = handlerBuilders.map(function (build) { return build(builderArgs); });\r\n        var batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\r\n        var windowEventsHandler = buildWindowEventHandler(builderArgs);\r\n        return function (next) {\r\n            return function (action) {\r\n                if (!initialized2) {\r\n                    initialized2 = true;\r\n                    mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\r\n                }\r\n                var mwApiWithNext = __spreadProps(__spreadValues({}, mwApi), { next: next });\r\n                var stateBefore = mwApi.getState();\r\n                var _j = batchedActionsHandler(action, mwApiWithNext, stateBefore), actionShouldContinue = _j[0], hasSubscription = _j[1];\r\n                var res;\r\n                if (actionShouldContinue) {\r\n                    res = next(action);\r\n                }\r\n                else {\r\n                    res = hasSubscription;\r\n                }\r\n                if (!!mwApi.getState()[reducerPath]) {\r\n                    windowEventsHandler(action, mwApiWithNext, stateBefore);\r\n                    if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\r\n                        for (var _k = 0, handlers_1 = handlers; _k < handlers_1.length; _k++) {\r\n                            var handler = handlers_1[_k];\r\n                            handler(action, mwApiWithNext, stateBefore);\r\n                        }\r\n                    }\r\n                }\r\n                return res;\r\n            };\r\n        };\r\n    };\r\n    return { middleware: middleware, actions: actions };\r\n    function refetchQuery(querySubState, queryCacheKey, override) {\r\n        if (override === void 0) { override = {}; }\r\n        return queryThunk(__spreadValues({\r\n            type: \"query\",\r\n            endpointName: querySubState.endpointName,\r\n            originalArgs: querySubState.originalArgs,\r\n            subscribe: false,\r\n            forceRefetch: true,\r\n            queryCacheKey: queryCacheKey\r\n        }, override));\r\n    }\r\n}\r\n// src/query/tsHelpers.ts\r\nfunction assertCast(v) {\r\n}\r\nfunction safeAssign(target) {\r\n    var args = [];\r\n    for (var _j = 1; _j < arguments.length; _j++) {\r\n        args[_j - 1] = arguments[_j];\r\n    }\r\n    Object.assign.apply(Object, __spreadArray([target], args));\r\n}\r\n// src/query/core/module.ts\r\n\r\nvar coreModuleName = /* @__PURE__ */ Symbol();\r\nvar coreModule = function () { return ({\r\n    name: coreModuleName,\r\n    init: function (api, _j, context) {\r\n        var baseQuery = _j.baseQuery, tagTypes = _j.tagTypes, reducerPath = _j.reducerPath, serializeQueryArgs = _j.serializeQueryArgs, keepUnusedDataFor = _j.keepUnusedDataFor, refetchOnMountOrArgChange = _j.refetchOnMountOrArgChange, refetchOnFocus = _j.refetchOnFocus, refetchOnReconnect = _j.refetchOnReconnect;\r\n        (0,immer__WEBPACK_IMPORTED_MODULE_1__.enablePatches)();\r\n        assertCast(serializeQueryArgs);\r\n        var assertTagType = function (tag) {\r\n            if (typeof process !== \"undefined\" && \"development\" === \"development\") {\r\n                if (!tagTypes.includes(tag.type)) {\r\n                    console.error(\"Tag type '\" + tag.type + \"' was used, but not specified in `tagTypes`!\");\r\n                }\r\n            }\r\n            return tag;\r\n        };\r\n        Object.assign(api, {\r\n            reducerPath: reducerPath,\r\n            endpoints: {},\r\n            internalActions: {\r\n                onOnline: onOnline,\r\n                onOffline: onOffline,\r\n                onFocus: onFocus,\r\n                onFocusLost: onFocusLost\r\n            },\r\n            util: {}\r\n        });\r\n        var _k = buildThunks({\r\n            baseQuery: baseQuery,\r\n            reducerPath: reducerPath,\r\n            context: context,\r\n            api: api,\r\n            serializeQueryArgs: serializeQueryArgs,\r\n            assertTagType: assertTagType\r\n        }), queryThunk = _k.queryThunk, mutationThunk = _k.mutationThunk, patchQueryData = _k.patchQueryData, updateQueryData = _k.updateQueryData, upsertQueryData = _k.upsertQueryData, prefetch = _k.prefetch, buildMatchThunkActions = _k.buildMatchThunkActions;\r\n        var _l = buildSlice({\r\n            context: context,\r\n            queryThunk: queryThunk,\r\n            mutationThunk: mutationThunk,\r\n            reducerPath: reducerPath,\r\n            assertTagType: assertTagType,\r\n            config: {\r\n                refetchOnFocus: refetchOnFocus,\r\n                refetchOnReconnect: refetchOnReconnect,\r\n                refetchOnMountOrArgChange: refetchOnMountOrArgChange,\r\n                keepUnusedDataFor: keepUnusedDataFor,\r\n                reducerPath: reducerPath\r\n            }\r\n        }), reducer = _l.reducer, sliceActions = _l.actions;\r\n        safeAssign(api.util, {\r\n            patchQueryData: patchQueryData,\r\n            updateQueryData: updateQueryData,\r\n            upsertQueryData: upsertQueryData,\r\n            prefetch: prefetch,\r\n            resetApiState: sliceActions.resetApiState\r\n        });\r\n        safeAssign(api.internalActions, sliceActions);\r\n        var _m = buildMiddleware({\r\n            reducerPath: reducerPath,\r\n            context: context,\r\n            queryThunk: queryThunk,\r\n            mutationThunk: mutationThunk,\r\n            api: api,\r\n            assertTagType: assertTagType\r\n        }), middleware = _m.middleware, middlewareActions = _m.actions;\r\n        safeAssign(api.util, middlewareActions);\r\n        safeAssign(api, { reducer: reducer, middleware: middleware });\r\n        var _o = buildSelectors({\r\n            serializeQueryArgs: serializeQueryArgs,\r\n            reducerPath: reducerPath\r\n        }), buildQuerySelector = _o.buildQuerySelector, buildMutationSelector = _o.buildMutationSelector, selectInvalidatedBy = _o.selectInvalidatedBy;\r\n        safeAssign(api.util, { selectInvalidatedBy: selectInvalidatedBy });\r\n        var _p = buildInitiate({\r\n            queryThunk: queryThunk,\r\n            mutationThunk: mutationThunk,\r\n            api: api,\r\n            serializeQueryArgs: serializeQueryArgs,\r\n            context: context\r\n        }), buildInitiateQuery = _p.buildInitiateQuery, buildInitiateMutation = _p.buildInitiateMutation, getRunningMutationThunk = _p.getRunningMutationThunk, getRunningMutationsThunk = _p.getRunningMutationsThunk, getRunningQueriesThunk = _p.getRunningQueriesThunk, getRunningQueryThunk = _p.getRunningQueryThunk, getRunningOperationPromises = _p.getRunningOperationPromises, removalWarning = _p.removalWarning;\r\n        safeAssign(api.util, {\r\n            getRunningOperationPromises: getRunningOperationPromises,\r\n            getRunningOperationPromise: removalWarning,\r\n            getRunningMutationThunk: getRunningMutationThunk,\r\n            getRunningMutationsThunk: getRunningMutationsThunk,\r\n            getRunningQueryThunk: getRunningQueryThunk,\r\n            getRunningQueriesThunk: getRunningQueriesThunk\r\n        });\r\n        return {\r\n            name: coreModuleName,\r\n            injectEndpoint: function (endpointName, definition) {\r\n                var _a, _b;\r\n                var anyApi = api;\r\n                (_b = (_a = anyApi.endpoints)[endpointName]) != null ? _b : _a[endpointName] = {};\r\n                if (isQueryDefinition(definition)) {\r\n                    safeAssign(anyApi.endpoints[endpointName], {\r\n                        name: endpointName,\r\n                        select: buildQuerySelector(endpointName, definition),\r\n                        initiate: buildInitiateQuery(endpointName, definition)\r\n                    }, buildMatchThunkActions(queryThunk, endpointName));\r\n                }\r\n                else if (isMutationDefinition(definition)) {\r\n                    safeAssign(anyApi.endpoints[endpointName], {\r\n                        name: endpointName,\r\n                        select: buildMutationSelector(),\r\n                        initiate: buildInitiateMutation(endpointName)\r\n                    }, buildMatchThunkActions(mutationThunk, endpointName));\r\n                }\r\n            }\r\n        };\r\n    }\r\n}); };\r\n// src/query/core/index.ts\r\nvar createApi = /* @__PURE__ */ buildCreateApi(coreModule());\r\n\r\n//# sourceMappingURL=rtk-query.esm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.cjs.development.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.cjs.development.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nvar __create = Object.create;\r\nvar __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = function (obj, key, value) { return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : obj[key] = value; };\r\nvar __spreadValues = function (a, b) {\r\n    for (var prop in b || (b = {}))\r\n        if (__hasOwnProp.call(b, prop))\r\n            __defNormalProp(a, prop, b[prop]);\r\n    if (__getOwnPropSymbols)\r\n        for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {\r\n            var prop = _c[_i];\r\n            if (__propIsEnum.call(b, prop))\r\n                __defNormalProp(a, prop, b[prop]);\r\n        }\r\n    return a;\r\n};\r\nvar __spreadProps = function (a, b) { return __defProps(a, __getOwnPropDescs(b)); };\r\nvar __markAsModule = function (target) { return __defProp(target, \"__esModule\", { value: true }); };\r\nvar __export = function (target, all) {\r\n    for (var name in all)\r\n        __defProp(target, name, { get: all[name], enumerable: true });\r\n};\r\nvar __reExport = function (target, module2, desc) {\r\n    if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\r\n        var _loop_1 = function (key) {\r\n            if (!__hasOwnProp.call(target, key) && key !== \"default\")\r\n                __defProp(target, key, { get: function () { return module2[key]; }, enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\r\n        };\r\n        for (var _i = 0, _c = __getOwnPropNames(module2); _i < _c.length; _i++) {\r\n            var key = _c[_i];\r\n            _loop_1(key);\r\n        }\r\n    }\r\n    return target;\r\n};\r\nvar __toModule = function (module2) {\r\n    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? { get: function () { return module2.default; }, enumerable: true } : { value: module2, enumerable: true })), module2);\r\n};\r\nvar __async = function (__this, __arguments, generator) {\r\n    return new Promise(function (resolve, reject) {\r\n        var fulfilled = function (value) {\r\n            try {\r\n                step(generator.next(value));\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        };\r\n        var rejected = function (value) {\r\n            try {\r\n                step(generator.throw(value));\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        };\r\n        var step = function (x) { return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected); };\r\n        step((generator = generator.apply(__this, __arguments)).next());\r\n    });\r\n};\r\n// src/index.ts\r\n__markAsModule(exports);\r\n__export(exports, {\r\n    EnhancerArray: function () { return EnhancerArray; },\r\n    MiddlewareArray: function () { return MiddlewareArray; },\r\n    SHOULD_AUTOBATCH: function () { return SHOULD_AUTOBATCH; },\r\n    TaskAbortError: function () { return TaskAbortError; },\r\n    addListener: function () { return addListener; },\r\n    autoBatchEnhancer: function () { return autoBatchEnhancer; },\r\n    clearAllListeners: function () { return clearAllListeners; },\r\n    configureStore: function () { return configureStore; },\r\n    createAction: function () { return createAction; },\r\n    createActionCreatorInvariantMiddleware: function () { return createActionCreatorInvariantMiddleware; },\r\n    createAsyncThunk: function () { return createAsyncThunk; },\r\n    createDraftSafeSelector: function () { return createDraftSafeSelector; },\r\n    createEntityAdapter: function () { return createEntityAdapter; },\r\n    createImmutableStateInvariantMiddleware: function () { return createImmutableStateInvariantMiddleware; },\r\n    createListenerMiddleware: function () { return createListenerMiddleware; },\r\n    createNextState: function () { return import_immer6.default; },\r\n    createReducer: function () { return createReducer; },\r\n    createSelector: function () { return import_reselect2.createSelector; },\r\n    createSerializableStateInvariantMiddleware: function () { return createSerializableStateInvariantMiddleware; },\r\n    createSlice: function () { return createSlice; },\r\n    current: function () { return import_immer6.current; },\r\n    findNonSerializableValue: function () { return findNonSerializableValue; },\r\n    freeze: function () { return import_immer6.freeze; },\r\n    getDefaultMiddleware: function () { return getDefaultMiddleware; },\r\n    getType: function () { return getType; },\r\n    isAction: function () { return isAction; },\r\n    isActionCreator: function () { return isActionCreator; },\r\n    isAllOf: function () { return isAllOf; },\r\n    isAnyOf: function () { return isAnyOf; },\r\n    isAsyncThunkAction: function () { return isAsyncThunkAction; },\r\n    isDraft: function () { return import_immer6.isDraft; },\r\n    isFluxStandardAction: function () { return isFSA; },\r\n    isFulfilled: function () { return isFulfilled; },\r\n    isImmutableDefault: function () { return isImmutableDefault; },\r\n    isPending: function () { return isPending; },\r\n    isPlain: function () { return isPlain; },\r\n    isPlainObject: function () { return isPlainObject; },\r\n    isRejected: function () { return isRejected; },\r\n    isRejectedWithValue: function () { return isRejectedWithValue; },\r\n    miniSerializeError: function () { return miniSerializeError; },\r\n    nanoid: function () { return nanoid; },\r\n    original: function () { return import_immer6.original; },\r\n    prepareAutoBatched: function () { return prepareAutoBatched; },\r\n    removeListener: function () { return removeListener; },\r\n    unwrapResult: function () { return unwrapResult; }\r\n});\r\nvar import_immer5 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\n__reExport(exports, __toModule(__webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/lib/redux.js\")));\r\nvar import_immer6 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nvar import_reselect2 = __toModule(__webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/lib/index.js\"));\r\n// src/createDraftSafeSelector.ts\r\nvar import_immer = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nvar import_reselect = __toModule(__webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/lib/index.js\"));\r\nvar createDraftSafeSelector = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    var selector = (0, import_reselect.createSelector).apply(void 0, args);\r\n    var wrappedSelector = function (value) {\r\n        var rest = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            rest[_i - 1] = arguments[_i];\r\n        }\r\n        return selector.apply(void 0, __spreadArray([(0, import_immer.isDraft)(value) ? (0, import_immer.current)(value) : value], rest));\r\n    };\r\n    return wrappedSelector;\r\n};\r\n// src/configureStore.ts\r\nvar import_redux2 = __toModule(__webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/lib/redux.js\"));\r\n// src/devtoolsExtension.ts\r\nvar import_redux = __toModule(__webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/lib/redux.js\"));\r\nvar composeWithDevTools = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {\r\n    if (arguments.length === 0)\r\n        return void 0;\r\n    if (typeof arguments[0] === \"object\")\r\n        return import_redux.compose;\r\n    return import_redux.compose.apply(null, arguments);\r\n};\r\nvar devToolsEnhancer = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {\r\n    return function (noop2) {\r\n        return noop2;\r\n    };\r\n};\r\n// src/isPlainObject.ts\r\nfunction isPlainObject(value) {\r\n    if (typeof value !== \"object\" || value === null)\r\n        return false;\r\n    var proto = Object.getPrototypeOf(value);\r\n    if (proto === null)\r\n        return true;\r\n    var baseProto = proto;\r\n    while (Object.getPrototypeOf(baseProto) !== null) {\r\n        baseProto = Object.getPrototypeOf(baseProto);\r\n    }\r\n    return proto === baseProto;\r\n}\r\n// src/getDefaultMiddleware.ts\r\nvar import_redux_thunk = __toModule(__webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/lib/index.js\"));\r\n// src/tsHelpers.ts\r\nvar hasMatchFunction = function (v) {\r\n    return v && typeof v.match === \"function\";\r\n};\r\n// src/createAction.ts\r\nfunction createAction(type, prepareAction) {\r\n    function actionCreator() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (prepareAction) {\r\n            var prepared = prepareAction.apply(void 0, args);\r\n            if (!prepared) {\r\n                throw new Error(\"prepareAction did not return an object\");\r\n            }\r\n            return __spreadValues(__spreadValues({\r\n                type: type,\r\n                payload: prepared.payload\r\n            }, \"meta\" in prepared && { meta: prepared.meta }), \"error\" in prepared && { error: prepared.error });\r\n        }\r\n        return { type: type, payload: args[0] };\r\n    }\r\n    actionCreator.toString = function () { return \"\" + type; };\r\n    actionCreator.type = type;\r\n    actionCreator.match = function (action) { return action.type === type; };\r\n    return actionCreator;\r\n}\r\nfunction isAction(action) {\r\n    return isPlainObject(action) && \"type\" in action;\r\n}\r\nfunction isActionCreator(action) {\r\n    return typeof action === \"function\" && \"type\" in action && hasMatchFunction(action);\r\n}\r\nfunction isFSA(action) {\r\n    return isAction(action) && typeof action.type === \"string\" && Object.keys(action).every(isValidKey);\r\n}\r\nfunction isValidKey(key) {\r\n    return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\r\n}\r\nfunction getType(actionCreator) {\r\n    return \"\" + actionCreator;\r\n}\r\n// src/actionCreatorInvariantMiddleware.ts\r\nfunction getMessage(type) {\r\n    var splitType = type ? (\"\" + type).split(\"/\") : [];\r\n    var actionName = splitType[splitType.length - 1] || \"actionCreator\";\r\n    return \"Detected an action creator with type \\\"\" + (type || \"unknown\") + \"\\\" being dispatched. \\nMake sure you're calling the action creator before dispatching, i.e. `dispatch(\" + actionName + \"())` instead of `dispatch(\" + actionName + \")`. This is necessary even if the action has no payload.\";\r\n}\r\nfunction createActionCreatorInvariantMiddleware(options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (false) {}\r\n    var _c = options.isActionCreator, isActionCreator2 = _c === void 0 ? isActionCreator : _c;\r\n    return function () { return function (next) { return function (action) {\r\n        if (isActionCreator2(action)) {\r\n            console.warn(getMessage(action.type));\r\n        }\r\n        return next(action);\r\n    }; }; };\r\n}\r\n// src/utils.ts\r\nvar import_immer2 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nfunction getTimeMeasureUtils(maxDelay, fnName) {\r\n    var elapsed = 0;\r\n    return {\r\n        measureTime: function (fn) {\r\n            var started = Date.now();\r\n            try {\r\n                return fn();\r\n            }\r\n            finally {\r\n                var finished = Date.now();\r\n                elapsed += finished - started;\r\n            }\r\n        },\r\n        warnIfExceeded: function () {\r\n            if (elapsed > maxDelay) {\r\n                console.warn(fnName + \" took \" + elapsed + \"ms, which is more than the warning threshold of \" + maxDelay + \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\");\r\n            }\r\n        }\r\n    };\r\n}\r\nvar MiddlewareArray = /** @class */ (function (_super) {\r\n    __extends(MiddlewareArray, _super);\r\n    function MiddlewareArray() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var _this = _super.apply(this, args) || this;\r\n        Object.setPrototypeOf(_this, MiddlewareArray.prototype);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MiddlewareArray, Symbol.species, {\r\n        get: function () {\r\n            return MiddlewareArray;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    MiddlewareArray.prototype.concat = function () {\r\n        var arr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arr[_i] = arguments[_i];\r\n        }\r\n        return _super.prototype.concat.apply(this, arr);\r\n    };\r\n    MiddlewareArray.prototype.prepend = function () {\r\n        var arr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arr[_i] = arguments[_i];\r\n        }\r\n        if (arr.length === 1 && Array.isArray(arr[0])) {\r\n            return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();\r\n        }\r\n        return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();\r\n    };\r\n    return MiddlewareArray;\r\n}(Array));\r\nvar EnhancerArray = /** @class */ (function (_super) {\r\n    __extends(EnhancerArray, _super);\r\n    function EnhancerArray() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var _this = _super.apply(this, args) || this;\r\n        Object.setPrototypeOf(_this, EnhancerArray.prototype);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(EnhancerArray, Symbol.species, {\r\n        get: function () {\r\n            return EnhancerArray;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EnhancerArray.prototype.concat = function () {\r\n        var arr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arr[_i] = arguments[_i];\r\n        }\r\n        return _super.prototype.concat.apply(this, arr);\r\n    };\r\n    EnhancerArray.prototype.prepend = function () {\r\n        var arr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arr[_i] = arguments[_i];\r\n        }\r\n        if (arr.length === 1 && Array.isArray(arr[0])) {\r\n            return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([void 0], arr[0].concat(this))))();\r\n        }\r\n        return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([void 0], arr.concat(this))))();\r\n    };\r\n    return EnhancerArray;\r\n}(Array));\r\nfunction freezeDraftable(val) {\r\n    return (0, import_immer2.isDraftable)(val) ? (0, import_immer2.default)(val, function () {\r\n    }) : val;\r\n}\r\n// src/immutableStateInvariantMiddleware.ts\r\nvar isProduction = false;\r\nvar prefix = \"Invariant failed\";\r\nfunction invariant(condition, message) {\r\n    if (condition) {\r\n        return;\r\n    }\r\n    if (isProduction) {\r\n        throw new Error(prefix);\r\n    }\r\n    throw new Error(prefix + \": \" + (message || \"\"));\r\n}\r\nfunction stringify(obj, serializer, indent, decycler) {\r\n    return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\r\n}\r\nfunction getSerialize(serializer, decycler) {\r\n    var stack = [], keys = [];\r\n    if (!decycler)\r\n        decycler = function (_, value) {\r\n            if (stack[0] === value)\r\n                return \"[Circular ~]\";\r\n            return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\r\n        };\r\n    return function (key, value) {\r\n        if (stack.length > 0) {\r\n            var thisPos = stack.indexOf(this);\r\n            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\r\n            ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\r\n            if (~stack.indexOf(value))\r\n                value = decycler.call(this, key, value);\r\n        }\r\n        else\r\n            stack.push(value);\r\n        return serializer == null ? value : serializer.call(this, key, value);\r\n    };\r\n}\r\nfunction isImmutableDefault(value) {\r\n    return typeof value !== \"object\" || value == null || Object.isFrozen(value);\r\n}\r\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\r\n    var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\r\n    return {\r\n        detectMutations: function () {\r\n            return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\r\n        }\r\n    };\r\n}\r\nfunction trackProperties(isImmutable, ignorePaths, obj, path, checkedObjects) {\r\n    if (ignorePaths === void 0) { ignorePaths = []; }\r\n    if (path === void 0) { path = \"\"; }\r\n    if (checkedObjects === void 0) { checkedObjects = new Set(); }\r\n    var tracked = { value: obj };\r\n    if (!isImmutable(obj) && !checkedObjects.has(obj)) {\r\n        checkedObjects.add(obj);\r\n        tracked.children = {};\r\n        for (var key in obj) {\r\n            var childPath = path ? path + \".\" + key : key;\r\n            if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\r\n                continue;\r\n            }\r\n            tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\r\n        }\r\n    }\r\n    return tracked;\r\n}\r\nfunction detectMutations(isImmutable, ignoredPaths, trackedProperty, obj, sameParentRef, path) {\r\n    if (ignoredPaths === void 0) { ignoredPaths = []; }\r\n    if (sameParentRef === void 0) { sameParentRef = false; }\r\n    if (path === void 0) { path = \"\"; }\r\n    var prevObj = trackedProperty ? trackedProperty.value : void 0;\r\n    var sameRef = prevObj === obj;\r\n    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\r\n        return { wasMutated: true, path: path };\r\n    }\r\n    if (isImmutable(prevObj) || isImmutable(obj)) {\r\n        return { wasMutated: false };\r\n    }\r\n    var keysToDetect = {};\r\n    for (var key in trackedProperty.children) {\r\n        keysToDetect[key] = true;\r\n    }\r\n    for (var key in obj) {\r\n        keysToDetect[key] = true;\r\n    }\r\n    var hasIgnoredPaths = ignoredPaths.length > 0;\r\n    var _loop_2 = function (key) {\r\n        var nestedPath = path ? path + \".\" + key : key;\r\n        if (hasIgnoredPaths) {\r\n            var hasMatches = ignoredPaths.some(function (ignored) {\r\n                if (ignored instanceof RegExp) {\r\n                    return ignored.test(nestedPath);\r\n                }\r\n                return nestedPath === ignored;\r\n            });\r\n            if (hasMatches) {\r\n                return \"continue\";\r\n            }\r\n        }\r\n        var result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\r\n        if (result.wasMutated) {\r\n            return { value: result };\r\n        }\r\n    };\r\n    for (var key in keysToDetect) {\r\n        var state_1 = _loop_2(key);\r\n        if (typeof state_1 === \"object\")\r\n            return state_1.value;\r\n    }\r\n    return { wasMutated: false };\r\n}\r\nfunction createImmutableStateInvariantMiddleware(options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (false) {}\r\n    var _c = options.isImmutable, isImmutable = _c === void 0 ? isImmutableDefault : _c, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;\r\n    ignoredPaths = ignoredPaths || ignore;\r\n    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\r\n    return function (_c) {\r\n        var getState = _c.getState;\r\n        var state = getState();\r\n        var tracker = track(state);\r\n        var result;\r\n        return function (next) { return function (action) {\r\n            var measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\r\n            measureUtils.measureTime(function () {\r\n                state = getState();\r\n                result = tracker.detectMutations();\r\n                tracker = track(state);\r\n                invariant(!result.wasMutated, \"A state mutation was detected between dispatches, in the path '\" + (result.path || \"\") + \"'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\r\n            });\r\n            var dispatchedAction = next(action);\r\n            measureUtils.measureTime(function () {\r\n                state = getState();\r\n                result = tracker.detectMutations();\r\n                tracker = track(state);\r\n                result.wasMutated && invariant(!result.wasMutated, \"A state mutation was detected inside a dispatch, in the path: \" + (result.path || \"\") + \". Take a look at the reducer(s) handling the action \" + stringify(action) + \". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\r\n            });\r\n            measureUtils.warnIfExceeded();\r\n            return dispatchedAction;\r\n        }; };\r\n    };\r\n}\r\n// src/serializableStateInvariantMiddleware.ts\r\nfunction isPlain(val) {\r\n    var type = typeof val;\r\n    return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || isPlainObject(val);\r\n}\r\nfunction findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths, cache) {\r\n    if (path === void 0) { path = \"\"; }\r\n    if (isSerializable === void 0) { isSerializable = isPlain; }\r\n    if (ignoredPaths === void 0) { ignoredPaths = []; }\r\n    var foundNestedSerializable;\r\n    if (!isSerializable(value)) {\r\n        return {\r\n            keyPath: path || \"<root>\",\r\n            value: value\r\n        };\r\n    }\r\n    if (typeof value !== \"object\" || value === null) {\r\n        return false;\r\n    }\r\n    if (cache == null ? void 0 : cache.has(value))\r\n        return false;\r\n    var entries = getEntries != null ? getEntries(value) : Object.entries(value);\r\n    var hasIgnoredPaths = ignoredPaths.length > 0;\r\n    var _loop_3 = function (key, nestedValue) {\r\n        var nestedPath = path ? path + \".\" + key : key;\r\n        if (hasIgnoredPaths) {\r\n            var hasMatches = ignoredPaths.some(function (ignored) {\r\n                if (ignored instanceof RegExp) {\r\n                    return ignored.test(nestedPath);\r\n                }\r\n                return nestedPath === ignored;\r\n            });\r\n            if (hasMatches) {\r\n                return \"continue\";\r\n            }\r\n        }\r\n        if (!isSerializable(nestedValue)) {\r\n            return { value: {\r\n                    keyPath: nestedPath,\r\n                    value: nestedValue\r\n                } };\r\n        }\r\n        if (typeof nestedValue === \"object\") {\r\n            foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\r\n            if (foundNestedSerializable) {\r\n                return { value: foundNestedSerializable };\r\n            }\r\n        }\r\n    };\r\n    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n        var _c = entries_1[_i], key = _c[0], nestedValue = _c[1];\r\n        var state_2 = _loop_3(key, nestedValue);\r\n        if (typeof state_2 === \"object\")\r\n            return state_2.value;\r\n    }\r\n    if (cache && isNestedFrozen(value))\r\n        cache.add(value);\r\n    return false;\r\n}\r\nfunction isNestedFrozen(value) {\r\n    if (!Object.isFrozen(value))\r\n        return false;\r\n    for (var _i = 0, _c = Object.values(value); _i < _c.length; _i++) {\r\n        var nestedValue = _c[_i];\r\n        if (typeof nestedValue !== \"object\" || nestedValue === null)\r\n            continue;\r\n        if (!isNestedFrozen(nestedValue))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction createSerializableStateInvariantMiddleware(options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (false) {}\r\n    var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e = options.ignoredActionPaths, ignoredActionPaths = _e === void 0 ? [\"meta.arg\", \"meta.baseQueryMeta\"] : _e, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j, _k = options.disableCache, disableCache = _k === void 0 ? false : _k;\r\n    var cache = !disableCache && WeakSet ? new WeakSet() : void 0;\r\n    return function (storeAPI) { return function (next) { return function (action) {\r\n        var result = next(action);\r\n        var measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\r\n        if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\r\n            measureUtils.measureTime(function () {\r\n                var foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\r\n                if (foundActionNonSerializableValue) {\r\n                    var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;\r\n                    console.error(\"A non-serializable value was detected in an action, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\r\n                }\r\n            });\r\n        }\r\n        if (!ignoreState) {\r\n            measureUtils.measureTime(function () {\r\n                var state = storeAPI.getState();\r\n                var foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\r\n                if (foundStateNonSerializableValue) {\r\n                    var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;\r\n                    console.error(\"A non-serializable value was detected in the state, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the reducer(s) handling this action type: \" + action.type + \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\");\r\n                }\r\n            });\r\n            measureUtils.warnIfExceeded();\r\n        }\r\n        return result;\r\n    }; }; };\r\n}\r\n// src/getDefaultMiddleware.ts\r\nfunction isBoolean(x) {\r\n    return typeof x === \"boolean\";\r\n}\r\nfunction curryGetDefaultMiddleware() {\r\n    return function curriedGetDefaultMiddleware(options) {\r\n        return getDefaultMiddleware(options);\r\n    };\r\n}\r\nfunction getDefaultMiddleware(options) {\r\n    if (options === void 0) { options = {}; }\r\n    var _c = options.thunk, thunk = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e = options.serializableCheck, serializableCheck = _e === void 0 ? true : _e, _f = options.actionCreatorCheck, actionCreatorCheck = _f === void 0 ? true : _f;\r\n    var middlewareArray = new MiddlewareArray();\r\n    if (thunk) {\r\n        if (isBoolean(thunk)) {\r\n            middlewareArray.push(import_redux_thunk.default);\r\n        }\r\n        else {\r\n            middlewareArray.push(import_redux_thunk.default.withExtraArgument(thunk.extraArgument));\r\n        }\r\n    }\r\n    if (true) {\r\n        if (immutableCheck) {\r\n            var immutableOptions = {};\r\n            if (!isBoolean(immutableCheck)) {\r\n                immutableOptions = immutableCheck;\r\n            }\r\n            middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\r\n        }\r\n        if (serializableCheck) {\r\n            var serializableOptions = {};\r\n            if (!isBoolean(serializableCheck)) {\r\n                serializableOptions = serializableCheck;\r\n            }\r\n            middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\r\n        }\r\n        if (actionCreatorCheck) {\r\n            var actionCreatorOptions = {};\r\n            if (!isBoolean(actionCreatorCheck)) {\r\n                actionCreatorOptions = actionCreatorCheck;\r\n            }\r\n            middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\r\n        }\r\n    }\r\n    return middlewareArray;\r\n}\r\n// src/configureStore.ts\r\nvar IS_PRODUCTION = false;\r\nfunction configureStore(options) {\r\n    var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();\r\n    var _c = options || {}, _d = _c.reducer, reducer = _d === void 0 ? void 0 : _d, _e = _c.middleware, middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;\r\n    var rootReducer;\r\n    if (typeof reducer === \"function\") {\r\n        rootReducer = reducer;\r\n    }\r\n    else if (isPlainObject(reducer)) {\r\n        rootReducer = (0, import_redux2.combineReducers)(reducer);\r\n    }\r\n    else {\r\n        throw new Error('\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\r\n    }\r\n    var finalMiddleware = middleware;\r\n    if (typeof finalMiddleware === \"function\") {\r\n        finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);\r\n        if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\r\n            throw new Error(\"when using a middleware builder function, an array of middleware must be returned\");\r\n        }\r\n    }\r\n    if (!IS_PRODUCTION && finalMiddleware.some(function (item) { return typeof item !== \"function\"; })) {\r\n        throw new Error(\"each middleware provided to configureStore must be a function\");\r\n    }\r\n    var middlewareEnhancer = (0, import_redux2.applyMiddleware).apply(void 0, finalMiddleware);\r\n    var finalCompose = import_redux2.compose;\r\n    if (devTools) {\r\n        finalCompose = composeWithDevTools(__spreadValues({\r\n            trace: !IS_PRODUCTION\r\n        }, typeof devTools === \"object\" && devTools));\r\n    }\r\n    var defaultEnhancers = new EnhancerArray(middlewareEnhancer);\r\n    var storeEnhancers = defaultEnhancers;\r\n    if (Array.isArray(enhancers)) {\r\n        storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);\r\n    }\r\n    else if (typeof enhancers === \"function\") {\r\n        storeEnhancers = enhancers(defaultEnhancers);\r\n    }\r\n    var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);\r\n    return (0, import_redux2.createStore)(rootReducer, preloadedState, composedEnhancer);\r\n}\r\n// src/createReducer.ts\r\nvar import_immer3 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\n// src/mapBuilders.ts\r\nfunction executeReducerBuilderCallback(builderCallback) {\r\n    var actionsMap = {};\r\n    var actionMatchers = [];\r\n    var defaultCaseReducer;\r\n    var builder = {\r\n        addCase: function (typeOrActionCreator, reducer) {\r\n            if (true) {\r\n                if (actionMatchers.length > 0) {\r\n                    throw new Error(\"`builder.addCase` should only be called before calling `builder.addMatcher`\");\r\n                }\r\n                if (defaultCaseReducer) {\r\n                    throw new Error(\"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\r\n                }\r\n            }\r\n            var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\r\n            if (!type) {\r\n                throw new Error(\"`builder.addCase` cannot be called with an empty action type\");\r\n            }\r\n            if (type in actionsMap) {\r\n                throw new Error(\"`builder.addCase` cannot be called with two reducers for the same action type\");\r\n            }\r\n            actionsMap[type] = reducer;\r\n            return builder;\r\n        },\r\n        addMatcher: function (matcher, reducer) {\r\n            if (true) {\r\n                if (defaultCaseReducer) {\r\n                    throw new Error(\"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\r\n                }\r\n            }\r\n            actionMatchers.push({ matcher: matcher, reducer: reducer });\r\n            return builder;\r\n        },\r\n        addDefaultCase: function (reducer) {\r\n            if (true) {\r\n                if (defaultCaseReducer) {\r\n                    throw new Error(\"`builder.addDefaultCase` can only be called once\");\r\n                }\r\n            }\r\n            defaultCaseReducer = reducer;\r\n            return builder;\r\n        }\r\n    };\r\n    builderCallback(builder);\r\n    return [actionsMap, actionMatchers, defaultCaseReducer];\r\n}\r\n// src/createReducer.ts\r\nfunction isStateFunction(x) {\r\n    return typeof x === \"function\";\r\n}\r\nvar hasWarnedAboutObjectNotation = false;\r\nfunction createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {\r\n    if (actionMatchers === void 0) { actionMatchers = []; }\r\n    if (true) {\r\n        if (typeof mapOrBuilderCallback === \"object\") {\r\n            if (!hasWarnedAboutObjectNotation) {\r\n                hasWarnedAboutObjectNotation = true;\r\n                console.warn(\"The object notation for `createReducer` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\r\n            }\r\n        }\r\n    }\r\n    var _c = typeof mapOrBuilderCallback === \"function\" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];\r\n    var getInitialState;\r\n    if (isStateFunction(initialState)) {\r\n        getInitialState = function () { return freezeDraftable(initialState()); };\r\n    }\r\n    else {\r\n        var frozenInitialState_1 = freezeDraftable(initialState);\r\n        getInitialState = function () { return frozenInitialState_1; };\r\n    }\r\n    function reducer(state, action) {\r\n        if (state === void 0) { state = getInitialState(); }\r\n        var caseReducers = __spreadArray([\r\n            actionsMap[action.type]\r\n        ], finalActionMatchers.filter(function (_c) {\r\n            var matcher = _c.matcher;\r\n            return matcher(action);\r\n        }).map(function (_c) {\r\n            var reducer2 = _c.reducer;\r\n            return reducer2;\r\n        }));\r\n        if (caseReducers.filter(function (cr) { return !!cr; }).length === 0) {\r\n            caseReducers = [finalDefaultCaseReducer];\r\n        }\r\n        return caseReducers.reduce(function (previousState, caseReducer) {\r\n            if (caseReducer) {\r\n                if ((0, import_immer3.isDraft)(previousState)) {\r\n                    var draft = previousState;\r\n                    var result = caseReducer(draft, action);\r\n                    if (result === void 0) {\r\n                        return previousState;\r\n                    }\r\n                    return result;\r\n                }\r\n                else if (!(0, import_immer3.isDraftable)(previousState)) {\r\n                    var result = caseReducer(previousState, action);\r\n                    if (result === void 0) {\r\n                        if (previousState === null) {\r\n                            return previousState;\r\n                        }\r\n                        throw Error(\"A case reducer on a non-draftable value must not return undefined\");\r\n                    }\r\n                    return result;\r\n                }\r\n                else {\r\n                    return (0, import_immer3.default)(previousState, function (draft) {\r\n                        return caseReducer(draft, action);\r\n                    });\r\n                }\r\n            }\r\n            return previousState;\r\n        }, state);\r\n    }\r\n    reducer.getInitialState = getInitialState;\r\n    return reducer;\r\n}\r\n// src/createSlice.ts\r\nvar hasWarnedAboutObjectNotation2 = false;\r\nfunction getType2(slice, actionKey) {\r\n    return slice + \"/\" + actionKey;\r\n}\r\nfunction createSlice(options) {\r\n    var name = options.name;\r\n    if (!name) {\r\n        throw new Error(\"`name` is a required option for createSlice\");\r\n    }\r\n    if (typeof process !== \"undefined\" && true) {\r\n        if (options.initialState === void 0) {\r\n            console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\r\n        }\r\n    }\r\n    var initialState = typeof options.initialState == \"function\" ? options.initialState : freezeDraftable(options.initialState);\r\n    var reducers = options.reducers || {};\r\n    var reducerNames = Object.keys(reducers);\r\n    var sliceCaseReducersByName = {};\r\n    var sliceCaseReducersByType = {};\r\n    var actionCreators = {};\r\n    reducerNames.forEach(function (reducerName) {\r\n        var maybeReducerWithPrepare = reducers[reducerName];\r\n        var type = getType2(name, reducerName);\r\n        var caseReducer;\r\n        var prepareCallback;\r\n        if (\"reducer\" in maybeReducerWithPrepare) {\r\n            caseReducer = maybeReducerWithPrepare.reducer;\r\n            prepareCallback = maybeReducerWithPrepare.prepare;\r\n        }\r\n        else {\r\n            caseReducer = maybeReducerWithPrepare;\r\n        }\r\n        sliceCaseReducersByName[reducerName] = caseReducer;\r\n        sliceCaseReducersByType[type] = caseReducer;\r\n        actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);\r\n    });\r\n    function buildReducer() {\r\n        if (true) {\r\n            if (typeof options.extraReducers === \"object\") {\r\n                if (!hasWarnedAboutObjectNotation2) {\r\n                    hasWarnedAboutObjectNotation2 = true;\r\n                    console.warn(\"The object notation for `createSlice.extraReducers` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\r\n                }\r\n            }\r\n        }\r\n        var _c = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;\r\n        var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);\r\n        return createReducer(initialState, function (builder) {\r\n            for (var key in finalCaseReducers) {\r\n                builder.addCase(key, finalCaseReducers[key]);\r\n            }\r\n            for (var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++) {\r\n                var m = actionMatchers_1[_i];\r\n                builder.addMatcher(m.matcher, m.reducer);\r\n            }\r\n            if (defaultCaseReducer) {\r\n                builder.addDefaultCase(defaultCaseReducer);\r\n            }\r\n        });\r\n    }\r\n    var _reducer;\r\n    return {\r\n        name: name,\r\n        reducer: function (state, action) {\r\n            if (!_reducer)\r\n                _reducer = buildReducer();\r\n            return _reducer(state, action);\r\n        },\r\n        actions: actionCreators,\r\n        caseReducers: sliceCaseReducersByName,\r\n        getInitialState: function () {\r\n            if (!_reducer)\r\n                _reducer = buildReducer();\r\n            return _reducer.getInitialState();\r\n        }\r\n    };\r\n}\r\n// src/entities/entity_state.ts\r\nfunction getInitialEntityState() {\r\n    return {\r\n        ids: [],\r\n        entities: {}\r\n    };\r\n}\r\nfunction createInitialStateFactory() {\r\n    function getInitialState(additionalState) {\r\n        if (additionalState === void 0) { additionalState = {}; }\r\n        return Object.assign(getInitialEntityState(), additionalState);\r\n    }\r\n    return { getInitialState: getInitialState };\r\n}\r\n// src/entities/state_selectors.ts\r\nfunction createSelectorsFactory() {\r\n    function getSelectors(selectState) {\r\n        var selectIds = function (state) { return state.ids; };\r\n        var selectEntities = function (state) { return state.entities; };\r\n        var selectAll = createDraftSafeSelector(selectIds, selectEntities, function (ids, entities) { return ids.map(function (id) { return entities[id]; }); });\r\n        var selectId = function (_, id) { return id; };\r\n        var selectById = function (entities, id) { return entities[id]; };\r\n        var selectTotal = createDraftSafeSelector(selectIds, function (ids) { return ids.length; });\r\n        if (!selectState) {\r\n            return {\r\n                selectIds: selectIds,\r\n                selectEntities: selectEntities,\r\n                selectAll: selectAll,\r\n                selectTotal: selectTotal,\r\n                selectById: createDraftSafeSelector(selectEntities, selectId, selectById)\r\n            };\r\n        }\r\n        var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);\r\n        return {\r\n            selectIds: createDraftSafeSelector(selectState, selectIds),\r\n            selectEntities: selectGlobalizedEntities,\r\n            selectAll: createDraftSafeSelector(selectState, selectAll),\r\n            selectTotal: createDraftSafeSelector(selectState, selectTotal),\r\n            selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)\r\n        };\r\n    }\r\n    return { getSelectors: getSelectors };\r\n}\r\n// src/entities/state_adapter.ts\r\nvar import_immer4 = __toModule(__webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/index.js\"));\r\nfunction createSingleArgumentStateOperator(mutator) {\r\n    var operator = createStateOperator(function (_, state) { return mutator(state); });\r\n    return function operation(state) {\r\n        return operator(state, void 0);\r\n    };\r\n}\r\nfunction createStateOperator(mutator) {\r\n    return function operation(state, arg) {\r\n        function isPayloadActionArgument(arg2) {\r\n            return isFSA(arg2);\r\n        }\r\n        var runMutator = function (draft) {\r\n            if (isPayloadActionArgument(arg)) {\r\n                mutator(arg.payload, draft);\r\n            }\r\n            else {\r\n                mutator(arg, draft);\r\n            }\r\n        };\r\n        if ((0, import_immer4.isDraft)(state)) {\r\n            runMutator(state);\r\n            return state;\r\n        }\r\n        else {\r\n            return (0, import_immer4.default)(state, runMutator);\r\n        }\r\n    };\r\n}\r\n// src/entities/utils.ts\r\nfunction selectIdValue(entity, selectId) {\r\n    var key = selectId(entity);\r\n    if (key === void 0) {\r\n        console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\r\n    }\r\n    return key;\r\n}\r\nfunction ensureEntitiesArray(entities) {\r\n    if (!Array.isArray(entities)) {\r\n        entities = Object.values(entities);\r\n    }\r\n    return entities;\r\n}\r\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    var added = [];\r\n    var updated = [];\r\n    for (var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++) {\r\n        var entity = newEntities_1[_i];\r\n        var id = selectIdValue(entity, selectId);\r\n        if (id in state.entities) {\r\n            updated.push({ id: id, changes: entity });\r\n        }\r\n        else {\r\n            added.push(entity);\r\n        }\r\n    }\r\n    return [added, updated];\r\n}\r\n// src/entities/unsorted_state_adapter.ts\r\nfunction createUnsortedStateAdapter(selectId) {\r\n    function addOneMutably(entity, state) {\r\n        var key = selectIdValue(entity, selectId);\r\n        if (key in state.entities) {\r\n            return;\r\n        }\r\n        state.ids.push(key);\r\n        state.entities[key] = entity;\r\n    }\r\n    function addManyMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        for (var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++) {\r\n            var entity = newEntities_2[_i];\r\n            addOneMutably(entity, state);\r\n        }\r\n    }\r\n    function setOneMutably(entity, state) {\r\n        var key = selectIdValue(entity, selectId);\r\n        if (!(key in state.entities)) {\r\n            state.ids.push(key);\r\n        }\r\n        state.entities[key] = entity;\r\n    }\r\n    function setManyMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        for (var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++) {\r\n            var entity = newEntities_3[_i];\r\n            setOneMutably(entity, state);\r\n        }\r\n    }\r\n    function setAllMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        state.ids = [];\r\n        state.entities = {};\r\n        addManyMutably(newEntities, state);\r\n    }\r\n    function removeOneMutably(key, state) {\r\n        return removeManyMutably([key], state);\r\n    }\r\n    function removeManyMutably(keys, state) {\r\n        var didMutate = false;\r\n        keys.forEach(function (key) {\r\n            if (key in state.entities) {\r\n                delete state.entities[key];\r\n                didMutate = true;\r\n            }\r\n        });\r\n        if (didMutate) {\r\n            state.ids = state.ids.filter(function (id) { return id in state.entities; });\r\n        }\r\n    }\r\n    function removeAllMutably(state) {\r\n        Object.assign(state, {\r\n            ids: [],\r\n            entities: {}\r\n        });\r\n    }\r\n    function takeNewKey(keys, update, state) {\r\n        var original2 = state.entities[update.id];\r\n        var updated = Object.assign({}, original2, update.changes);\r\n        var newKey = selectIdValue(updated, selectId);\r\n        var hasNewKey = newKey !== update.id;\r\n        if (hasNewKey) {\r\n            keys[update.id] = newKey;\r\n            delete state.entities[update.id];\r\n        }\r\n        state.entities[newKey] = updated;\r\n        return hasNewKey;\r\n    }\r\n    function updateOneMutably(update, state) {\r\n        return updateManyMutably([update], state);\r\n    }\r\n    function updateManyMutably(updates, state) {\r\n        var newKeys = {};\r\n        var updatesPerEntity = {};\r\n        updates.forEach(function (update) {\r\n            if (update.id in state.entities) {\r\n                updatesPerEntity[update.id] = {\r\n                    id: update.id,\r\n                    changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)\r\n                };\r\n            }\r\n        });\r\n        updates = Object.values(updatesPerEntity);\r\n        var didMutateEntities = updates.length > 0;\r\n        if (didMutateEntities) {\r\n            var didMutateIds = updates.filter(function (update) { return takeNewKey(newKeys, update, state); }).length > 0;\r\n            if (didMutateIds) {\r\n                state.ids = Object.keys(state.entities);\r\n            }\r\n        }\r\n    }\r\n    function upsertOneMutably(entity, state) {\r\n        return upsertManyMutably([entity], state);\r\n    }\r\n    function upsertManyMutably(newEntities, state) {\r\n        var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];\r\n        updateManyMutably(updated, state);\r\n        addManyMutably(added, state);\r\n    }\r\n    return {\r\n        removeAll: createSingleArgumentStateOperator(removeAllMutably),\r\n        addOne: createStateOperator(addOneMutably),\r\n        addMany: createStateOperator(addManyMutably),\r\n        setOne: createStateOperator(setOneMutably),\r\n        setMany: createStateOperator(setManyMutably),\r\n        setAll: createStateOperator(setAllMutably),\r\n        updateOne: createStateOperator(updateOneMutably),\r\n        updateMany: createStateOperator(updateManyMutably),\r\n        upsertOne: createStateOperator(upsertOneMutably),\r\n        upsertMany: createStateOperator(upsertManyMutably),\r\n        removeOne: createStateOperator(removeOneMutably),\r\n        removeMany: createStateOperator(removeManyMutably)\r\n    };\r\n}\r\n// src/entities/sorted_state_adapter.ts\r\nfunction createSortedStateAdapter(selectId, sort) {\r\n    var _c = createUnsortedStateAdapter(selectId), removeOne = _c.removeOne, removeMany = _c.removeMany, removeAll = _c.removeAll;\r\n    function addOneMutably(entity, state) {\r\n        return addManyMutably([entity], state);\r\n    }\r\n    function addManyMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        var models = newEntities.filter(function (model) { return !(selectIdValue(model, selectId) in state.entities); });\r\n        if (models.length !== 0) {\r\n            merge(models, state);\r\n        }\r\n    }\r\n    function setOneMutably(entity, state) {\r\n        return setManyMutably([entity], state);\r\n    }\r\n    function setManyMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        if (newEntities.length !== 0) {\r\n            merge(newEntities, state);\r\n        }\r\n    }\r\n    function setAllMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        state.entities = {};\r\n        state.ids = [];\r\n        addManyMutably(newEntities, state);\r\n    }\r\n    function updateOneMutably(update, state) {\r\n        return updateManyMutably([update], state);\r\n    }\r\n    function updateManyMutably(updates, state) {\r\n        var appliedUpdates = false;\r\n        for (var _i = 0, updates_1 = updates; _i < updates_1.length; _i++) {\r\n            var update = updates_1[_i];\r\n            var entity = state.entities[update.id];\r\n            if (!entity) {\r\n                continue;\r\n            }\r\n            appliedUpdates = true;\r\n            Object.assign(entity, update.changes);\r\n            var newId = selectId(entity);\r\n            if (update.id !== newId) {\r\n                delete state.entities[update.id];\r\n                state.entities[newId] = entity;\r\n            }\r\n        }\r\n        if (appliedUpdates) {\r\n            resortEntities(state);\r\n        }\r\n    }\r\n    function upsertOneMutably(entity, state) {\r\n        return upsertManyMutably([entity], state);\r\n    }\r\n    function upsertManyMutably(newEntities, state) {\r\n        var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];\r\n        updateManyMutably(updated, state);\r\n        addManyMutably(added, state);\r\n    }\r\n    function areArraysEqual(a, b) {\r\n        if (a.length !== b.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < a.length && i < b.length; i++) {\r\n            if (a[i] === b[i]) {\r\n                continue;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function merge(models, state) {\r\n        models.forEach(function (model) {\r\n            state.entities[selectId(model)] = model;\r\n        });\r\n        resortEntities(state);\r\n    }\r\n    function resortEntities(state) {\r\n        var allEntities = Object.values(state.entities);\r\n        allEntities.sort(sort);\r\n        var newSortedIds = allEntities.map(selectId);\r\n        var ids = state.ids;\r\n        if (!areArraysEqual(ids, newSortedIds)) {\r\n            state.ids = newSortedIds;\r\n        }\r\n    }\r\n    return {\r\n        removeOne: removeOne,\r\n        removeMany: removeMany,\r\n        removeAll: removeAll,\r\n        addOne: createStateOperator(addOneMutably),\r\n        updateOne: createStateOperator(updateOneMutably),\r\n        upsertOne: createStateOperator(upsertOneMutably),\r\n        setOne: createStateOperator(setOneMutably),\r\n        setMany: createStateOperator(setManyMutably),\r\n        setAll: createStateOperator(setAllMutably),\r\n        addMany: createStateOperator(addManyMutably),\r\n        updateMany: createStateOperator(updateManyMutably),\r\n        upsertMany: createStateOperator(upsertManyMutably)\r\n    };\r\n}\r\n// src/entities/create_adapter.ts\r\nfunction createEntityAdapter(options) {\r\n    if (options === void 0) { options = {}; }\r\n    var _c = __spreadValues({\r\n        sortComparer: false,\r\n        selectId: function (instance) { return instance.id; }\r\n    }, options), selectId = _c.selectId, sortComparer = _c.sortComparer;\r\n    var stateFactory = createInitialStateFactory();\r\n    var selectorsFactory = createSelectorsFactory();\r\n    var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\r\n    return __spreadValues(__spreadValues(__spreadValues({\r\n        selectId: selectId,\r\n        sortComparer: sortComparer\r\n    }, stateFactory), selectorsFactory), stateAdapter);\r\n}\r\n// src/nanoid.ts\r\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\r\nvar nanoid = function (size) {\r\n    if (size === void 0) { size = 21; }\r\n    var id = \"\";\r\n    var i = size;\r\n    while (i--) {\r\n        id += urlAlphabet[Math.random() * 64 | 0];\r\n    }\r\n    return id;\r\n};\r\n// src/createAsyncThunk.ts\r\nvar commonProperties = [\r\n    \"name\",\r\n    \"message\",\r\n    \"stack\",\r\n    \"code\"\r\n];\r\nvar RejectWithValue = /** @class */ (function () {\r\n    function RejectWithValue(payload, meta) {\r\n        this.payload = payload;\r\n        this.meta = meta;\r\n    }\r\n    return RejectWithValue;\r\n}());\r\nvar FulfillWithMeta = /** @class */ (function () {\r\n    function FulfillWithMeta(payload, meta) {\r\n        this.payload = payload;\r\n        this.meta = meta;\r\n    }\r\n    return FulfillWithMeta;\r\n}());\r\nvar miniSerializeError = function (value) {\r\n    if (typeof value === \"object\" && value !== null) {\r\n        var simpleError = {};\r\n        for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {\r\n            var property = commonProperties_1[_i];\r\n            if (typeof value[property] === \"string\") {\r\n                simpleError[property] = value[property];\r\n            }\r\n        }\r\n        return simpleError;\r\n    }\r\n    return { message: String(value) };\r\n};\r\nvar createAsyncThunk = (function () {\r\n    function createAsyncThunk2(typePrefix, payloadCreator, options) {\r\n        var fulfilled = createAction(typePrefix + \"/fulfilled\", function (payload, requestId, arg, meta) { return ({\r\n            payload: payload,\r\n            meta: __spreadProps(__spreadValues({}, meta || {}), {\r\n                arg: arg,\r\n                requestId: requestId,\r\n                requestStatus: \"fulfilled\"\r\n            })\r\n        }); });\r\n        var pending = createAction(typePrefix + \"/pending\", function (requestId, arg, meta) { return ({\r\n            payload: void 0,\r\n            meta: __spreadProps(__spreadValues({}, meta || {}), {\r\n                arg: arg,\r\n                requestId: requestId,\r\n                requestStatus: \"pending\"\r\n            })\r\n        }); });\r\n        var rejected = createAction(typePrefix + \"/rejected\", function (error, requestId, arg, payload, meta) { return ({\r\n            payload: payload,\r\n            error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\r\n            meta: __spreadProps(__spreadValues({}, meta || {}), {\r\n                arg: arg,\r\n                requestId: requestId,\r\n                rejectedWithValue: !!payload,\r\n                requestStatus: \"rejected\",\r\n                aborted: (error == null ? void 0 : error.name) === \"AbortError\",\r\n                condition: (error == null ? void 0 : error.name) === \"ConditionError\"\r\n            })\r\n        }); });\r\n        var displayedWarning = false;\r\n        var AC = typeof AbortController !== \"undefined\" ? AbortController : /** @class */ (function () {\r\n            function class_1() {\r\n                this.signal = {\r\n                    aborted: false,\r\n                    addEventListener: function () {\r\n                    },\r\n                    dispatchEvent: function () {\r\n                        return false;\r\n                    },\r\n                    onabort: function () {\r\n                    },\r\n                    removeEventListener: function () {\r\n                    },\r\n                    reason: void 0,\r\n                    throwIfAborted: function () {\r\n                    }\r\n                };\r\n            }\r\n            class_1.prototype.abort = function () {\r\n                if (true) {\r\n                    if (!displayedWarning) {\r\n                        displayedWarning = true;\r\n                        console.info(\"This platform does not implement AbortController. \\nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.\");\r\n                    }\r\n                }\r\n            };\r\n            return class_1;\r\n        }());\r\n        function actionCreator(arg) {\r\n            return function (dispatch, getState, extra) {\r\n                var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();\r\n                var abortController = new AC();\r\n                var abortReason;\r\n                var started = false;\r\n                function abort(reason) {\r\n                    abortReason = reason;\r\n                    abortController.abort();\r\n                }\r\n                var promise2 = function () {\r\n                    return __async(this, null, function () {\r\n                        var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;\r\n                        return __generator(this, function (_c) {\r\n                            switch (_c.label) {\r\n                                case 0:\r\n                                    _c.trys.push([0, 4, , 5]);\r\n                                    conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, { getState: getState, extra: extra });\r\n                                    if (!isThenable(conditionResult)) return [3 /*break*/, 2];\r\n                                    return [4 /*yield*/, conditionResult];\r\n                                case 1:\r\n                                    conditionResult = _c.sent();\r\n                                    _c.label = 2;\r\n                                case 2:\r\n                                    if (conditionResult === false || abortController.signal.aborted) {\r\n                                        throw {\r\n                                            name: \"ConditionError\",\r\n                                            message: \"Aborted due to condition callback returning false.\"\r\n                                        };\r\n                                    }\r\n                                    started = true;\r\n                                    abortedPromise = new Promise(function (_, reject) { return abortController.signal.addEventListener(\"abort\", function () { return reject({\r\n                                        name: \"AbortError\",\r\n                                        message: abortReason || \"Aborted\"\r\n                                    }); }); });\r\n                                    dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, { requestId: requestId, arg: arg }, { getState: getState, extra: extra })));\r\n                                    return [4 /*yield*/, Promise.race([\r\n                                            abortedPromise,\r\n                                            Promise.resolve(payloadCreator(arg, {\r\n                                                dispatch: dispatch,\r\n                                                getState: getState,\r\n                                                extra: extra,\r\n                                                requestId: requestId,\r\n                                                signal: abortController.signal,\r\n                                                abort: abort,\r\n                                                rejectWithValue: function (value, meta) {\r\n                                                    return new RejectWithValue(value, meta);\r\n                                                },\r\n                                                fulfillWithValue: function (value, meta) {\r\n                                                    return new FulfillWithMeta(value, meta);\r\n                                                }\r\n                                            })).then(function (result) {\r\n                                                if (result instanceof RejectWithValue) {\r\n                                                    throw result;\r\n                                                }\r\n                                                if (result instanceof FulfillWithMeta) {\r\n                                                    return fulfilled(result.payload, requestId, arg, result.meta);\r\n                                                }\r\n                                                return fulfilled(result, requestId, arg);\r\n                                            })\r\n                                        ])];\r\n                                case 3:\r\n                                    finalAction = _c.sent();\r\n                                    return [3 /*break*/, 5];\r\n                                case 4:\r\n                                    err_1 = _c.sent();\r\n                                    finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);\r\n                                    return [3 /*break*/, 5];\r\n                                case 5:\r\n                                    skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\r\n                                    if (!skipDispatch) {\r\n                                        dispatch(finalAction);\r\n                                    }\r\n                                    return [2 /*return*/, finalAction];\r\n                            }\r\n                        });\r\n                    });\r\n                }();\r\n                return Object.assign(promise2, {\r\n                    abort: abort,\r\n                    requestId: requestId,\r\n                    arg: arg,\r\n                    unwrap: function () {\r\n                        return promise2.then(unwrapResult);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        return Object.assign(actionCreator, {\r\n            pending: pending,\r\n            rejected: rejected,\r\n            fulfilled: fulfilled,\r\n            typePrefix: typePrefix\r\n        });\r\n    }\r\n    createAsyncThunk2.withTypes = function () { return createAsyncThunk2; };\r\n    return createAsyncThunk2;\r\n})();\r\nfunction unwrapResult(action) {\r\n    if (action.meta && action.meta.rejectedWithValue) {\r\n        throw action.payload;\r\n    }\r\n    if (action.error) {\r\n        throw action.error;\r\n    }\r\n    return action.payload;\r\n}\r\nfunction isThenable(value) {\r\n    return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\r\n}\r\n// src/matchers.ts\r\nvar matches = function (matcher, action) {\r\n    if (hasMatchFunction(matcher)) {\r\n        return matcher.match(action);\r\n    }\r\n    else {\r\n        return matcher(action);\r\n    }\r\n};\r\nfunction isAnyOf() {\r\n    var matchers = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        matchers[_i] = arguments[_i];\r\n    }\r\n    return function (action) {\r\n        return matchers.some(function (matcher) { return matches(matcher, action); });\r\n    };\r\n}\r\nfunction isAllOf() {\r\n    var matchers = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        matchers[_i] = arguments[_i];\r\n    }\r\n    return function (action) {\r\n        return matchers.every(function (matcher) { return matches(matcher, action); });\r\n    };\r\n}\r\nfunction hasExpectedRequestMetadata(action, validStatus) {\r\n    if (!action || !action.meta)\r\n        return false;\r\n    var hasValidRequestId = typeof action.meta.requestId === \"string\";\r\n    var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\r\n    return hasValidRequestId && hasValidRequestStatus;\r\n}\r\nfunction isAsyncThunkArray(a) {\r\n    return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\r\n}\r\nfunction isPending() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) { return hasExpectedRequestMetadata(action, [\"pending\"]); };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isPending()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var matchers = asyncThunks.map(function (asyncThunk) { return asyncThunk.pending; });\r\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\nfunction isRejected() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) { return hasExpectedRequestMetadata(action, [\"rejected\"]); };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isRejected()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var matchers = asyncThunks.map(function (asyncThunk) { return asyncThunk.rejected; });\r\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\nfunction isRejectedWithValue() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    var hasFlag = function (action) {\r\n        return action && action.meta && action.meta.rejectedWithValue;\r\n    };\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) {\r\n            var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\r\n            return combinedMatcher(action);\r\n        };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isRejectedWithValue()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\nfunction isFulfilled() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) { return hasExpectedRequestMetadata(action, [\"fulfilled\"]); };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isFulfilled()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var matchers = asyncThunks.map(function (asyncThunk) { return asyncThunk.fulfilled; });\r\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\nfunction isAsyncThunkAction() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) { return hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]); };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isAsyncThunkAction()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var matchers = [];\r\n        for (var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++) {\r\n            var asyncThunk = asyncThunks_1[_i];\r\n            matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);\r\n        }\r\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\n// src/listenerMiddleware/utils.ts\r\nvar assertFunction = function (func, expected) {\r\n    if (typeof func !== \"function\") {\r\n        throw new TypeError(expected + \" is not a function\");\r\n    }\r\n};\r\nvar noop = function () {\r\n};\r\nvar catchRejection = function (promise2, onError) {\r\n    if (onError === void 0) { onError = noop; }\r\n    promise2.catch(onError);\r\n    return promise2;\r\n};\r\nvar addAbortSignalListener = function (abortSignal, callback) {\r\n    abortSignal.addEventListener(\"abort\", callback, { once: true });\r\n    return function () { return abortSignal.removeEventListener(\"abort\", callback); };\r\n};\r\nvar abortControllerWithReason = function (abortController, reason) {\r\n    var signal = abortController.signal;\r\n    if (signal.aborted) {\r\n        return;\r\n    }\r\n    if (!(\"reason\" in signal)) {\r\n        Object.defineProperty(signal, \"reason\", {\r\n            enumerable: true,\r\n            value: reason,\r\n            configurable: true,\r\n            writable: true\r\n        });\r\n    }\r\n    ;\r\n    abortController.abort(reason);\r\n};\r\n// src/listenerMiddleware/exceptions.ts\r\nvar task = \"task\";\r\nvar listener = \"listener\";\r\nvar completed = \"completed\";\r\nvar cancelled = \"cancelled\";\r\nvar taskCancelled = \"task-\" + cancelled;\r\nvar taskCompleted = \"task-\" + completed;\r\nvar listenerCancelled = listener + \"-\" + cancelled;\r\nvar listenerCompleted = listener + \"-\" + completed;\r\nvar TaskAbortError = /** @class */ (function () {\r\n    function TaskAbortError(code) {\r\n        this.code = code;\r\n        this.name = \"TaskAbortError\";\r\n        this.message = task + \" \" + cancelled + \" (reason: \" + code + \")\";\r\n    }\r\n    return TaskAbortError;\r\n}());\r\n// src/listenerMiddleware/task.ts\r\nvar validateActive = function (signal) {\r\n    if (signal.aborted) {\r\n        throw new TaskAbortError(signal.reason);\r\n    }\r\n};\r\nfunction raceWithSignal(signal, promise2) {\r\n    var cleanup = noop;\r\n    return new Promise(function (resolve, reject) {\r\n        var notifyRejection = function () { return reject(new TaskAbortError(signal.reason)); };\r\n        if (signal.aborted) {\r\n            notifyRejection();\r\n            return;\r\n        }\r\n        cleanup = addAbortSignalListener(signal, notifyRejection);\r\n        promise2.finally(function () { return cleanup(); }).then(resolve, reject);\r\n    }).finally(function () {\r\n        cleanup = noop;\r\n    });\r\n}\r\nvar runTask = function (task2, cleanUp) { return __async(void 0, null, function () {\r\n    var value, error_1;\r\n    return __generator(this, function (_c) {\r\n        switch (_c.label) {\r\n            case 0:\r\n                _c.trys.push([0, 3, 4, 5]);\r\n                return [4 /*yield*/, Promise.resolve()];\r\n            case 1:\r\n                _c.sent();\r\n                return [4 /*yield*/, task2()];\r\n            case 2:\r\n                value = _c.sent();\r\n                return [2 /*return*/, {\r\n                        status: \"ok\",\r\n                        value: value\r\n                    }];\r\n            case 3:\r\n                error_1 = _c.sent();\r\n                return [2 /*return*/, {\r\n                        status: error_1 instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\r\n                        error: error_1\r\n                    }];\r\n            case 4:\r\n                cleanUp == null ? void 0 : cleanUp();\r\n                return [7 /*endfinally*/];\r\n            case 5: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nvar createPause = function (signal) {\r\n    return function (promise2) {\r\n        return catchRejection(raceWithSignal(signal, promise2).then(function (output) {\r\n            validateActive(signal);\r\n            return output;\r\n        }));\r\n    };\r\n};\r\nvar createDelay = function (signal) {\r\n    var pause = createPause(signal);\r\n    return function (timeoutMs) {\r\n        return pause(new Promise(function (resolve) { return setTimeout(resolve, timeoutMs); }));\r\n    };\r\n};\r\n// src/listenerMiddleware/index.ts\r\nvar assign = Object.assign;\r\nvar INTERNAL_NIL_TOKEN = {};\r\nvar alm = \"listenerMiddleware\";\r\nvar createFork = function (parentAbortSignal, parentBlockingPromises) {\r\n    var linkControllers = function (controller) { return addAbortSignalListener(parentAbortSignal, function () { return abortControllerWithReason(controller, parentAbortSignal.reason); }); };\r\n    return function (taskExecutor, opts) {\r\n        assertFunction(taskExecutor, \"taskExecutor\");\r\n        var childAbortController = new AbortController();\r\n        linkControllers(childAbortController);\r\n        var result = runTask(function () { return __async(void 0, null, function () {\r\n            var result2;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        validateActive(parentAbortSignal);\r\n                        validateActive(childAbortController.signal);\r\n                        return [4 /*yield*/, taskExecutor({\r\n                                pause: createPause(childAbortController.signal),\r\n                                delay: createDelay(childAbortController.signal),\r\n                                signal: childAbortController.signal\r\n                            })];\r\n                    case 1:\r\n                        result2 = _c.sent();\r\n                        validateActive(childAbortController.signal);\r\n                        return [2 /*return*/, result2];\r\n                }\r\n            });\r\n        }); }, function () { return abortControllerWithReason(childAbortController, taskCompleted); });\r\n        if (opts == null ? void 0 : opts.autoJoin) {\r\n            parentBlockingPromises.push(result);\r\n        }\r\n        return {\r\n            result: createPause(parentAbortSignal)(result),\r\n            cancel: function () {\r\n                abortControllerWithReason(childAbortController, taskCancelled);\r\n            }\r\n        };\r\n    };\r\n};\r\nvar createTakePattern = function (startListening, signal) {\r\n    var take = function (predicate, timeout) { return __async(void 0, null, function () {\r\n        var unsubscribe, tuplePromise, promises, output;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    validateActive(signal);\r\n                    unsubscribe = function () {\r\n                    };\r\n                    tuplePromise = new Promise(function (resolve, reject) {\r\n                        var stopListening = startListening({\r\n                            predicate: predicate,\r\n                            effect: function (action, listenerApi) {\r\n                                listenerApi.unsubscribe();\r\n                                resolve([\r\n                                    action,\r\n                                    listenerApi.getState(),\r\n                                    listenerApi.getOriginalState()\r\n                                ]);\r\n                            }\r\n                        });\r\n                        unsubscribe = function () {\r\n                            stopListening();\r\n                            reject();\r\n                        };\r\n                    });\r\n                    promises = [\r\n                        tuplePromise\r\n                    ];\r\n                    if (timeout != null) {\r\n                        promises.push(new Promise(function (resolve) { return setTimeout(resolve, timeout, null); }));\r\n                    }\r\n                    _c.label = 1;\r\n                case 1:\r\n                    _c.trys.push([1, , 3, 4]);\r\n                    return [4 /*yield*/, raceWithSignal(signal, Promise.race(promises))];\r\n                case 2:\r\n                    output = _c.sent();\r\n                    validateActive(signal);\r\n                    return [2 /*return*/, output];\r\n                case 3:\r\n                    unsubscribe();\r\n                    return [7 /*endfinally*/];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); };\r\n    return function (predicate, timeout) { return catchRejection(take(predicate, timeout)); };\r\n};\r\nvar getListenerEntryPropsFrom = function (options) {\r\n    var type = options.type, actionCreator = options.actionCreator, matcher = options.matcher, predicate = options.predicate, effect = options.effect;\r\n    if (type) {\r\n        predicate = createAction(type).match;\r\n    }\r\n    else if (actionCreator) {\r\n        type = actionCreator.type;\r\n        predicate = actionCreator.match;\r\n    }\r\n    else if (matcher) {\r\n        predicate = matcher;\r\n    }\r\n    else if (predicate) {\r\n    }\r\n    else {\r\n        throw new Error(\"Creating or removing a listener requires one of the known fields for matching an action\");\r\n    }\r\n    assertFunction(effect, \"options.listener\");\r\n    return { predicate: predicate, type: type, effect: effect };\r\n};\r\nvar createListenerEntry = function (options) {\r\n    var _c = getListenerEntryPropsFrom(options), type = _c.type, predicate = _c.predicate, effect = _c.effect;\r\n    var id = nanoid();\r\n    var entry = {\r\n        id: id,\r\n        effect: effect,\r\n        type: type,\r\n        predicate: predicate,\r\n        pending: new Set(),\r\n        unsubscribe: function () {\r\n            throw new Error(\"Unsubscribe not initialized\");\r\n        }\r\n    };\r\n    return entry;\r\n};\r\nvar cancelActiveListeners = function (entry) {\r\n    entry.pending.forEach(function (controller) {\r\n        abortControllerWithReason(controller, listenerCancelled);\r\n    });\r\n};\r\nvar createClearListenerMiddleware = function (listenerMap) {\r\n    return function () {\r\n        listenerMap.forEach(cancelActiveListeners);\r\n        listenerMap.clear();\r\n    };\r\n};\r\nvar safelyNotifyError = function (errorHandler, errorToNotify, errorInfo) {\r\n    try {\r\n        errorHandler(errorToNotify, errorInfo);\r\n    }\r\n    catch (errorHandlerError) {\r\n        setTimeout(function () {\r\n            throw errorHandlerError;\r\n        }, 0);\r\n    }\r\n};\r\nvar addListener = createAction(alm + \"/add\");\r\nvar clearAllListeners = createAction(alm + \"/removeAll\");\r\nvar removeListener = createAction(alm + \"/remove\");\r\nvar defaultErrorHandler = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    console.error.apply(console, __spreadArray([alm + \"/error\"], args));\r\n};\r\nfunction createListenerMiddleware(middlewareOptions) {\r\n    var _this = this;\r\n    if (middlewareOptions === void 0) { middlewareOptions = {}; }\r\n    var listenerMap = new Map();\r\n    var extra = middlewareOptions.extra, _c = middlewareOptions.onError, onError = _c === void 0 ? defaultErrorHandler : _c;\r\n    assertFunction(onError, \"onError\");\r\n    var insertEntry = function (entry) {\r\n        entry.unsubscribe = function () { return listenerMap.delete(entry.id); };\r\n        listenerMap.set(entry.id, entry);\r\n        return function (cancelOptions) {\r\n            entry.unsubscribe();\r\n            if (cancelOptions == null ? void 0 : cancelOptions.cancelActive) {\r\n                cancelActiveListeners(entry);\r\n            }\r\n        };\r\n    };\r\n    var findListenerEntry = function (comparator) {\r\n        for (var _i = 0, _c = Array.from(listenerMap.values()); _i < _c.length; _i++) {\r\n            var entry = _c[_i];\r\n            if (comparator(entry)) {\r\n                return entry;\r\n            }\r\n        }\r\n        return void 0;\r\n    };\r\n    var startListening = function (options) {\r\n        var entry = findListenerEntry(function (existingEntry) { return existingEntry.effect === options.effect; });\r\n        if (!entry) {\r\n            entry = createListenerEntry(options);\r\n        }\r\n        return insertEntry(entry);\r\n    };\r\n    var stopListening = function (options) {\r\n        var _c = getListenerEntryPropsFrom(options), type = _c.type, effect = _c.effect, predicate = _c.predicate;\r\n        var entry = findListenerEntry(function (entry2) {\r\n            var matchPredicateOrType = typeof type === \"string\" ? entry2.type === type : entry2.predicate === predicate;\r\n            return matchPredicateOrType && entry2.effect === effect;\r\n        });\r\n        if (entry) {\r\n            entry.unsubscribe();\r\n            if (options.cancelActive) {\r\n                cancelActiveListeners(entry);\r\n            }\r\n        }\r\n        return !!entry;\r\n    };\r\n    var notifyListener = function (entry, action, api, getOriginalState) { return __async(_this, null, function () {\r\n        var internalTaskController, take, autoJoinPromises, listenerError_1;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    internalTaskController = new AbortController();\r\n                    take = createTakePattern(startListening, internalTaskController.signal);\r\n                    autoJoinPromises = [];\r\n                    _c.label = 1;\r\n                case 1:\r\n                    _c.trys.push([1, 3, 4, 6]);\r\n                    entry.pending.add(internalTaskController);\r\n                    return [4 /*yield*/, Promise.resolve(entry.effect(action, assign({}, api, {\r\n                            getOriginalState: getOriginalState,\r\n                            condition: function (predicate, timeout) { return take(predicate, timeout).then(Boolean); },\r\n                            take: take,\r\n                            delay: createDelay(internalTaskController.signal),\r\n                            pause: createPause(internalTaskController.signal),\r\n                            extra: extra,\r\n                            signal: internalTaskController.signal,\r\n                            fork: createFork(internalTaskController.signal, autoJoinPromises),\r\n                            unsubscribe: entry.unsubscribe,\r\n                            subscribe: function () {\r\n                                listenerMap.set(entry.id, entry);\r\n                            },\r\n                            cancelActiveListeners: function () {\r\n                                entry.pending.forEach(function (controller, _, set) {\r\n                                    if (controller !== internalTaskController) {\r\n                                        abortControllerWithReason(controller, listenerCancelled);\r\n                                        set.delete(controller);\r\n                                    }\r\n                                });\r\n                            }\r\n                        })))];\r\n                case 2:\r\n                    _c.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 3:\r\n                    listenerError_1 = _c.sent();\r\n                    if (!(listenerError_1 instanceof TaskAbortError)) {\r\n                        safelyNotifyError(onError, listenerError_1, {\r\n                            raisedBy: \"effect\"\r\n                        });\r\n                    }\r\n                    return [3 /*break*/, 6];\r\n                case 4: return [4 /*yield*/, Promise.allSettled(autoJoinPromises)];\r\n                case 5:\r\n                    _c.sent();\r\n                    abortControllerWithReason(internalTaskController, listenerCompleted);\r\n                    entry.pending.delete(internalTaskController);\r\n                    return [7 /*endfinally*/];\r\n                case 6: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); };\r\n    var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\r\n    var middleware = function (api) { return function (next) { return function (action) {\r\n        if (!isAction(action)) {\r\n            return next(action);\r\n        }\r\n        if (addListener.match(action)) {\r\n            return startListening(action.payload);\r\n        }\r\n        if (clearAllListeners.match(action)) {\r\n            clearListenerMiddleware();\r\n            return;\r\n        }\r\n        if (removeListener.match(action)) {\r\n            return stopListening(action.payload);\r\n        }\r\n        var originalState = api.getState();\r\n        var getOriginalState = function () {\r\n            if (originalState === INTERNAL_NIL_TOKEN) {\r\n                throw new Error(alm + \": getOriginalState can only be called synchronously\");\r\n            }\r\n            return originalState;\r\n        };\r\n        var result;\r\n        try {\r\n            result = next(action);\r\n            if (listenerMap.size > 0) {\r\n                var currentState = api.getState();\r\n                var listenerEntries = Array.from(listenerMap.values());\r\n                for (var _i = 0, listenerEntries_1 = listenerEntries; _i < listenerEntries_1.length; _i++) {\r\n                    var entry = listenerEntries_1[_i];\r\n                    var runListener = false;\r\n                    try {\r\n                        runListener = entry.predicate(action, currentState, originalState);\r\n                    }\r\n                    catch (predicateError) {\r\n                        runListener = false;\r\n                        safelyNotifyError(onError, predicateError, {\r\n                            raisedBy: \"predicate\"\r\n                        });\r\n                    }\r\n                    if (!runListener) {\r\n                        continue;\r\n                    }\r\n                    notifyListener(entry, action, api, getOriginalState);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            originalState = INTERNAL_NIL_TOKEN;\r\n        }\r\n        return result;\r\n    }; }; };\r\n    return {\r\n        middleware: middleware,\r\n        startListening: startListening,\r\n        stopListening: stopListening,\r\n        clearListeners: clearListenerMiddleware\r\n    };\r\n}\r\n// src/autoBatchEnhancer.ts\r\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\r\nvar prepareAutoBatched = function () { return function (payload) {\r\n    var _c;\r\n    return ({\r\n        payload: payload,\r\n        meta: (_c = {}, _c[SHOULD_AUTOBATCH] = true, _c)\r\n    });\r\n}; };\r\nvar promise;\r\nvar queueMicrotaskShim = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : globalThis) : function (cb) { return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) { return setTimeout(function () {\r\n    throw err;\r\n}, 0); }); };\r\nvar createQueueWithTimer = function (timeout) {\r\n    return function (notify) {\r\n        setTimeout(notify, timeout);\r\n    };\r\n};\r\nvar rAF = typeof window !== \"undefined\" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10);\r\nvar autoBatchEnhancer = function (options) {\r\n    if (options === void 0) { options = { type: \"raf\" }; }\r\n    return function (next) { return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var store = next.apply(void 0, args);\r\n        var notifying = true;\r\n        var shouldNotifyAtEndOfTick = false;\r\n        var notificationQueued = false;\r\n        var listeners = new Set();\r\n        var queueCallback = options.type === \"tick\" ? queueMicrotaskShim : options.type === \"raf\" ? rAF : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\r\n        var notifyListeners = function () {\r\n            notificationQueued = false;\r\n            if (shouldNotifyAtEndOfTick) {\r\n                shouldNotifyAtEndOfTick = false;\r\n                listeners.forEach(function (l) { return l(); });\r\n            }\r\n        };\r\n        return Object.assign({}, store, {\r\n            subscribe: function (listener2) {\r\n                var wrappedListener = function () { return notifying && listener2(); };\r\n                var unsubscribe = store.subscribe(wrappedListener);\r\n                listeners.add(listener2);\r\n                return function () {\r\n                    unsubscribe();\r\n                    listeners.delete(listener2);\r\n                };\r\n            },\r\n            dispatch: function (action) {\r\n                var _a;\r\n                try {\r\n                    notifying = !((_a = action == null ? void 0 : action.meta) == null ? void 0 : _a[SHOULD_AUTOBATCH]);\r\n                    shouldNotifyAtEndOfTick = !notifying;\r\n                    if (shouldNotifyAtEndOfTick) {\r\n                        if (!notificationQueued) {\r\n                            notificationQueued = true;\r\n                            queueCallback(notifyListeners);\r\n                        }\r\n                    }\r\n                    return store.dispatch(action);\r\n                }\r\n                finally {\r\n                    notifying = true;\r\n                }\r\n            }\r\n        });\r\n    }; };\r\n};\r\n// src/index.ts\r\n(0, import_immer5.enableES5)();\r\n//# sourceMappingURL=redux-toolkit.cjs.development.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQuY2pzLmRldmVsb3BtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsY0FBYyw2QkFBNkIsMEJBQTBCLGNBQWMscUJBQXFCO0FBQ3hHLGlCQUFpQixvREFBb0QscUVBQXFFLGNBQWM7QUFDeEosdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsbUNBQW1DLFNBQVM7QUFDNUMsbUNBQW1DLFdBQVcsVUFBVTtBQUN4RCwwQ0FBMEMsY0FBYztBQUN4RDtBQUNBLDhHQUE4RyxPQUFPO0FBQ3JILGlGQUFpRixpQkFBaUI7QUFDbEcseURBQXlELGdCQUFnQixRQUFRO0FBQ2pGLCtDQUErQyxnQkFBZ0IsZ0JBQWdCO0FBQy9FO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxVQUFVLFlBQVksYUFBYSxTQUFTLFVBQVU7QUFDdEQsb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTtBQUNBO0FBQ0EscURBQXFELFFBQVE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsMENBQTBDLG9FQUFvRTtBQUNqSztBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0JBQWdCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0Qyx5Q0FBeUMseUNBQXlDLGFBQWE7QUFDL0Y7QUFDQTtBQUNBLGtDQUFrQyxrQ0FBa0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELDZEQUE2RDtBQUN4SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUJBQXVCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Es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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsK0JBQStCO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsS0FBSztBQUNMO0FBQ0E7QUFDQSxvTUFBb00sa0ZBQWtGO0FBQ3RSO0FBQ0EsQ0FBQyxPQUFPO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsWUFBWTtBQUMxQyw2QkFBNkI7QUFDN0I7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxhQUFhO0FBQzlEO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L2Rpc3QvcmVkdXgtdG9vbGtpdC5janMuZGV2ZWxvcG1lbnQuanM/YzIxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn07XHJcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XHJcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XHJcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XHJcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcclxudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XHJcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xyXG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XHJcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcclxudmFyIF9fZGVmTm9ybWFsUHJvcCA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHsgcmV0dXJuIGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTsgfTtcclxudmFyIF9fc3ByZWFkVmFsdWVzID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcclxuICAgICAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcclxuICAgIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBfX2dldE93blByb3BTeW1ib2xzKGIpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcCA9IF9jW19pXTtcclxuICAgICAgICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxyXG4gICAgICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiBhO1xyXG59O1xyXG52YXIgX19zcHJlYWRQcm9wcyA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTsgfTtcclxudmFyIF9fbWFya0FzTW9kdWxlID0gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gX19kZWZQcm9wKHRhcmdldCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7IH07XHJcbnZhciBfX2V4cG9ydCA9IGZ1bmN0aW9uICh0YXJnZXQsIGFsbCkge1xyXG4gICAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXHJcbiAgICAgICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcclxufTtcclxudmFyIF9fcmVFeHBvcnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBtb2R1bGUyLCBkZXNjKSB7XHJcbiAgICBpZiAobW9kdWxlMiAmJiB0eXBlb2YgbW9kdWxlMiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgbW9kdWxlMiA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodGFyZ2V0LCBrZXkpICYmIGtleSAhPT0gXCJkZWZhdWx0XCIpXHJcbiAgICAgICAgICAgICAgICBfX2RlZlByb3AodGFyZ2V0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUyW2tleV07IH0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MobW9kdWxlMiwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYyA9IF9fZ2V0T3duUHJvcE5hbWVzKG1vZHVsZTIpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gX2NbX2ldO1xyXG4gICAgICAgICAgICBfbG9vcF8xKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufTtcclxudmFyIF9fdG9Nb2R1bGUgPSBmdW5jdGlvbiAobW9kdWxlMikge1xyXG4gICAgcmV0dXJuIF9fcmVFeHBvcnQoX19tYXJrQXNNb2R1bGUoX19kZWZQcm9wKG1vZHVsZTIgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2R1bGUyKSkgOiB7fSwgXCJkZWZhdWx0XCIsIG1vZHVsZTIgJiYgbW9kdWxlMi5fX2VzTW9kdWxlICYmIFwiZGVmYXVsdFwiIGluIG1vZHVsZTIgPyB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlMi5kZWZhdWx0OyB9LCBlbnVtZXJhYmxlOiB0cnVlIH0gOiB7IHZhbHVlOiBtb2R1bGUyLCBlbnVtZXJhYmxlOiB0cnVlIH0pKSwgbW9kdWxlMik7XHJcbn07XHJcbnZhciBfX2FzeW5jID0gZnVuY3Rpb24gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgZnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBzdGVwID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfTtcclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuLy8gc3JjL2luZGV4LnRzXHJcbl9fbWFya0FzTW9kdWxlKGV4cG9ydHMpO1xyXG5fX2V4cG9ydChleHBvcnRzLCB7XHJcbiAgICBFbmhhbmNlckFycmF5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBFbmhhbmNlckFycmF5OyB9LFxyXG4gICAgTWlkZGxld2FyZUFycmF5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBNaWRkbGV3YXJlQXJyYXk7IH0sXHJcbiAgICBTSE9VTERfQVVUT0JBVENIOiBmdW5jdGlvbiAoKSB7IHJldHVybiBTSE9VTERfQVVUT0JBVENIOyB9LFxyXG4gICAgVGFza0Fib3J0RXJyb3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFRhc2tBYm9ydEVycm9yOyB9LFxyXG4gICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFkZExpc3RlbmVyOyB9LFxyXG4gICAgYXV0b0JhdGNoRW5oYW5jZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dG9CYXRjaEVuaGFuY2VyOyB9LFxyXG4gICAgY2xlYXJBbGxMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsZWFyQWxsTGlzdGVuZXJzOyB9LFxyXG4gICAgY29uZmlndXJlU3RvcmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZ3VyZVN0b3JlOyB9LFxyXG4gICAgY3JlYXRlQWN0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVBY3Rpb247IH0sXHJcbiAgICBjcmVhdGVBY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlQWN0aW9uQ3JlYXRvckludmFyaWFudE1pZGRsZXdhcmU7IH0sXHJcbiAgICBjcmVhdGVBc3luY1RodW5rOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVBc3luY1RodW5rOyB9LFxyXG4gICAgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yOyB9LFxyXG4gICAgY3JlYXRlRW50aXR5QWRhcHRlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlRW50aXR5QWRhcHRlcjsgfSxcclxuICAgIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlOyB9LFxyXG4gICAgY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmU7IH0sXHJcbiAgICBjcmVhdGVOZXh0U3RhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGltcG9ydF9pbW1lcjYuZGVmYXVsdDsgfSxcclxuICAgIGNyZWF0ZVJlZHVjZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZVJlZHVjZXI7IH0sXHJcbiAgICBjcmVhdGVTZWxlY3RvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW1wb3J0X3Jlc2VsZWN0Mi5jcmVhdGVTZWxlY3RvcjsgfSxcclxuICAgIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlOyB9LFxyXG4gICAgY3JlYXRlU2xpY2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZVNsaWNlOyB9LFxyXG4gICAgY3VycmVudDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW1wb3J0X2ltbWVyNi5jdXJyZW50OyB9LFxyXG4gICAgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWU7IH0sXHJcbiAgICBmcmVlemU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGltcG9ydF9pbW1lcjYuZnJlZXplOyB9LFxyXG4gICAgZ2V0RGVmYXVsdE1pZGRsZXdhcmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldERlZmF1bHRNaWRkbGV3YXJlOyB9LFxyXG4gICAgZ2V0VHlwZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0VHlwZTsgfSxcclxuICAgIGlzQWN0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0FjdGlvbjsgfSxcclxuICAgIGlzQWN0aW9uQ3JlYXRvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNBY3Rpb25DcmVhdG9yOyB9LFxyXG4gICAgaXNBbGxPZjogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNBbGxPZjsgfSxcclxuICAgIGlzQW55T2Y6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQW55T2Y7IH0sXHJcbiAgICBpc0FzeW5jVGh1bmtBY3Rpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbjsgfSxcclxuICAgIGlzRHJhZnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGltcG9ydF9pbW1lcjYuaXNEcmFmdDsgfSxcclxuICAgIGlzRmx1eFN0YW5kYXJkQWN0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0ZTQTsgfSxcclxuICAgIGlzRnVsZmlsbGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bGZpbGxlZDsgfSxcclxuICAgIGlzSW1tdXRhYmxlRGVmYXVsdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNJbW11dGFibGVEZWZhdWx0OyB9LFxyXG4gICAgaXNQZW5kaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1BlbmRpbmc7IH0sXHJcbiAgICBpc1BsYWluOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1BsYWluOyB9LFxyXG4gICAgaXNQbGFpbk9iamVjdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNQbGFpbk9iamVjdDsgfSxcclxuICAgIGlzUmVqZWN0ZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzUmVqZWN0ZWQ7IH0sXHJcbiAgICBpc1JlamVjdGVkV2l0aFZhbHVlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1JlamVjdGVkV2l0aFZhbHVlOyB9LFxyXG4gICAgbWluaVNlcmlhbGl6ZUVycm9yOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtaW5pU2VyaWFsaXplRXJyb3I7IH0sXHJcbiAgICBuYW5vaWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hbm9pZDsgfSxcclxuICAgIG9yaWdpbmFsOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbXBvcnRfaW1tZXI2Lm9yaWdpbmFsOyB9LFxyXG4gICAgcHJlcGFyZUF1dG9CYXRjaGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcmVwYXJlQXV0b0JhdGNoZWQ7IH0sXHJcbiAgICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlTGlzdGVuZXI7IH0sXHJcbiAgICB1bndyYXBSZXN1bHQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVud3JhcFJlc3VsdDsgfVxyXG59KTtcclxudmFyIGltcG9ydF9pbW1lcjUgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJpbW1lclwiKSk7XHJcbl9fcmVFeHBvcnQoZXhwb3J0cywgX190b01vZHVsZShyZXF1aXJlKFwicmVkdXhcIikpKTtcclxudmFyIGltcG9ydF9pbW1lcjYgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJpbW1lclwiKSk7XHJcbnZhciBpbXBvcnRfcmVzZWxlY3QyID0gX190b01vZHVsZShyZXF1aXJlKFwicmVzZWxlY3RcIikpO1xyXG4vLyBzcmMvY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IudHNcclxudmFyIGltcG9ydF9pbW1lciA9IF9fdG9Nb2R1bGUocmVxdWlyZShcImltbWVyXCIpKTtcclxudmFyIGltcG9ydF9yZXNlbGVjdCA9IF9fdG9Nb2R1bGUocmVxdWlyZShcInJlc2VsZWN0XCIpKTtcclxudmFyIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIHNlbGVjdG9yID0gKDAsIGltcG9ydF9yZXNlbGVjdC5jcmVhdGVTZWxlY3RvcikuYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgIHZhciB3cmFwcGVkU2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgcmVzdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3RbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoWygwLCBpbXBvcnRfaW1tZXIuaXNEcmFmdCkodmFsdWUpID8gKDAsIGltcG9ydF9pbW1lci5jdXJyZW50KSh2YWx1ZSkgOiB2YWx1ZV0sIHJlc3QpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gd3JhcHBlZFNlbGVjdG9yO1xyXG59O1xyXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcclxudmFyIGltcG9ydF9yZWR1eDIgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJyZWR1eFwiKSk7XHJcbi8vIHNyYy9kZXZ0b29sc0V4dGVuc2lvbi50c1xyXG52YXIgaW1wb3J0X3JlZHV4ID0gX190b01vZHVsZShyZXF1aXJlKFwicmVkdXhcIikpO1xyXG52YXIgY29tcG9zZVdpdGhEZXZUb29scyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgcmV0dXJuIGltcG9ydF9yZWR1eC5jb21wb3NlO1xyXG4gICAgcmV0dXJuIGltcG9ydF9yZWR1eC5jb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbn07XHJcbnZhciBkZXZUb29sc0VuaGFuY2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIDogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChub29wMikge1xyXG4gICAgICAgIHJldHVybiBub29wMjtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9pc1BsYWluT2JqZWN0LnRzXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcclxuICAgIGlmIChwcm90byA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHZhciBiYXNlUHJvdG8gPSBwcm90bztcclxuICAgIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGJhc2VQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlUHJvdG8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3RvID09PSBiYXNlUHJvdG87XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbnZhciBpbXBvcnRfcmVkdXhfdGh1bmsgPSBfX3RvTW9kdWxlKHJlcXVpcmUoXCJyZWR1eC10aHVua1wiKSk7XHJcbi8vIHNyYy90c0hlbHBlcnMudHNcclxudmFyIGhhc01hdGNoRnVuY3Rpb24gPSBmdW5jdGlvbiAodikge1xyXG4gICAgcmV0dXJuIHYgJiYgdHlwZW9mIHYubWF0Y2ggPT09IFwiZnVuY3Rpb25cIjtcclxufTtcclxuLy8gc3JjL2NyZWF0ZUFjdGlvbi50c1xyXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUFjdGlvbikge1xyXG4gICAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcigpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXBhcmVBY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIHByZXBhcmVkID0gcHJlcGFyZUFjdGlvbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgICAgICAgICBpZiAoIXByZXBhcmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwcmVwYXJlQWN0aW9uIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHByZXBhcmVkLnBheWxvYWRcclxuICAgICAgICAgICAgfSwgXCJtZXRhXCIgaW4gcHJlcGFyZWQgJiYgeyBtZXRhOiBwcmVwYXJlZC5tZXRhIH0pLCBcImVycm9yXCIgaW4gcHJlcGFyZWQgJiYgeyBlcnJvcjogcHJlcGFyZWQuZXJyb3IgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IGFyZ3NbMF0gfTtcclxuICAgIH1cclxuICAgIGFjdGlvbkNyZWF0b3IudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIlwiICsgdHlwZTsgfTtcclxuICAgIGFjdGlvbkNyZWF0b3IudHlwZSA9IHR5cGU7XHJcbiAgICBhY3Rpb25DcmVhdG9yLm1hdGNoID0gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnR5cGUgPT09IHR5cGU7IH07XHJcbiAgICByZXR1cm4gYWN0aW9uQ3JlYXRvcjtcclxufVxyXG5mdW5jdGlvbiBpc0FjdGlvbihhY3Rpb24pIHtcclxuICAgIHJldHVybiBpc1BsYWluT2JqZWN0KGFjdGlvbikgJiYgXCJ0eXBlXCIgaW4gYWN0aW9uO1xyXG59XHJcbmZ1bmN0aW9uIGlzQWN0aW9uQ3JlYXRvcihhY3Rpb24pIHtcclxuICAgIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSBcImZ1bmN0aW9uXCIgJiYgXCJ0eXBlXCIgaW4gYWN0aW9uICYmIGhhc01hdGNoRnVuY3Rpb24oYWN0aW9uKTtcclxufVxyXG5mdW5jdGlvbiBpc0ZTQShhY3Rpb24pIHtcclxuICAgIHJldHVybiBpc0FjdGlvbihhY3Rpb24pICYmIHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpO1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4gW1widHlwZVwiLCBcInBheWxvYWRcIiwgXCJlcnJvclwiLCBcIm1ldGFcIl0uaW5kZXhPZihrZXkpID4gLTE7XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHlwZShhY3Rpb25DcmVhdG9yKSB7XHJcbiAgICByZXR1cm4gXCJcIiArIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuLy8gc3JjL2FjdGlvbkNyZWF0b3JJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGdldE1lc3NhZ2UodHlwZSkge1xyXG4gICAgdmFyIHNwbGl0VHlwZSA9IHR5cGUgPyAoXCJcIiArIHR5cGUpLnNwbGl0KFwiL1wiKSA6IFtdO1xyXG4gICAgdmFyIGFjdGlvbk5hbWUgPSBzcGxpdFR5cGVbc3BsaXRUeXBlLmxlbmd0aCAtIDFdIHx8IFwiYWN0aW9uQ3JlYXRvclwiO1xyXG4gICAgcmV0dXJuIFwiRGV0ZWN0ZWQgYW4gYWN0aW9uIGNyZWF0b3Igd2l0aCB0eXBlIFxcXCJcIiArICh0eXBlIHx8IFwidW5rbm93blwiKSArIFwiXFxcIiBiZWluZyBkaXNwYXRjaGVkLiBcXG5NYWtlIHN1cmUgeW91J3JlIGNhbGxpbmcgdGhlIGFjdGlvbiBjcmVhdG9yIGJlZm9yZSBkaXNwYXRjaGluZywgaS5lLiBgZGlzcGF0Y2goXCIgKyBhY3Rpb25OYW1lICsgXCIoKSlgIGluc3RlYWQgb2YgYGRpc3BhdGNoKFwiICsgYWN0aW9uTmFtZSArIFwiKWAuIFRoaXMgaXMgbmVjZXNzYXJ5IGV2ZW4gaWYgdGhlIGFjdGlvbiBoYXMgbm8gcGF5bG9hZC5cIjtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgaWYgKGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBuZXh0KGFjdGlvbik7IH07IH07IH07XHJcbiAgICB9XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zLmlzQWN0aW9uQ3JlYXRvciwgaXNBY3Rpb25DcmVhdG9yMiA9IF9jID09PSB2b2lkIDAgPyBpc0FjdGlvbkNyZWF0b3IgOiBfYztcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIGlmIChpc0FjdGlvbkNyZWF0b3IyKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGdldE1lc3NhZ2UoYWN0aW9uLnR5cGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcclxuICAgIH07IH07IH07XHJcbn1cclxuLy8gc3JjL3V0aWxzLnRzXHJcbnZhciBpbXBvcnRfaW1tZXIyID0gX190b01vZHVsZShyZXF1aXJlKFwiaW1tZXJcIikpO1xyXG5mdW5jdGlvbiBnZXRUaW1lTWVhc3VyZVV0aWxzKG1heERlbGF5LCBmbk5hbWUpIHtcclxuICAgIHZhciBlbGFwc2VkID0gMDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWVhc3VyZVRpbWU6IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHZhciBmaW5pc2hlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICBlbGFwc2VkICs9IGZpbmlzaGVkIC0gc3RhcnRlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2FybklmRXhjZWVkZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGVsYXBzZWQgPiBtYXhEZWxheSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGZuTmFtZSArIFwiIHRvb2sgXCIgKyBlbGFwc2VkICsgXCJtcywgd2hpY2ggaXMgbW9yZSB0aGFuIHRoZSB3YXJuaW5nIHRocmVzaG9sZCBvZiBcIiArIG1heERlbGF5ICsgXCJtcy4gXFxuSWYgeW91ciBzdGF0ZSBvciBhY3Rpb25zIGFyZSB2ZXJ5IGxhcmdlLCB5b3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGUgbWlkZGxld2FyZSBhcyBpdCBtaWdodCBjYXVzZSB0b28gbXVjaCBvZiBhIHNsb3dkb3duIGluIGRldmVsb3BtZW50IG1vZGUuIFNlZSBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9nZXREZWZhdWx0TWlkZGxld2FyZSBmb3IgaW5zdHJ1Y3Rpb25zLlxcbkl0IGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLCBzbyB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxudmFyIE1pZGRsZXdhcmVBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhNaWRkbGV3YXJlQXJyYXksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBNaWRkbGV3YXJlQXJyYXkoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmdzKSB8fCB0aGlzO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1pZGRsZXdhcmVBcnJheSwgU3ltYm9sLnNwZWNpZXMsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbmNhdC5hcHBseSh0aGlzLCBhcnIpO1xyXG4gICAgfTtcclxuICAgIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IChNaWRkbGV3YXJlQXJyYXkuYmluZC5hcHBseShNaWRkbGV3YXJlQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyclswXS5jb25jYXQodGhpcykpKSkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnIuY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcclxufShBcnJheSkpO1xyXG52YXIgRW5oYW5jZXJBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFbmhhbmNlckFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRW5oYW5jZXJBcnJheSgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3MpIHx8IHRoaXM7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBFbmhhbmNlckFycmF5LnByb3RvdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVuaGFuY2VyQXJyYXksIFN5bWJvbC5zcGVjaWVzLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFbmhhbmNlckFycmF5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEVuaGFuY2VyQXJyYXkucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbmNhdC5hcHBseSh0aGlzLCBhcnIpO1xyXG4gICAgfTtcclxuICAgIEVuaGFuY2VyQXJyYXkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoRW5oYW5jZXJBcnJheS5iaW5kLmFwcGx5KEVuaGFuY2VyQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyclswXS5jb25jYXQodGhpcykpKSkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoRW5oYW5jZXJBcnJheS5iaW5kLmFwcGx5KEVuaGFuY2VyQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyci5jb25jYXQodGhpcykpKSkoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRW5oYW5jZXJBcnJheTtcclxufShBcnJheSkpO1xyXG5mdW5jdGlvbiBmcmVlemVEcmFmdGFibGUodmFsKSB7XHJcbiAgICByZXR1cm4gKDAsIGltcG9ydF9pbW1lcjIuaXNEcmFmdGFibGUpKHZhbCkgPyAoMCwgaW1wb3J0X2ltbWVyMi5kZWZhdWx0KSh2YWwsIGZ1bmN0aW9uICgpIHtcclxuICAgIH0pIDogdmFsO1xyXG59XHJcbi8vIHNyYy9pbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcclxudmFyIGlzUHJvZHVjdGlvbiA9IGZhbHNlO1xyXG52YXIgcHJlZml4ID0gXCJJbnZhcmlhbnQgZmFpbGVkXCI7XHJcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcclxuICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgXCJcIikpO1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmosIHNlcmlhbGl6ZXIsIGluZGVudCwgZGVjeWNsZXIpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGdldFNlcmlhbGl6ZShzZXJpYWxpemVyLCBkZWN5Y2xlciksIGluZGVudCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSB7XHJcbiAgICB2YXIgc3RhY2sgPSBbXSwga2V5cyA9IFtdO1xyXG4gICAgaWYgKCFkZWN5Y2xlcilcclxuICAgICAgICBkZWN5Y2xlciA9IGZ1bmN0aW9uIChfLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH5dXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhciB+LlwiICsga2V5cy5zbGljZSgwLCBzdGFjay5pbmRleE9mKHZhbHVlKSkuam9pbihcIi5cIikgKyBcIl1cIjtcclxuICAgICAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICB+dGhpc1BvcyA/IHN0YWNrLnNwbGljZSh0aGlzUG9zICsgMSkgOiBzdGFjay5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICB+dGhpc1BvcyA/IGtleXMuc3BsaWNlKHRoaXNQb3MsIEluZmluaXR5LCBrZXkpIDoga2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlY3ljbGVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIgPT0gbnVsbCA/IHZhbHVlIDogc2VyaWFsaXplci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0ltbXV0YWJsZURlZmF1bHQodmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT0gbnVsbCB8fCBPYmplY3QuaXNGcm96ZW4odmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrRm9yTXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKSB7XHJcbiAgICB2YXIgdHJhY2tlZFByb3BlcnRpZXMgPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkZXRlY3RNdXRhdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0aWVzLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqLCBwYXRoLCBjaGVja2VkT2JqZWN0cykge1xyXG4gICAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlUGF0aHMgPSBbXTsgfVxyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgaWYgKGNoZWNrZWRPYmplY3RzID09PSB2b2lkIDApIHsgY2hlY2tlZE9iamVjdHMgPSBuZXcgU2V0KCk7IH1cclxuICAgIHZhciB0cmFja2VkID0geyB2YWx1ZTogb2JqIH07XHJcbiAgICBpZiAoIWlzSW1tdXRhYmxlKG9iaikgJiYgIWNoZWNrZWRPYmplY3RzLmhhcyhvYmopKSB7XHJcbiAgICAgICAgY2hlY2tlZE9iamVjdHMuYWRkKG9iaik7XHJcbiAgICAgICAgdHJhY2tlZC5jaGlsZHJlbiA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGgpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJhY2tlZC5jaGlsZHJlbltrZXldID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqW2tleV0sIGNoaWxkUGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyYWNrZWQ7XHJcbn1cclxuZnVuY3Rpb24gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eSwgb2JqLCBzYW1lUGFyZW50UmVmLCBwYXRoKSB7XHJcbiAgICBpZiAoaWdub3JlZFBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlZFBhdGhzID0gW107IH1cclxuICAgIGlmIChzYW1lUGFyZW50UmVmID09PSB2b2lkIDApIHsgc2FtZVBhcmVudFJlZiA9IGZhbHNlOyB9XHJcbiAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBcIlwiOyB9XHJcbiAgICB2YXIgcHJldk9iaiA9IHRyYWNrZWRQcm9wZXJ0eSA/IHRyYWNrZWRQcm9wZXJ0eS52YWx1ZSA6IHZvaWQgMDtcclxuICAgIHZhciBzYW1lUmVmID0gcHJldk9iaiA9PT0gb2JqO1xyXG4gICAgaWYgKHNhbWVQYXJlbnRSZWYgJiYgIXNhbWVSZWYgJiYgIU51bWJlci5pc05hTihvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogdHJ1ZSwgcGF0aDogcGF0aCB9O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzSW1tdXRhYmxlKHByZXZPYmopIHx8IGlzSW1tdXRhYmxlKG9iaikpIHtcclxuICAgICAgICByZXR1cm4geyB3YXNNdXRhdGVkOiBmYWxzZSB9O1xyXG4gICAgfVxyXG4gICAgdmFyIGtleXNUb0RldGVjdCA9IHt9O1xyXG4gICAgZm9yICh2YXIga2V5IGluIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbikge1xyXG4gICAgICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICB2YXIgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XHJcbiAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgbmVzdGVkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgaWYgKGhhc0lnbm9yZWRQYXRocykge1xyXG4gICAgICAgICAgICB2YXIgaGFzTWF0Y2hlcyA9IGlnbm9yZWRQYXRocy5zb21lKGZ1bmN0aW9uIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlZCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZ25vcmVkLnRlc3QobmVzdGVkUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmVzdGVkUGF0aCA9PT0gaWdub3JlZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChoYXNNYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocywgdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuW2tleV0sIG9ialtrZXldLCBzYW1lUmVmLCBuZXN0ZWRQYXRoKTtcclxuICAgICAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdCB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmb3IgKHZhciBrZXkgaW4ga2V5c1RvRGV0ZWN0KSB7XHJcbiAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8yKGtleSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8xID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVfMS52YWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IGZhbHNlIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICBpZiAoZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMuaXNJbW11dGFibGUsIGlzSW1tdXRhYmxlID0gX2MgPT09IHZvaWQgMCA/IGlzSW1tdXRhYmxlRGVmYXVsdCA6IF9jLCBpZ25vcmVkUGF0aHMgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgX2QgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2QgPT09IHZvaWQgMCA/IDMyIDogX2QsIGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlO1xyXG4gICAgaWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzIHx8IGlnbm9yZTtcclxuICAgIHZhciB0cmFjayA9IHRyYWNrRm9yTXV0YXRpb25zLmJpbmQobnVsbCwgaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgdmFyIGdldFN0YXRlID0gX2MuZ2V0U3RhdGU7XHJcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICB2YXIgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoIXJlc3VsdC53YXNNdXRhdGVkLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGJldHdlZW4gZGlzcGF0Y2hlcywgaW4gdGhlIHBhdGggJ1wiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCInLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgZGlzcGF0Y2hlZEFjdGlvbiA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Lndhc011dGF0ZWQgJiYgaW52YXJpYW50KCFyZXN1bHQud2FzTXV0YXRlZCwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6IFwiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCIuIFRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoZSBhY3Rpb24gXCIgKyBzdHJpbmdpZnkoYWN0aW9uKSArIFwiLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoZWRBY3Rpb247XHJcbiAgICAgICAgfTsgfTtcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL3NlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xyXG5mdW5jdGlvbiBpc1BsYWluKHZhbCkge1xyXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xyXG4gICAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbCkgfHwgaXNQbGFpbk9iamVjdCh2YWwpO1xyXG59XHJcbmZ1bmN0aW9uIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSh2YWx1ZSwgcGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocywgY2FjaGUpIHtcclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIGlmIChpc1NlcmlhbGl6YWJsZSA9PT0gdm9pZCAwKSB7IGlzU2VyaWFsaXphYmxlID0gaXNQbGFpbjsgfVxyXG4gICAgaWYgKGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZWRQYXRocyA9IFtdOyB9XHJcbiAgICB2YXIgZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XHJcbiAgICBpZiAoIWlzU2VyaWFsaXphYmxlKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGtleVBhdGg6IHBhdGggfHwgXCI8cm9vdD5cIixcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoY2FjaGUgPT0gbnVsbCA/IHZvaWQgMCA6IGNhY2hlLmhhcyh2YWx1ZSkpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGVudHJpZXMgPSBnZXRFbnRyaWVzICE9IG51bGwgPyBnZXRFbnRyaWVzKHZhbHVlKSA6IE9iamVjdC5lbnRyaWVzKHZhbHVlKTtcclxuICAgIHZhciBoYXNJZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMubGVuZ3RoID4gMDtcclxuICAgIHZhciBfbG9vcF8zID0gZnVuY3Rpb24gKGtleSwgbmVzdGVkVmFsdWUpIHtcclxuICAgICAgICB2YXIgbmVzdGVkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgaWYgKGhhc0lnbm9yZWRQYXRocykge1xyXG4gICAgICAgICAgICB2YXIgaGFzTWF0Y2hlcyA9IGlnbm9yZWRQYXRocy5zb21lKGZ1bmN0aW9uIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlZCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZ25vcmVkLnRlc3QobmVzdGVkUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmVzdGVkUGF0aCA9PT0gaWdub3JlZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChoYXNNYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNTZXJpYWxpemFibGUobmVzdGVkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5UGF0aDogbmVzdGVkUGF0aCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmVzdGVkVmFsdWVcclxuICAgICAgICAgICAgICAgIH0gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShuZXN0ZWRWYWx1ZSwgbmVzdGVkUGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocywgY2FjaGUpO1xyXG4gICAgICAgICAgICBpZiAoZm91bmROZXN0ZWRTZXJpYWxpemFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgZW50cmllc18xID0gZW50cmllczsgX2kgPCBlbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIF9jID0gZW50cmllc18xW19pXSwga2V5ID0gX2NbMF0sIG5lc3RlZFZhbHVlID0gX2NbMV07XHJcbiAgICAgICAgdmFyIHN0YXRlXzIgPSBfbG9vcF8zKGtleSwgbmVzdGVkVmFsdWUpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMiA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXzIudmFsdWU7XHJcbiAgICB9XHJcbiAgICBpZiAoY2FjaGUgJiYgaXNOZXN0ZWRGcm96ZW4odmFsdWUpKVxyXG4gICAgICAgIGNhY2hlLmFkZCh2YWx1ZSk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gaXNOZXN0ZWRGcm96ZW4odmFsdWUpIHtcclxuICAgIGlmICghT2JqZWN0LmlzRnJvemVuKHZhbHVlKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9jID0gT2JqZWN0LnZhbHVlcyh2YWx1ZSk7IF9pIDwgX2MubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIG5lc3RlZFZhbHVlID0gX2NbX2ldO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgIT09IFwib2JqZWN0XCIgfHwgbmVzdGVkVmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmICghaXNOZXN0ZWRGcm96ZW4obmVzdGVkVmFsdWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gbmV4dChhY3Rpb24pOyB9OyB9OyB9O1xyXG4gICAgfVxyXG4gICAgdmFyIF9jID0gb3B0aW9ucy5pc1NlcmlhbGl6YWJsZSwgaXNTZXJpYWxpemFibGUgPSBfYyA9PT0gdm9pZCAwID8gaXNQbGFpbiA6IF9jLCBnZXRFbnRyaWVzID0gb3B0aW9ucy5nZXRFbnRyaWVzLCBfZCA9IG9wdGlvbnMuaWdub3JlZEFjdGlvbnMsIGlnbm9yZWRBY3Rpb25zID0gX2QgPT09IHZvaWQgMCA/IFtdIDogX2QsIF9lID0gb3B0aW9ucy5pZ25vcmVkQWN0aW9uUGF0aHMsIGlnbm9yZWRBY3Rpb25QYXRocyA9IF9lID09PSB2b2lkIDAgPyBbXCJtZXRhLmFyZ1wiLCBcIm1ldGEuYmFzZVF1ZXJ5TWV0YVwiXSA6IF9lLCBfZiA9IG9wdGlvbnMuaWdub3JlZFBhdGhzLCBpZ25vcmVkUGF0aHMgPSBfZiA9PT0gdm9pZCAwID8gW10gOiBfZiwgX2cgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2cgPT09IHZvaWQgMCA/IDMyIDogX2csIF9oID0gb3B0aW9ucy5pZ25vcmVTdGF0ZSwgaWdub3JlU3RhdGUgPSBfaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaCwgX2ogPSBvcHRpb25zLmlnbm9yZUFjdGlvbnMsIGlnbm9yZUFjdGlvbnMgPSBfaiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaiwgX2sgPSBvcHRpb25zLmRpc2FibGVDYWNoZSwgZGlzYWJsZUNhY2hlID0gX2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX2s7XHJcbiAgICB2YXIgY2FjaGUgPSAhZGlzYWJsZUNhY2hlICYmIFdlYWtTZXQgPyBuZXcgV2Vha1NldCgpIDogdm9pZCAwO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZUFQSSkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XHJcbiAgICAgICAgaWYgKCFpZ25vcmVBY3Rpb25zICYmICEoaWdub3JlZEFjdGlvbnMubGVuZ3RoICYmIGlnbm9yZWRBY3Rpb25zLmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMSkpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKGFjdGlvbiwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRBY3Rpb25QYXRocywgY2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIGFuIGFjdGlvbiwgaW4gdGhlIHBhdGg6IGBcIiArIGtleVBhdGggKyBcImAuIFZhbHVlOlwiLCB2YWx1ZSwgXCJcXG5UYWtlIGEgbG9vayBhdCB0aGUgbG9naWMgdGhhdCBkaXNwYXRjaGVkIHRoaXMgYWN0aW9uOiBcIiwgYWN0aW9uLCBcIlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL2FjdGlvbnMjd2h5LXNob3VsZC10eXBlLWJlLWEtc3RyaW5nLW9yLWF0LWxlYXN0LXNlcmlhbGl6YWJsZS13aHktc2hvdWxkLW15LWFjdGlvbi10eXBlcy1iZS1jb25zdGFudHMpXCIsIFwiXFxuKFRvIGFsbG93IG5vbi1zZXJpYWxpemFibGUgdmFsdWVzIHNlZTogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy91c2FnZS91c2FnZS1ndWlkZSN3b3JraW5nLXdpdGgtbm9uLXNlcmlhbGl6YWJsZS1kYXRhKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaWdub3JlU3RhdGUpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlQVBJLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6IFwiICsgYWN0aW9uLnR5cGUgKyBcIi5cXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiYm9vbGVhblwiO1xyXG59XHJcbmZ1bmN0aW9uIGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zLnRodW5rLCB0aHVuayA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gb3B0aW9ucy5pbW11dGFibGVDaGVjaywgaW1tdXRhYmxlQ2hlY2sgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IG9wdGlvbnMuc2VyaWFsaXphYmxlQ2hlY2ssIHNlcmlhbGl6YWJsZUNoZWNrID0gX2UgPT09IHZvaWQgMCA/IHRydWUgOiBfZSwgX2YgPSBvcHRpb25zLmFjdGlvbkNyZWF0b3JDaGVjaywgYWN0aW9uQ3JlYXRvckNoZWNrID0gX2YgPT09IHZvaWQgMCA/IHRydWUgOiBfZjtcclxuICAgIHZhciBtaWRkbGV3YXJlQXJyYXkgPSBuZXcgTWlkZGxld2FyZUFycmF5KCk7XHJcbiAgICBpZiAodGh1bmspIHtcclxuICAgICAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChpbXBvcnRfcmVkdXhfdGh1bmsuZGVmYXVsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChpbXBvcnRfcmVkdXhfdGh1bmsuZGVmYXVsdC53aXRoRXh0cmFBcmd1bWVudCh0aHVuay5leHRyYUFyZ3VtZW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRydWUpIHtcclxuICAgICAgICBpZiAoaW1tdXRhYmxlQ2hlY2spIHtcclxuICAgICAgICAgICAgdmFyIGltbXV0YWJsZU9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgaWYgKCFpc0Jvb2xlYW4oaW1tdXRhYmxlQ2hlY2spKSB7XHJcbiAgICAgICAgICAgICAgICBpbW11dGFibGVPcHRpb25zID0gaW1tdXRhYmxlQ2hlY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnVuc2hpZnQoY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKGltbXV0YWJsZU9wdGlvbnMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNlcmlhbGl6YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXJpYWxpemFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHNlcmlhbGl6YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShzZXJpYWxpemFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY3Rpb25DcmVhdG9yQ2hlY2spIHtcclxuICAgICAgICAgICAgdmFyIGFjdGlvbkNyZWF0b3JPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKGFjdGlvbkNyZWF0b3JDaGVjaykpIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbkNyZWF0b3JPcHRpb25zID0gYWN0aW9uQ3JlYXRvckNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUFjdGlvbkNyZWF0b3JJbnZhcmlhbnRNaWRkbGV3YXJlKGFjdGlvbkNyZWF0b3JPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheTtcclxufVxyXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcclxudmFyIElTX1BST0RVQ1RJT04gPSBmYWxzZTtcclxuZnVuY3Rpb24gY29uZmlndXJlU3RvcmUob3B0aW9ucykge1xyXG4gICAgdmFyIGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSA9IGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKTtcclxuICAgIHZhciBfYyA9IG9wdGlvbnMgfHwge30sIF9kID0gX2MucmVkdWNlciwgcmVkdWNlciA9IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZCwgX2UgPSBfYy5taWRkbGV3YXJlLCBtaWRkbGV3YXJlID0gX2UgPT09IHZvaWQgMCA/IGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSgpIDogX2UsIF9mID0gX2MuZGV2VG9vbHMsIGRldlRvb2xzID0gX2YgPT09IHZvaWQgMCA/IHRydWUgOiBfZiwgX2cgPSBfYy5wcmVsb2FkZWRTdGF0ZSwgcHJlbG9hZGVkU3RhdGUgPSBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2csIF9oID0gX2MuZW5oYW5jZXJzLCBlbmhhbmNlcnMgPSBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2g7XHJcbiAgICB2YXIgcm9vdFJlZHVjZXI7XHJcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHJvb3RSZWR1Y2VyID0gcmVkdWNlcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocmVkdWNlcikpIHtcclxuICAgICAgICByb290UmVkdWNlciA9ICgwLCBpbXBvcnRfcmVkdXgyLmNvbWJpbmVSZWR1Y2VycykocmVkdWNlcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wicmVkdWNlclwiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzJyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZmluYWxNaWRkbGV3YXJlID0gbWlkZGxld2FyZTtcclxuICAgIGlmICh0eXBlb2YgZmluYWxNaWRkbGV3YXJlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBmaW5hbE1pZGRsZXdhcmUgPSBmaW5hbE1pZGRsZXdhcmUoY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKTtcclxuICAgICAgICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgIUFycmF5LmlzQXJyYXkoZmluYWxNaWRkbGV3YXJlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3aGVuIHVzaW5nIGEgbWlkZGxld2FyZSBidWlsZGVyIGZ1bmN0aW9uLCBhbiBhcnJheSBvZiBtaWRkbGV3YXJlIG11c3QgYmUgcmV0dXJuZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFJU19QUk9EVUNUSU9OICYmIGZpbmFsTWlkZGxld2FyZS5zb21lKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiB0eXBlb2YgaXRlbSAhPT0gXCJmdW5jdGlvblwiOyB9KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImVhY2ggbWlkZGxld2FyZSBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICB2YXIgbWlkZGxld2FyZUVuaGFuY2VyID0gKDAsIGltcG9ydF9yZWR1eDIuYXBwbHlNaWRkbGV3YXJlKS5hcHBseSh2b2lkIDAsIGZpbmFsTWlkZGxld2FyZSk7XHJcbiAgICB2YXIgZmluYWxDb21wb3NlID0gaW1wb3J0X3JlZHV4Mi5jb21wb3NlO1xyXG4gICAgaWYgKGRldlRvb2xzKSB7XHJcbiAgICAgICAgZmluYWxDb21wb3NlID0gY29tcG9zZVdpdGhEZXZUb29scyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgICAgIHRyYWNlOiAhSVNfUFJPRFVDVElPTlxyXG4gICAgICAgIH0sIHR5cGVvZiBkZXZUb29scyA9PT0gXCJvYmplY3RcIiAmJiBkZXZUb29scykpO1xyXG4gICAgfVxyXG4gICAgdmFyIGRlZmF1bHRFbmhhbmNlcnMgPSBuZXcgRW5oYW5jZXJBcnJheShtaWRkbGV3YXJlRW5oYW5jZXIpO1xyXG4gICAgdmFyIHN0b3JlRW5oYW5jZXJzID0gZGVmYXVsdEVuaGFuY2VycztcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGVuaGFuY2VycykpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IF9fc3ByZWFkQXJyYXkoW21pZGRsZXdhcmVFbmhhbmNlcl0sIGVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZW5oYW5jZXJzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IGVuaGFuY2VycyhkZWZhdWx0RW5oYW5jZXJzKTtcclxuICAgIH1cclxuICAgIHZhciBjb21wb3NlZEVuaGFuY2VyID0gZmluYWxDb21wb3NlLmFwcGx5KHZvaWQgMCwgc3RvcmVFbmhhbmNlcnMpO1xyXG4gICAgcmV0dXJuICgwLCBpbXBvcnRfcmVkdXgyLmNyZWF0ZVN0b3JlKShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXIpO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbnZhciBpbXBvcnRfaW1tZXIzID0gX190b01vZHVsZShyZXF1aXJlKFwiaW1tZXJcIikpO1xyXG4vLyBzcmMvbWFwQnVpbGRlcnMudHNcclxuZnVuY3Rpb24gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2soYnVpbGRlckNhbGxiYWNrKSB7XHJcbiAgICB2YXIgYWN0aW9uc01hcCA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbk1hdGNoZXJzID0gW107XHJcbiAgICB2YXIgZGVmYXVsdENhc2VSZWR1Y2VyO1xyXG4gICAgdmFyIGJ1aWxkZXIgPSB7XHJcbiAgICAgICAgYWRkQ2FzZTogZnVuY3Rpb24gKHR5cGVPckFjdGlvbkNyZWF0b3IsIHJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25NYXRjaGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZE1hdGNoZXJgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWBcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdHlwZU9yQWN0aW9uQ3JlYXRvciA9PT0gXCJzdHJpbmdcIiA/IHR5cGVPckFjdGlvbkNyZWF0b3IgOiB0eXBlT3JBY3Rpb25DcmVhdG9yLnR5cGU7XHJcbiAgICAgICAgICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkQ2FzZWAgY2Fubm90IGJlIGNhbGxlZCB3aXRoIGFuIGVtcHR5IGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlIGluIGFjdGlvbnNNYXApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIChtYXRjaGVyLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkTWF0Y2hlcmAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3Rpb25NYXRjaGVycy5wdXNoKHsgbWF0Y2hlcjogbWF0Y2hlciwgcmVkdWNlcjogcmVkdWNlciB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGREZWZhdWx0Q2FzZTogZnVuY3Rpb24gKHJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWAgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2VcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdENhc2VSZWR1Y2VyID0gcmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGJ1aWxkZXJDYWxsYmFjayhidWlsZGVyKTtcclxuICAgIHJldHVybiBbYWN0aW9uc01hcCwgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl07XHJcbn1cclxuLy8gc3JjL2NyZWF0ZVJlZHVjZXIudHNcclxuZnVuY3Rpb24gaXNTdGF0ZUZ1bmN0aW9uKHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiO1xyXG59XHJcbnZhciBoYXNXYXJuZWRBYm91dE9iamVjdE5vdGF0aW9uID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBtYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgaWYgKGFjdGlvbk1hdGNoZXJzID09PSB2b2lkIDApIHsgYWN0aW9uTWF0Y2hlcnMgPSBbXTsgfVxyXG4gICAgaWYgKHRydWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG1hcE9yQnVpbGRlckNhbGxiYWNrID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgb2JqZWN0IG5vdGF0aW9uIGZvciBgY3JlYXRlUmVkdWNlcmAgaXMgZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSVEsgMi4wLiBQbGVhc2UgdXNlIHRoZSAnYnVpbGRlciBjYWxsYmFjaycgbm90YXRpb24gaW5zdGVhZDogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvY3JlYXRlUmVkdWNlclwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBfYyA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spIDogW21hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXSwgYWN0aW9uc01hcCA9IF9jWzBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX2NbMV0sIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX2NbMl07XHJcbiAgICB2YXIgZ2V0SW5pdGlhbFN0YXRlO1xyXG4gICAgaWYgKGlzU3RhdGVGdW5jdGlvbihpbml0aWFsU3RhdGUpKSB7XHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJlZXplRHJhZnRhYmxlKGluaXRpYWxTdGF0ZSgpKTsgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBmcm96ZW5Jbml0aWFsU3RhdGVfMSA9IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUpO1xyXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb3plbkluaXRpYWxTdGF0ZV8xOyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKTsgfVxyXG4gICAgICAgIHZhciBjYXNlUmVkdWNlcnMgPSBfX3NwcmVhZEFycmF5KFtcclxuICAgICAgICAgICAgYWN0aW9uc01hcFthY3Rpb24udHlwZV1cclxuICAgICAgICBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzLmZpbHRlcihmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBfYy5tYXRjaGVyO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIHJlZHVjZXIyID0gX2MucmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZXIyO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHsgcmV0dXJuICEhY3I7IH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKDAsIGltcG9ydF9pbW1lcjMuaXNEcmFmdCkocHJldmlvdXNTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZnQgPSBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghKDAsIGltcG9ydF9pbW1lcjMuaXNEcmFmdGFibGUpKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkEgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBpbXBvcnRfaW1tZXIzLmRlZmF1bHQpKHByZXZpb3VzU3RhdGUsIGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgfSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmVkdWNlci5nZXRJbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGU7XHJcbiAgICByZXR1cm4gcmVkdWNlcjtcclxufVxyXG4vLyBzcmMvY3JlYXRlU2xpY2UudHNcclxudmFyIGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24yID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGdldFR5cGUyKHNsaWNlLCBhY3Rpb25LZXkpIHtcclxuICAgIHJldHVybiBzbGljZSArIFwiL1wiICsgYWN0aW9uS2V5O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNsaWNlKG9wdGlvbnMpIHtcclxuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lO1xyXG4gICAgaWYgKCFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYG5hbWVgIGlzIGEgcmVxdWlyZWQgb3B0aW9uIGZvciBjcmVhdGVTbGljZVwiKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0cnVlKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5pdGlhbFN0YXRlID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBtdXN0IHByb3ZpZGUgYW4gYGluaXRpYWxTdGF0ZWAgdmFsdWUgdGhhdCBpcyBub3QgYHVuZGVmaW5lZGAuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGBpbml0aWFsU3RhdGVgXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBpbml0aWFsU3RhdGUgPSB0eXBlb2Ygb3B0aW9ucy5pbml0aWFsU3RhdGUgPT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5pbml0aWFsU3RhdGUgOiBmcmVlemVEcmFmdGFibGUob3B0aW9ucy5pbml0aWFsU3RhdGUpO1xyXG4gICAgdmFyIHJlZHVjZXJzID0gb3B0aW9ucy5yZWR1Y2VycyB8fCB7fTtcclxuICAgIHZhciByZWR1Y2VyTmFtZXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XHJcbiAgICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUgPSB7fTtcclxuICAgIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbkNyZWF0b3JzID0ge307XHJcbiAgICByZWR1Y2VyTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocmVkdWNlck5hbWUpIHtcclxuICAgICAgICB2YXIgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUgPSByZWR1Y2Vyc1tyZWR1Y2VyTmFtZV07XHJcbiAgICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlMihuYW1lLCByZWR1Y2VyTmFtZSk7XHJcbiAgICAgICAgdmFyIGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHZhciBwcmVwYXJlQ2FsbGJhY2s7XHJcbiAgICAgICAgaWYgKFwicmVkdWNlclwiIGluIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlKSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcclxuICAgICAgICAgICAgcHJlcGFyZUNhbGxiYWNrID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucHJlcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lW3JlZHVjZXJOYW1lXSA9IGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlW3R5cGVdID0gY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgYWN0aW9uQ3JlYXRvcnNbcmVkdWNlck5hbWVdID0gcHJlcGFyZUNhbGxiYWNrID8gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVDYWxsYmFjaykgOiBjcmVhdGVBY3Rpb24odHlwZSk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGJ1aWxkUmVkdWNlcigpIHtcclxuICAgICAgICBpZiAodHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoYXNXYXJuZWRBYm91dE9iamVjdE5vdGF0aW9uMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgb2JqZWN0IG5vdGF0aW9uIGZvciBgY3JlYXRlU2xpY2UuZXh0cmFSZWR1Y2Vyc2AgaXMgZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSVEsgMi4wLiBQbGVhc2UgdXNlIHRoZSAnYnVpbGRlciBjYWxsYmFjaycgbm90YXRpb24gaW5zdGVhZDogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvY3JlYXRlU2xpY2VcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9jID0gdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdLCBfZCA9IF9jWzBdLCBleHRyYVJlZHVjZXJzID0gX2QgPT09IHZvaWQgMCA/IHt9IDogX2QsIF9lID0gX2NbMV0sIGFjdGlvbk1hdGNoZXJzID0gX2UgPT09IHZvaWQgMCA/IFtdIDogX2UsIF9mID0gX2NbMl0sIGRlZmF1bHRDYXNlUmVkdWNlciA9IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZjtcclxuICAgICAgICB2YXIgZmluYWxDYXNlUmVkdWNlcnMgPSBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZXh0cmFSZWR1Y2VycyksIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlKTtcclxuICAgICAgICByZXR1cm4gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIGZ1bmN0aW9uIChidWlsZGVyKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBmaW5hbENhc2VSZWR1Y2Vycykge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5hZGRDYXNlKGtleSwgZmluYWxDYXNlUmVkdWNlcnNba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhY3Rpb25NYXRjaGVyc18xID0gYWN0aW9uTWF0Y2hlcnM7IF9pIDwgYWN0aW9uTWF0Y2hlcnNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gYWN0aW9uTWF0Y2hlcnNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLmFkZE1hdGNoZXIobS5tYXRjaGVyLCBtLnJlZHVjZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkRGVmYXVsdENhc2UoZGVmYXVsdENhc2VSZWR1Y2VyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdmFyIF9yZWR1Y2VyO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIHJlZHVjZXI6IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICghX3JlZHVjZXIpXHJcbiAgICAgICAgICAgICAgICBfcmVkdWNlciA9IGJ1aWxkUmVkdWNlcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3JlZHVjZXIoc3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhY3Rpb25zOiBhY3Rpb25DcmVhdG9ycyxcclxuICAgICAgICBjYXNlUmVkdWNlcnM6IHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lLFxyXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIV9yZWR1Y2VyKVxyXG4gICAgICAgICAgICAgICAgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIF9yZWR1Y2VyLmdldEluaXRpYWxTdGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL2VudGl0eV9zdGF0ZS50c1xyXG5mdW5jdGlvbiBnZXRJbml0aWFsRW50aXR5U3RhdGUoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkczogW10sXHJcbiAgICAgICAgZW50aXRpZXM6IHt9XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoYWRkaXRpb25hbFN0YXRlKSB7XHJcbiAgICAgICAgaWYgKGFkZGl0aW9uYWxTdGF0ZSA9PT0gdm9pZCAwKSB7IGFkZGl0aW9uYWxTdGF0ZSA9IHt9OyB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCksIGFkZGl0aW9uYWxTdGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBnZXRJbml0aWFsU3RhdGU6IGdldEluaXRpYWxTdGF0ZSB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9zdGF0ZV9zZWxlY3RvcnMudHNcclxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpIHtcclxuICAgIGZ1bmN0aW9uIGdldFNlbGVjdG9ycyhzZWxlY3RTdGF0ZSkge1xyXG4gICAgICAgIHZhciBzZWxlY3RJZHMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmlkczsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0RW50aXRpZXMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmVudGl0aWVzOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RBbGwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RJZHMsIHNlbGVjdEVudGl0aWVzLCBmdW5jdGlvbiAoaWRzLCBlbnRpdGllcykgeyByZXR1cm4gaWRzLm1hcChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGVudGl0aWVzW2lkXTsgfSk7IH0pO1xyXG4gICAgICAgIHZhciBzZWxlY3RJZCA9IGZ1bmN0aW9uIChfLCBpZCkgeyByZXR1cm4gaWQ7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEJ5SWQgPSBmdW5jdGlvbiAoZW50aXRpZXMsIGlkKSB7IHJldHVybiBlbnRpdGllc1tpZF07IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdFRvdGFsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBmdW5jdGlvbiAoaWRzKSB7IHJldHVybiBpZHMubGVuZ3RoOyB9KTtcclxuICAgICAgICBpZiAoIXNlbGVjdFN0YXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RJZHM6IHNlbGVjdElkcyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEVudGl0aWVzOiBzZWxlY3RFbnRpdGllcyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEFsbDogc2VsZWN0QWxsLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0VG90YWw6IHNlbGVjdFRvdGFsLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0QnlJZDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0RW50aXRpZXMsIHNlbGVjdElkLCBzZWxlY3RCeUlkKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEVudGl0aWVzKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZWxlY3RJZHM6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RJZHMpLFxyXG4gICAgICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzLFxyXG4gICAgICAgICAgICBzZWxlY3RBbGw6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RBbGwpLFxyXG4gICAgICAgICAgICBzZWxlY3RUb3RhbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdFRvdGFsKSxcclxuICAgICAgICAgICAgc2VsZWN0QnlJZDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0R2xvYmFsaXplZEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZ2V0U2VsZWN0b3JzOiBnZXRTZWxlY3RvcnMgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc3RhdGVfYWRhcHRlci50c1xyXG52YXIgaW1wb3J0X2ltbWVyNCA9IF9fdG9Nb2R1bGUocmVxdWlyZShcImltbWVyXCIpKTtcclxuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcclxuICAgIHZhciBvcGVyYXRvciA9IGNyZWF0ZVN0YXRlT3BlcmF0b3IoZnVuY3Rpb24gKF8sIHN0YXRlKSB7IHJldHVybiBtdXRhdG9yKHN0YXRlKTsgfSk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB2b2lkIDApO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xyXG4gICAgICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZzIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzRlNBKGFyZzIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcnVuTXV0YXRvciA9IGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICBpZiAoaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSkge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRvcihhcmcucGF5bG9hZCwgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRvcihhcmcsIGRyYWZ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCgwLCBpbXBvcnRfaW1tZXI0LmlzRHJhZnQpKHN0YXRlKSkge1xyXG4gICAgICAgICAgICBydW5NdXRhdG9yKHN0YXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICgwLCBpbXBvcnRfaW1tZXI0LmRlZmF1bHQpKHN0YXRlLCBydW5NdXRhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy91dGlscy50c1xyXG5mdW5jdGlvbiBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpIHtcclxuICAgIHZhciBrZXkgPSBzZWxlY3RJZChlbnRpdHkpO1xyXG4gICAgaWYgKGtleSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLlwiLCBcIllvdSBzaG91bGQgcHJvYmFibHkgcHJvdmlkZSB5b3VyIG93biBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uLlwiLCBcIlRoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOlwiLCBlbnRpdHksIFwiVGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb246XCIsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleTtcclxufVxyXG5mdW5jdGlvbiBlbnN1cmVFbnRpdGllc0FycmF5KGVudGl0aWVzKSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XHJcbiAgICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbnRpdGllcztcclxufVxyXG5mdW5jdGlvbiBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpIHtcclxuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICB2YXIgYWRkZWQgPSBbXTtcclxuICAgIHZhciB1cGRhdGVkID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzEgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSBuZXdFbnRpdGllc18xW19pXTtcclxuICAgICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xyXG4gICAgICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICB1cGRhdGVkLnB1c2goeyBpZDogaWQsIGNoYW5nZXM6IGVudGl0eSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFkZGVkLnB1c2goZW50aXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW2FkZGVkLCB1cGRhdGVkXTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdW5zb3J0ZWRfc3RhdGVfYWRhcHRlci50c1xyXG5mdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCkge1xyXG4gICAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmlkcy5wdXNoKGtleSk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdFbnRpdGllc18yID0gbmV3RW50aXRpZXM7IF9pIDwgbmV3RW50aXRpZXNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzJbX2ldO1xyXG4gICAgICAgICAgICBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBrZXkgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xyXG4gICAgICAgIGlmICghKGtleSBpbiBzdGF0ZS5lbnRpdGllcykpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdFbnRpdGllc18zID0gbmV3RW50aXRpZXM7IF9pIDwgbmV3RW50aXRpZXNfMy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzNbX2ldO1xyXG4gICAgICAgICAgICBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU1hbnlNdXRhYmx5KGtleXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGRpZE11dGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1trZXldO1xyXG4gICAgICAgICAgICAgICAgZGlkTXV0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChkaWRNdXRhdGUpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcihmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGlkIGluIHN0YXRlLmVudGl0aWVzOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVBbGxNdXRhYmx5KHN0YXRlKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xyXG4gICAgICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgICAgICBlbnRpdGllczoge31cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbDIgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgIHZhciB1cGRhdGVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwyLCB1cGRhdGUuY2hhbmdlcyk7XHJcbiAgICAgICAgdmFyIG5ld0tleSA9IHNlbGVjdElkVmFsdWUodXBkYXRlZCwgc2VsZWN0SWQpO1xyXG4gICAgICAgIHZhciBoYXNOZXdLZXkgPSBuZXdLZXkgIT09IHVwZGF0ZS5pZDtcclxuICAgICAgICBpZiAoaGFzTmV3S2V5KSB7XHJcbiAgICAgICAgICAgIGtleXNbdXBkYXRlLmlkXSA9IG5ld0tleTtcclxuICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzW25ld0tleV0gPSB1cGRhdGVkO1xyXG4gICAgICAgIHJldHVybiBoYXNOZXdLZXk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG5ld0tleXMgPSB7fTtcclxuICAgICAgICB2YXIgdXBkYXRlc1BlckVudGl0eSA9IHt9O1xyXG4gICAgICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh1cGRhdGUuaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdXBkYXRlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXM6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPyB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0uY2hhbmdlcyA6IG51bGwpLCB1cGRhdGUuY2hhbmdlcylcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlRW50aXRpZXMgPSB1cGRhdGVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZUVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHZhciBkaWRNdXRhdGVJZHMgPSB1cGRhdGVzLmZpbHRlcihmdW5jdGlvbiAodXBkYXRlKSB7IHJldHVybiB0YWtlTmV3S2V5KG5ld0tleXMsIHVwZGF0ZSwgc3RhdGUpOyB9KS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICBpZiAoZGlkTXV0YXRlSWRzKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5pZHMgPSBPYmplY3Qua2V5cyhzdGF0ZS5lbnRpdGllcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVtb3ZlQWxsOiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IocmVtb3ZlQWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlT25lTXV0YWJseSksXHJcbiAgICAgICAgcmVtb3ZlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3NvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xyXG4gICAgdmFyIF9jID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLCByZW1vdmVPbmUgPSBfYy5yZW1vdmVPbmUsIHJlbW92ZU1hbnkgPSBfYy5yZW1vdmVNYW55LCByZW1vdmVBbGwgPSBfYy5yZW1vdmVBbGw7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgdmFyIG1vZGVscyA9IG5ld0VudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKTsgfSk7XHJcbiAgICAgICAgaWYgKG1vZGVscy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXMgPSB7fTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBhcHBsaWVkVXBkYXRlcyA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgdXBkYXRlc18xID0gdXBkYXRlczsgX2kgPCB1cGRhdGVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB1cGRhdGUgPSB1cGRhdGVzXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICAgICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFwcGxpZWRVcGRhdGVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHksIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICAgICAgdmFyIG5ld0lkID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCAhPT0gbmV3SWQpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3SWRdID0gZW50aXR5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcHBsaWVkVXBkYXRlcykge1xyXG4gICAgICAgICAgICByZXNvcnRFbnRpdGllcyhzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgX2MgPSBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpLCBhZGRlZCA9IF9jWzBdLCB1cGRhdGVkID0gX2NbMV07XHJcbiAgICAgICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhcmVBcnJheXNFcXVhbChhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFbaV0gPT09IGJbaV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtZXJnZShtb2RlbHMsIHN0YXRlKSB7XHJcbiAgICAgICAgbW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmVudGl0aWVzW3NlbGVjdElkKG1vZGVsKV0gPSBtb2RlbDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXNvcnRFbnRpdGllcyhzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNvcnRFbnRpdGllcyhzdGF0ZSkge1xyXG4gICAgICAgIHZhciBhbGxFbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuZW50aXRpZXMpO1xyXG4gICAgICAgIGFsbEVudGl0aWVzLnNvcnQoc29ydCk7XHJcbiAgICAgICAgdmFyIG5ld1NvcnRlZElkcyA9IGFsbEVudGl0aWVzLm1hcChzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGlkcyA9IHN0YXRlLmlkcztcclxuICAgICAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVPbmU6IHJlbW92ZU9uZSxcclxuICAgICAgICByZW1vdmVNYW55OiByZW1vdmVNYW55LFxyXG4gICAgICAgIHJlbW92ZUFsbDogcmVtb3ZlQWxsLFxyXG4gICAgICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL2NyZWF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYyA9IF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxyXG4gICAgICAgIHNlbGVjdElkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIGluc3RhbmNlLmlkOyB9XHJcbiAgICB9LCBvcHRpb25zKSwgc2VsZWN0SWQgPSBfYy5zZWxlY3RJZCwgc29ydENvbXBhcmVyID0gX2Muc29ydENvbXBhcmVyO1xyXG4gICAgdmFyIHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKTtcclxuICAgIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xyXG4gICAgdmFyIHN0YXRlQWRhcHRlciA9IHNvcnRDb21wYXJlciA/IGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydENvbXBhcmVyKSA6IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKTtcclxuICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgc2VsZWN0SWQ6IHNlbGVjdElkLFxyXG4gICAgICAgIHNvcnRDb21wYXJlcjogc29ydENvbXBhcmVyXHJcbiAgICB9LCBzdGF0ZUZhY3RvcnkpLCBzZWxlY3RvcnNGYWN0b3J5KSwgc3RhdGVBZGFwdGVyKTtcclxufVxyXG4vLyBzcmMvbmFub2lkLnRzXHJcbnZhciB1cmxBbHBoYWJldCA9IFwiTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRV1wiO1xyXG52YXIgbmFub2lkID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgIGlmIChzaXplID09PSB2b2lkIDApIHsgc2l6ZSA9IDIxOyB9XHJcbiAgICB2YXIgaWQgPSBcIlwiO1xyXG4gICAgdmFyIGkgPSBzaXplO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlkO1xyXG59O1xyXG4vLyBzcmMvY3JlYXRlQXN5bmNUaHVuay50c1xyXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFtcclxuICAgIFwibmFtZVwiLFxyXG4gICAgXCJtZXNzYWdlXCIsXHJcbiAgICBcInN0YWNrXCIsXHJcbiAgICBcImNvZGVcIlxyXG5dO1xyXG52YXIgUmVqZWN0V2l0aFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVqZWN0V2l0aFZhbHVlKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVqZWN0V2l0aFZhbHVlO1xyXG59KCkpO1xyXG52YXIgRnVsZmlsbFdpdGhNZXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRnVsZmlsbFdpdGhNZXRhKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRnVsZmlsbFdpdGhNZXRhO1xyXG59KCkpO1xyXG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHNpbXBsZUVycm9yID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb21tb25Qcm9wZXJ0aWVzXzEgPSBjb21tb25Qcm9wZXJ0aWVzOyBfaSA8IGNvbW1vblByb3BlcnRpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gY29tbW9uUHJvcGVydGllc18xW19pXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wZXJ0eV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNpbXBsZUVycm9yW3Byb3BlcnR5XSA9IHZhbHVlW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2ltcGxlRXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBtZXNzYWdlOiBTdHJpbmcodmFsdWUpIH07XHJcbn07XHJcbnZhciBjcmVhdGVBc3luY1RodW5rID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzeW5jVGh1bmsyKHR5cGVQcmVmaXgsIHBheWxvYWRDcmVhdG9yLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvZnVsZmlsbGVkXCIsIGZ1bmN0aW9uIChwYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICAgICAgbWV0YTogX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWV0YSB8fCB7fSksIHtcclxuICAgICAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcImZ1bGZpbGxlZFwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciBwZW5kaW5nID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9wZW5kaW5nXCIsIGZ1bmN0aW9uIChyZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogdm9pZCAwLFxyXG4gICAgICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicGVuZGluZ1wiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciByZWplY3RlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvcmVqZWN0ZWRcIiwgZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0SWQsIGFyZywgcGF5bG9hZCwgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCBcIlJlamVjdGVkXCIpLFxyXG4gICAgICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiAhIXBheWxvYWQsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcInJlamVjdGVkXCIsXHJcbiAgICAgICAgICAgICAgICBhYm9ydGVkOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkFib3J0RXJyb3JcIixcclxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbjogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJDb25kaXRpb25FcnJvclwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciBkaXNwbGF5ZWRXYXJuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIEFDID0gdHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gXCJ1bmRlZmluZWRcIiA/IEFib3J0Q29udHJvbGxlciA6IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gY2xhc3NfMSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25hYm9ydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiB2b2lkIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dJZkFib3J0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRpc3BsYXllZFdhcm5pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheWVkV2FybmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIlRoaXMgcGxhdGZvcm0gZG9lcyBub3QgaW1wbGVtZW50IEFib3J0Q29udHJvbGxlci4gXFxuSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBBYm9ydENvbnRyb2xsZXIgdG8gcmVhY3QgdG8gYGFib3J0YCBldmVudHMsIHBsZWFzZSBjb25zaWRlciBpbXBvcnRpbmcgYSBwb2x5ZmlsbCBsaWtlICdhYm9ydGNvbnRyb2xsZXItcG9seWZpbGwvZGlzdC9hYm9ydGNvbnRyb2xsZXItcG9seWZpbGwtb25seScuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIGNsYXNzXzE7XHJcbiAgICAgICAgfSgpKTtcclxuICAgICAgICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKGFyZykge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0SWQgPSAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5pZEdlbmVyYXRvcikgPyBvcHRpb25zLmlkR2VuZXJhdG9yKGFyZykgOiBuYW5vaWQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQUMoKTtcclxuICAgICAgICAgICAgICAgIHZhciBhYm9ydFJlYXNvbjtcclxuICAgICAgICAgICAgICAgIHZhciBzdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydFJlYXNvbiA9IHJlYXNvbjtcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlMiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIGZpbmFsQWN0aW9uLCBjb25kaXRpb25SZXN1bHQsIGFib3J0ZWRQcm9taXNlLCBlcnJfMSwgc2tpcERpc3BhdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25SZXN1bHQgPSAoX2EgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmNvbmRpdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNhbGwob3B0aW9ucywgYXJnLCB7IGdldFN0YXRlOiBnZXRTdGF0ZSwgZXh0cmE6IGV4dHJhIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVGhlbmFibGUoY29uZGl0aW9uUmVzdWx0KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNvbmRpdGlvblJlc3VsdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25SZXN1bHQgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb25SZXN1bHQgPT09IGZhbHNlIHx8IGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29uZGl0aW9uRXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkFib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0ZWRQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVqZWN0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWJvcnRFcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYWJvcnRSZWFzb24gfHwgXCJBYm9ydGVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gocGVuZGluZyhyZXF1ZXN0SWQsIGFyZywgKF9iID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5nZXRQZW5kaW5nTWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0aW9ucywgeyByZXF1ZXN0SWQ6IHJlcXVlc3RJZCwgYXJnOiBhcmcgfSwgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLnJhY2UoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0ZWRQcm9taXNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQ6IGFib3J0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3RXaXRoVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgbWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWplY3RXaXRoVmFsdWUodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsV2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVsZmlsbFdpdGhNZXRhKHZhbHVlLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBGdWxmaWxsV2l0aE1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdWxmaWxsZWQocmVzdWx0LnBheWxvYWQsIHJlcXVlc3RJZCwgYXJnLCByZXN1bHQubWV0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxBY3Rpb24gPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyXzEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gZXJyXzEgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUgPyByZWplY3RlZChudWxsLCByZXF1ZXN0SWQsIGFyZywgZXJyXzEucGF5bG9hZCwgZXJyXzEubWV0YSkgOiByZWplY3RlZChlcnJfMSwgcmVxdWVzdElkLCBhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBEaXNwYXRjaCA9IG9wdGlvbnMgJiYgIW9wdGlvbnMuZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24gJiYgcmVqZWN0ZWQubWF0Y2goZmluYWxBY3Rpb24pICYmIGZpbmFsQWN0aW9uLm1ldGEuY29uZGl0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goZmluYWxBY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmaW5hbEFjdGlvbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvbWlzZTIsIHtcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydDogYWJvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICAgICAgdW53cmFwOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlMi50aGVuKHVud3JhcFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjdGlvbkNyZWF0b3IsIHtcclxuICAgICAgICAgICAgcGVuZGluZzogcGVuZGluZyxcclxuICAgICAgICAgICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxyXG4gICAgICAgICAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcclxuICAgICAgICAgICAgdHlwZVByZWZpeDogdHlwZVByZWZpeFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQXN5bmNUaHVuazIud2l0aFR5cGVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlQXN5bmNUaHVuazI7IH07XHJcbiAgICByZXR1cm4gY3JlYXRlQXN5bmNUaHVuazI7XHJcbn0pKCk7XHJcbmZ1bmN0aW9uIHVud3JhcFJlc3VsdChhY3Rpb24pIHtcclxuICAgIGlmIChhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZSkge1xyXG4gICAgICAgIHRocm93IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgfVxyXG4gICAgaWYgKGFjdGlvbi5lcnJvcikge1xyXG4gICAgICAgIHRocm93IGFjdGlvbi5lcnJvcjtcclxuICAgIH1cclxuICAgIHJldHVybiBhY3Rpb24ucGF5bG9hZDtcclxufVxyXG5mdW5jdGlvbiBpc1RoZW5hYmxlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSBcImZ1bmN0aW9uXCI7XHJcbn1cclxuLy8gc3JjL21hdGNoZXJzLnRzXHJcbnZhciBtYXRjaGVzID0gZnVuY3Rpb24gKG1hdGNoZXIsIGFjdGlvbikge1xyXG4gICAgaWYgKGhhc01hdGNoRnVuY3Rpb24obWF0Y2hlcikpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlci5tYXRjaChhY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gaXNBbnlPZigpIHtcclxuICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBtYXRjaGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnMuc29tZShmdW5jdGlvbiAobWF0Y2hlcikgeyByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pOyB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBbGxPZigpIHtcclxuICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBtYXRjaGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnMuZXZlcnkoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgdmFsaWRTdGF0dXMpIHtcclxuICAgIGlmICghYWN0aW9uIHx8ICFhY3Rpb24ubWV0YSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgaGFzVmFsaWRSZXF1ZXN0SWQgPSB0eXBlb2YgYWN0aW9uLm1ldGEucmVxdWVzdElkID09PSBcInN0cmluZ1wiO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cyA9IHZhbGlkU3RhdHVzLmluZGV4T2YoYWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykgPiAtMTtcclxuICAgIHJldHVybiBoYXNWYWxpZFJlcXVlc3RJZCAmJiBoYXNWYWxpZFJlcXVlc3RTdGF0dXM7XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQXJyYXkoYSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBhWzBdID09PSBcImZ1bmN0aW9uXCIgJiYgXCJwZW5kaW5nXCIgaW4gYVswXSAmJiBcImZ1bGZpbGxlZFwiIGluIGFbMF0gJiYgXCJyZWplY3RlZFwiIGluIGFbMF07XHJcbn1cclxuZnVuY3Rpb24gaXNQZW5kaW5nKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1BlbmRpbmcoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5wZW5kaW5nOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJyZWplY3RlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1JlamVjdGVkKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucmVqZWN0ZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNSZWplY3RlZFdpdGhWYWx1ZSgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGhhc0ZsYWcgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbiAmJiBhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZTtcclxuICAgIH07XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZFdpdGhWYWx1ZSgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0Z1bGZpbGxlZCgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcImZ1bGZpbGxlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc0Z1bGZpbGxlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLmZ1bGZpbGxlZDsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtBY3Rpb24oKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJwZW5kaW5nXCIsIFwiZnVsZmlsbGVkXCIsIFwicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNBc3luY1RodW5rQWN0aW9uKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFzeW5jVGh1bmtzXzEgPSBhc3luY1RodW5rczsgX2kgPCBhc3luY1RodW5rc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYXN5bmNUaHVuayA9IGFzeW5jVGh1bmtzXzFbX2ldO1xyXG4gICAgICAgICAgICBtYXRjaGVycy5wdXNoKGFzeW5jVGh1bmsucGVuZGluZywgYXN5bmNUaHVuay5yZWplY3RlZCwgYXN5bmNUaHVuay5mdWxmaWxsZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvdXRpbHMudHNcclxudmFyIGFzc2VydEZ1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMsIGV4cGVjdGVkKSB7XHJcbiAgICBpZiAodHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoZXhwZWN0ZWQgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcclxuICAgIH1cclxufTtcclxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7XHJcbn07XHJcbnZhciBjYXRjaFJlamVjdGlvbiA9IGZ1bmN0aW9uIChwcm9taXNlMiwgb25FcnJvcikge1xyXG4gICAgaWYgKG9uRXJyb3IgPT09IHZvaWQgMCkgeyBvbkVycm9yID0gbm9vcDsgfVxyXG4gICAgcHJvbWlzZTIuY2F0Y2gob25FcnJvcik7XHJcbiAgICByZXR1cm4gcHJvbWlzZTI7XHJcbn07XHJcbnZhciBhZGRBYm9ydFNpZ25hbExpc3RlbmVyID0gZnVuY3Rpb24gKGFib3J0U2lnbmFsLCBjYWxsYmFjaykge1xyXG4gICAgYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGNhbGxiYWNrLCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRTaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGNhbGxiYWNrKTsgfTtcclxufTtcclxudmFyIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24gPSBmdW5jdGlvbiAoYWJvcnRDb250cm9sbGVyLCByZWFzb24pIHtcclxuICAgIHZhciBzaWduYWwgPSBhYm9ydENvbnRyb2xsZXIuc2lnbmFsO1xyXG4gICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCEoXCJyZWFzb25cIiBpbiBzaWduYWwpKSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNpZ25hbCwgXCJyZWFzb25cIiwge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB2YWx1ZTogcmVhc29uLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQocmVhc29uKTtcclxufTtcclxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS9leGNlcHRpb25zLnRzXHJcbnZhciB0YXNrID0gXCJ0YXNrXCI7XHJcbnZhciBsaXN0ZW5lciA9IFwibGlzdGVuZXJcIjtcclxudmFyIGNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XHJcbnZhciBjYW5jZWxsZWQgPSBcImNhbmNlbGxlZFwiO1xyXG52YXIgdGFza0NhbmNlbGxlZCA9IFwidGFzay1cIiArIGNhbmNlbGxlZDtcclxudmFyIHRhc2tDb21wbGV0ZWQgPSBcInRhc2stXCIgKyBjb21wbGV0ZWQ7XHJcbnZhciBsaXN0ZW5lckNhbmNlbGxlZCA9IGxpc3RlbmVyICsgXCItXCIgKyBjYW5jZWxsZWQ7XHJcbnZhciBsaXN0ZW5lckNvbXBsZXRlZCA9IGxpc3RlbmVyICsgXCItXCIgKyBjb21wbGV0ZWQ7XHJcbnZhciBUYXNrQWJvcnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRhc2tBYm9ydEVycm9yKGNvZGUpIHtcclxuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiVGFza0Fib3J0RXJyb3JcIjtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSB0YXNrICsgXCIgXCIgKyBjYW5jZWxsZWQgKyBcIiAocmVhc29uOiBcIiArIGNvZGUgKyBcIilcIjtcclxuICAgIH1cclxuICAgIHJldHVybiBUYXNrQWJvcnRFcnJvcjtcclxufSgpKTtcclxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS90YXNrLnRzXHJcbnZhciB2YWxpZGF0ZUFjdGl2ZSA9IGZ1bmN0aW9uIChzaWduYWwpIHtcclxuICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBUYXNrQWJvcnRFcnJvcihzaWduYWwucmVhc29uKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gcmFjZVdpdGhTaWduYWwoc2lnbmFsLCBwcm9taXNlMikge1xyXG4gICAgdmFyIGNsZWFudXAgPSBub29wO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgbm90aWZ5UmVqZWN0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVqZWN0KG5ldyBUYXNrQWJvcnRFcnJvcihzaWduYWwucmVhc29uKSk7IH07XHJcbiAgICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgICAgIG5vdGlmeVJlamVjdGlvbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsZWFudXAgPSBhZGRBYm9ydFNpZ25hbExpc3RlbmVyKHNpZ25hbCwgbm90aWZ5UmVqZWN0aW9uKTtcclxuICAgICAgICBwcm9taXNlMi5maW5hbGx5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsZWFudXAoKTsgfSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xyXG4gICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY2xlYW51cCA9IG5vb3A7XHJcbiAgICB9KTtcclxufVxyXG52YXIgcnVuVGFzayA9IGZ1bmN0aW9uICh0YXNrMiwgY2xlYW5VcCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2YWx1ZSwgZXJyb3JfMTtcclxuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMCwgMywgNCwgNV0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0YXNrMigpXTtcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwib2tcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IGVycm9yXzEgaW5zdGFuY2VvZiBUYXNrQWJvcnRFcnJvciA/IFwiY2FuY2VsbGVkXCIgOiBcInJlamVjdGVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcl8xXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIGNsZWFuVXAgPT0gbnVsbCA/IHZvaWQgMCA6IGNsZWFuVXAoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTsgfTtcclxudmFyIGNyZWF0ZVBhdXNlID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9taXNlMikge1xyXG4gICAgICAgIHJldHVybiBjYXRjaFJlamVjdGlvbihyYWNlV2l0aFNpZ25hbChzaWduYWwsIHByb21pc2UyKS50aGVuKGZ1bmN0aW9uIChvdXRwdXQpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG59O1xyXG52YXIgY3JlYXRlRGVsYXkgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICB2YXIgcGF1c2UgPSBjcmVhdGVQYXVzZShzaWduYWwpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0aW1lb3V0TXMpIHtcclxuICAgICAgICByZXR1cm4gcGF1c2UobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dE1zKTsgfSkpO1xyXG4gICAgfTtcclxufTtcclxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS9pbmRleC50c1xyXG52YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcclxudmFyIElOVEVSTkFMX05JTF9UT0tFTiA9IHt9O1xyXG52YXIgYWxtID0gXCJsaXN0ZW5lck1pZGRsZXdhcmVcIjtcclxudmFyIGNyZWF0ZUZvcmsgPSBmdW5jdGlvbiAocGFyZW50QWJvcnRTaWduYWwsIHBhcmVudEJsb2NraW5nUHJvbWlzZXMpIHtcclxuICAgIHZhciBsaW5rQ29udHJvbGxlcnMgPSBmdW5jdGlvbiAoY29udHJvbGxlcikgeyByZXR1cm4gYWRkQWJvcnRTaWduYWxMaXN0ZW5lcihwYXJlbnRBYm9ydFNpZ25hbCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBwYXJlbnRBYm9ydFNpZ25hbC5yZWFzb24pOyB9KTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFza0V4ZWN1dG9yLCBvcHRzKSB7XHJcbiAgICAgICAgYXNzZXJ0RnVuY3Rpb24odGFza0V4ZWN1dG9yLCBcInRhc2tFeGVjdXRvclwiKTtcclxuICAgICAgICB2YXIgY2hpbGRBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XHJcbiAgICAgICAgbGlua0NvbnRyb2xsZXJzKGNoaWxkQWJvcnRDb250cm9sbGVyKTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gcnVuVGFzayhmdW5jdGlvbiAoKSB7IHJldHVybiBfX2FzeW5jKHZvaWQgMCwgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0MjtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUocGFyZW50QWJvcnRTaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0YXNrRXhlY3V0b3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlOiBjcmVhdGVQYXVzZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQyID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0Ml07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNoaWxkQWJvcnRDb250cm9sbGVyLCB0YXNrQ29tcGxldGVkKTsgfSk7XHJcbiAgICAgICAgaWYgKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYXV0b0pvaW4pIHtcclxuICAgICAgICAgICAgcGFyZW50QmxvY2tpbmdQcm9taXNlcy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3VsdDogY3JlYXRlUGF1c2UocGFyZW50QWJvcnRTaWduYWwpKHJlc3VsdCksXHJcbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZVRha2VQYXR0ZXJuID0gZnVuY3Rpb24gKHN0YXJ0TGlzdGVuaW5nLCBzaWduYWwpIHtcclxuICAgIHZhciB0YWtlID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdW5zdWJzY3JpYmUsIHR1cGxlUHJvbWlzZSwgcHJvbWlzZXMsIG91dHB1dDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcExpc3RlbmluZyA9IHN0YXJ0TGlzdGVuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY2F0ZTogcHJlZGljYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiBmdW5jdGlvbiAoYWN0aW9uLCBsaXN0ZW5lckFwaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJBcGkuZ2V0U3RhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJBcGkuZ2V0T3JpZ2luYWxTdGF0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BMaXN0ZW5pbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0dXBsZVByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0LCBudWxsKTsgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFsxLCAsIDMsIDRdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByYWNlV2l0aFNpZ25hbChzaWduYWwsIFByb21pc2UucmFjZShwcm9taXNlcykpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgb3V0cHV0XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gY2F0Y2hSZWplY3Rpb24odGFrZShwcmVkaWNhdGUsIHRpbWVvdXQpKTsgfTtcclxufTtcclxudmFyIGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20gPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgdmFyIHR5cGUgPSBvcHRpb25zLnR5cGUsIGFjdGlvbkNyZWF0b3IgPSBvcHRpb25zLmFjdGlvbkNyZWF0b3IsIG1hdGNoZXIgPSBvcHRpb25zLm1hdGNoZXIsIHByZWRpY2F0ZSA9IG9wdGlvbnMucHJlZGljYXRlLCBlZmZlY3QgPSBvcHRpb25zLmVmZmVjdDtcclxuICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgcHJlZGljYXRlID0gY3JlYXRlQWN0aW9uKHR5cGUpLm1hdGNoO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYWN0aW9uQ3JlYXRvcikge1xyXG4gICAgICAgIHR5cGUgPSBhY3Rpb25DcmVhdG9yLnR5cGU7XHJcbiAgICAgICAgcHJlZGljYXRlID0gYWN0aW9uQ3JlYXRvci5tYXRjaDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG1hdGNoZXIpIHtcclxuICAgICAgICBwcmVkaWNhdGUgPSBtYXRjaGVyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJlZGljYXRlKSB7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDcmVhdGluZyBvciByZW1vdmluZyBhIGxpc3RlbmVyIHJlcXVpcmVzIG9uZSBvZiB0aGUga25vd24gZmllbGRzIGZvciBtYXRjaGluZyBhbiBhY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICBhc3NlcnRGdW5jdGlvbihlZmZlY3QsIFwib3B0aW9ucy5saXN0ZW5lclwiKTtcclxuICAgIHJldHVybiB7IHByZWRpY2F0ZTogcHJlZGljYXRlLCB0eXBlOiB0eXBlLCBlZmZlY3Q6IGVmZmVjdCB9O1xyXG59O1xyXG52YXIgY3JlYXRlTGlzdGVuZXJFbnRyeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICB2YXIgX2MgPSBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tKG9wdGlvbnMpLCB0eXBlID0gX2MudHlwZSwgcHJlZGljYXRlID0gX2MucHJlZGljYXRlLCBlZmZlY3QgPSBfYy5lZmZlY3Q7XHJcbiAgICB2YXIgaWQgPSBuYW5vaWQoKTtcclxuICAgIHZhciBlbnRyeSA9IHtcclxuICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgZWZmZWN0OiBlZmZlY3QsXHJcbiAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICBwcmVkaWNhdGU6IHByZWRpY2F0ZSxcclxuICAgICAgICBwZW5kaW5nOiBuZXcgU2V0KCksXHJcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdWJzY3JpYmUgbm90IGluaXRpYWxpemVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gZW50cnk7XHJcbn07XHJcbnZhciBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgIGVudHJ5LnBlbmRpbmcuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbGxlcikge1xyXG4gICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBjcmVhdGVDbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IGZ1bmN0aW9uIChsaXN0ZW5lck1hcCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsaXN0ZW5lck1hcC5mb3JFYWNoKGNhbmNlbEFjdGl2ZUxpc3RlbmVycyk7XHJcbiAgICAgICAgbGlzdGVuZXJNYXAuY2xlYXIoKTtcclxuICAgIH07XHJcbn07XHJcbnZhciBzYWZlbHlOb3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvckhhbmRsZXIsIGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBlcnJvckhhbmRsZXIoZXJyb3JUb05vdGlmeSwgZXJyb3JJbmZvKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvckhhbmRsZXJFcnJvcikge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvckhhbmRsZXJFcnJvcjtcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxufTtcclxudmFyIGFkZExpc3RlbmVyID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL2FkZFwiKTtcclxudmFyIGNsZWFyQWxsTGlzdGVuZXJzID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL3JlbW92ZUFsbFwiKTtcclxudmFyIHJlbW92ZUxpc3RlbmVyID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL3JlbW92ZVwiKTtcclxudmFyIGRlZmF1bHRFcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF9fc3ByZWFkQXJyYXkoW2FsbSArIFwiL2Vycm9yXCJdLCBhcmdzKSk7XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZShtaWRkbGV3YXJlT3B0aW9ucykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIGlmIChtaWRkbGV3YXJlT3B0aW9ucyA9PT0gdm9pZCAwKSB7IG1pZGRsZXdhcmVPcHRpb25zID0ge307IH1cclxuICAgIHZhciBsaXN0ZW5lck1hcCA9IG5ldyBNYXAoKTtcclxuICAgIHZhciBleHRyYSA9IG1pZGRsZXdhcmVPcHRpb25zLmV4dHJhLCBfYyA9IG1pZGRsZXdhcmVPcHRpb25zLm9uRXJyb3IsIG9uRXJyb3IgPSBfYyA9PT0gdm9pZCAwID8gZGVmYXVsdEVycm9ySGFuZGxlciA6IF9jO1xyXG4gICAgYXNzZXJ0RnVuY3Rpb24ob25FcnJvciwgXCJvbkVycm9yXCIpO1xyXG4gICAgdmFyIGluc2VydEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgZW50cnkudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXN0ZW5lck1hcC5kZWxldGUoZW50cnkuaWQpOyB9O1xyXG4gICAgICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FuY2VsT3B0aW9ucykge1xyXG4gICAgICAgICAgICBlbnRyeS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICBpZiAoY2FuY2VsT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogY2FuY2VsT3B0aW9ucy5jYW5jZWxBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyhlbnRyeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBmaW5kTGlzdGVuZXJFbnRyeSA9IGZ1bmN0aW9uIChjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYyA9IEFycmF5LmZyb20obGlzdGVuZXJNYXAudmFsdWVzKCkpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSBfY1tfaV07XHJcbiAgICAgICAgICAgIGlmIChjb21wYXJhdG9yKGVudHJ5KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2b2lkIDA7XHJcbiAgICB9O1xyXG4gICAgdmFyIHN0YXJ0TGlzdGVuaW5nID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSBmaW5kTGlzdGVuZXJFbnRyeShmdW5jdGlvbiAoZXhpc3RpbmdFbnRyeSkgeyByZXR1cm4gZXhpc3RpbmdFbnRyeS5lZmZlY3QgPT09IG9wdGlvbnMuZWZmZWN0OyB9KTtcclxuICAgICAgICBpZiAoIWVudHJ5KSB7XHJcbiAgICAgICAgICAgIGVudHJ5ID0gY3JlYXRlTGlzdGVuZXJFbnRyeShvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc2VydEVudHJ5KGVudHJ5KTtcclxuICAgIH07XHJcbiAgICB2YXIgc3RvcExpc3RlbmluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9jID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKSwgdHlwZSA9IF9jLnR5cGUsIGVmZmVjdCA9IF9jLmVmZmVjdCwgcHJlZGljYXRlID0gX2MucHJlZGljYXRlO1xyXG4gICAgICAgIHZhciBlbnRyeSA9IGZpbmRMaXN0ZW5lckVudHJ5KGZ1bmN0aW9uIChlbnRyeTIpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoUHJlZGljYXRlT3JUeXBlID0gdHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIgPyBlbnRyeTIudHlwZSA9PT0gdHlwZSA6IGVudHJ5Mi5wcmVkaWNhdGUgPT09IHByZWRpY2F0ZTtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoUHJlZGljYXRlT3JUeXBlICYmIGVudHJ5Mi5lZmZlY3QgPT09IGVmZmVjdDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZW50cnkpIHtcclxuICAgICAgICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2FuY2VsQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAhIWVudHJ5O1xyXG4gICAgfTtcclxuICAgIHZhciBub3RpZnlMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbnRyeSwgYWN0aW9uLCBhcGksIGdldE9yaWdpbmFsU3RhdGUpIHsgcmV0dXJuIF9fYXN5bmMoX3RoaXMsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgdGFrZSwgYXV0b0pvaW5Qcm9taXNlcywgbGlzdGVuZXJFcnJvcl8xO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVGFza0NvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZSA9IGNyZWF0ZVRha2VQYXR0ZXJuKHN0YXJ0TGlzdGVuaW5nLCBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b0pvaW5Qcm9taXNlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzEsIDMsIDQsIDZdKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmFkZChpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLnJlc29sdmUoZW50cnkuZWZmZWN0KGFjdGlvbiwgYXNzaWduKHt9LCBhcGksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE9yaWdpbmFsU3RhdGU6IGdldE9yaWdpbmFsU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246IGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIHRha2UocHJlZGljYXRlLCB0aW1lb3V0KS50aGVuKEJvb2xlYW4pOyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZTogdGFrZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcms6IGNyZWF0ZUZvcmsoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwsIGF1dG9Kb2luUHJvbWlzZXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGVudHJ5LnVuc3Vic2NyaWJlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9sbGVyLCBfLCBzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgIT09IGludGVybmFsVGFza0NvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0LmRlbGV0ZShjb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJFcnJvcl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGxpc3RlbmVyRXJyb3JfMSBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBsaXN0ZW5lckVycm9yXzEsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlZEJ5OiBcImVmZmVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGxTZXR0bGVkKGF1dG9Kb2luUHJvbWlzZXMpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihpbnRlcm5hbFRhc2tDb250cm9sbGVyLCBsaXN0ZW5lckNvbXBsZXRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5kZWxldGUoaW50ZXJuYWxUYXNrQ29udHJvbGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsgfTtcclxuICAgIHZhciBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IGNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKGxpc3RlbmVyTWFwKTtcclxuICAgIHZhciBtaWRkbGV3YXJlID0gZnVuY3Rpb24gKGFwaSkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICBpZiAoIWlzQWN0aW9uKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFkZExpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0TGlzdGVuaW5nKGFjdGlvbi5wYXlsb2FkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNsZWFyQWxsTGlzdGVuZXJzLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVtb3ZlTGlzdGVuZXIubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RvcExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvcmlnaW5hbFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XHJcbiAgICAgICAgdmFyIGdldE9yaWdpbmFsU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFN0YXRlID09PSBJTlRFUk5BTF9OSUxfVE9LRU4pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihhbG0gKyBcIjogZ2V0T3JpZ2luYWxTdGF0ZSBjYW4gb25seSBiZSBjYWxsZWQgc3luY2hyb25vdXNseVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxTdGF0ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJNYXAuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBhcGkuZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lckVudHJpZXMgPSBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbGlzdGVuZXJFbnRyaWVzXzEgPSBsaXN0ZW5lckVudHJpZXM7IF9pIDwgbGlzdGVuZXJFbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gbGlzdGVuZXJFbnRyaWVzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBydW5MaXN0ZW5lciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkxpc3RlbmVyID0gZW50cnkucHJlZGljYXRlKGFjdGlvbiwgY3VycmVudFN0YXRlLCBvcmlnaW5hbFN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKHByZWRpY2F0ZUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkxpc3RlbmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVseU5vdGlmeUVycm9yKG9uRXJyb3IsIHByZWRpY2F0ZUVycm9yLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZWRCeTogXCJwcmVkaWNhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFydW5MaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXIoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdGF0ZSA9IElOVEVSTkFMX05JTF9UT0tFTjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1pZGRsZXdhcmU6IG1pZGRsZXdhcmUsXHJcbiAgICAgICAgc3RhcnRMaXN0ZW5pbmc6IHN0YXJ0TGlzdGVuaW5nLFxyXG4gICAgICAgIHN0b3BMaXN0ZW5pbmc6IHN0b3BMaXN0ZW5pbmcsXHJcbiAgICAgICAgY2xlYXJMaXN0ZW5lcnM6IGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlXHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9hdXRvQmF0Y2hFbmhhbmNlci50c1xyXG52YXIgU0hPVUxEX0FVVE9CQVRDSCA9IFwiUlRLX2F1dG9CYXRjaFwiO1xyXG52YXIgcHJlcGFyZUF1dG9CYXRjaGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHBheWxvYWQpIHtcclxuICAgIHZhciBfYztcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXHJcbiAgICAgICAgbWV0YTogKF9jID0ge30sIF9jW1NIT1VMRF9BVVRPQkFUQ0hdID0gdHJ1ZSwgX2MpXHJcbiAgICB9KTtcclxufTsgfTtcclxudmFyIHByb21pc2U7XHJcbnZhciBxdWV1ZU1pY3JvdGFza1NoaW0gPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09IFwiZnVuY3Rpb25cIiA/IHF1ZXVlTWljcm90YXNrLmJpbmQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiBnbG9iYWxUaGlzKSA6IGZ1bmN0aW9uIChjYikgeyByZXR1cm4gKHByb21pc2UgfHwgKHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKSkpLnRoZW4oY2IpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgdGhyb3cgZXJyO1xyXG59LCAwKTsgfSk7IH07XHJcbnZhciBjcmVhdGVRdWV1ZVdpdGhUaW1lciA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vdGlmeSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQobm90aWZ5LCB0aW1lb3V0KTtcclxuICAgIH07XHJcbn07XHJcbnZhciByQUYgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIDogY3JlYXRlUXVldWVXaXRoVGltZXIoMTApO1xyXG52YXIgYXV0b0JhdGNoRW5oYW5jZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyB0eXBlOiBcInJhZlwiIH07IH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RvcmUgPSBuZXh0LmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICAgICAgdmFyIG5vdGlmeWluZyA9IHRydWU7XHJcbiAgICAgICAgdmFyIHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvblF1ZXVlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdmFyIHF1ZXVlQ2FsbGJhY2sgPSBvcHRpb25zLnR5cGUgPT09IFwidGlja1wiID8gcXVldWVNaWNyb3Rhc2tTaGltIDogb3B0aW9ucy50eXBlID09PSBcInJhZlwiID8gckFGIDogb3B0aW9ucy50eXBlID09PSBcImNhbGxiYWNrXCIgPyBvcHRpb25zLnF1ZXVlTm90aWZpY2F0aW9uIDogY3JlYXRlUXVldWVXaXRoVGltZXIob3B0aW9ucy50aW1lb3V0KTtcclxuICAgICAgICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBub3RpZmljYXRpb25RdWV1ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrKSB7XHJcbiAgICAgICAgICAgICAgICBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwoKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdG9yZSwge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChsaXN0ZW5lcjIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnlpbmcgJiYgbGlzdGVuZXIyKCk7IH07XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBzdG9yZS5zdWJzY3JpYmUod3JhcHBlZExpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyMik7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBub3RpZnlpbmcgPSAhKChfYSA9IGFjdGlvbiA9PSBudWxsID8gdm9pZCAwIDogYWN0aW9uLm1ldGEpID09IG51bGwgPyB2b2lkIDAgOiBfYVtTSE9VTERfQVVUT0JBVENIXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2sgPSAhbm90aWZ5aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGROb3RpZnlBdEVuZE9mVGljaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vdGlmaWNhdGlvblF1ZXVlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uUXVldWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlQ2FsbGJhY2sobm90aWZ5TGlzdGVuZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeWluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07IH07XHJcbn07XHJcbi8vIHNyYy9pbmRleC50c1xyXG4oMCwgaW1wb3J0X2ltbWVyNS5lbmFibGVFUzUpKCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQuY2pzLmRldmVsb3BtZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.cjs.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancerArray: () => (/* binding */ EnhancerArray),\n/* harmony export */   MiddlewareArray: () => (/* binding */ MiddlewareArray),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   __esModule: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__esModule),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   getDefaultMiddleware: () => (/* binding */ getDefaultMiddleware),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   isAction: () => (/* binding */ isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult)\n/* harmony export */ });\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.esm.mjs\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/lib/redux.js\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/lib/index.js\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/lib/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nvar __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = function (obj, key, value) { return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : obj[key] = value; };\r\nvar __spreadValues = function (a, b) {\r\n    for (var prop in b || (b = {}))\r\n        if (__hasOwnProp.call(b, prop))\r\n            __defNormalProp(a, prop, b[prop]);\r\n    if (__getOwnPropSymbols)\r\n        for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {\r\n            var prop = _c[_i];\r\n            if (__propIsEnum.call(b, prop))\r\n                __defNormalProp(a, prop, b[prop]);\r\n        }\r\n    return a;\r\n};\r\nvar __spreadProps = function (a, b) { return __defProps(a, __getOwnPropDescs(b)); };\r\nvar __async = function (__this, __arguments, generator) {\r\n    return new Promise(function (resolve, reject) {\r\n        var fulfilled = function (value) {\r\n            try {\r\n                step(generator.next(value));\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        };\r\n        var rejected = function (value) {\r\n            try {\r\n                step(generator.throw(value));\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        };\r\n        var step = function (x) { return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected); };\r\n        step((generator = generator.apply(__this, __arguments)).next());\r\n    });\r\n};\r\n// src/index.ts\r\n\r\n\r\n\r\n\r\n// src/createDraftSafeSelector.ts\r\n\r\n\r\nvar createDraftSafeSelector = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    var selector = reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector.apply(void 0, args);\r\n    var wrappedSelector = function (value) {\r\n        var rest = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            rest[_i - 1] = arguments[_i];\r\n        }\r\n        return selector.apply(void 0, __spreadArray([(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value], rest));\r\n    };\r\n    return wrappedSelector;\r\n};\r\n// src/configureStore.ts\r\n\r\n// src/devtoolsExtension.ts\r\n\r\nvar composeWithDevTools = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {\r\n    if (arguments.length === 0)\r\n        return void 0;\r\n    if (typeof arguments[0] === \"object\")\r\n        return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\r\n    return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\r\n};\r\nvar devToolsEnhancer = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {\r\n    return function (noop2) {\r\n        return noop2;\r\n    };\r\n};\r\n// src/isPlainObject.ts\r\nfunction isPlainObject(value) {\r\n    if (typeof value !== \"object\" || value === null)\r\n        return false;\r\n    var proto = Object.getPrototypeOf(value);\r\n    if (proto === null)\r\n        return true;\r\n    var baseProto = proto;\r\n    while (Object.getPrototypeOf(baseProto) !== null) {\r\n        baseProto = Object.getPrototypeOf(baseProto);\r\n    }\r\n    return proto === baseProto;\r\n}\r\n// src/getDefaultMiddleware.ts\r\n\r\n// src/tsHelpers.ts\r\nvar hasMatchFunction = function (v) {\r\n    return v && typeof v.match === \"function\";\r\n};\r\n// src/createAction.ts\r\nfunction createAction(type, prepareAction) {\r\n    function actionCreator() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (prepareAction) {\r\n            var prepared = prepareAction.apply(void 0, args);\r\n            if (!prepared) {\r\n                throw new Error(\"prepareAction did not return an object\");\r\n            }\r\n            return __spreadValues(__spreadValues({\r\n                type: type,\r\n                payload: prepared.payload\r\n            }, \"meta\" in prepared && { meta: prepared.meta }), \"error\" in prepared && { error: prepared.error });\r\n        }\r\n        return { type: type, payload: args[0] };\r\n    }\r\n    actionCreator.toString = function () { return \"\" + type; };\r\n    actionCreator.type = type;\r\n    actionCreator.match = function (action) { return action.type === type; };\r\n    return actionCreator;\r\n}\r\nfunction isAction(action) {\r\n    return isPlainObject(action) && \"type\" in action;\r\n}\r\nfunction isActionCreator(action) {\r\n    return typeof action === \"function\" && \"type\" in action && hasMatchFunction(action);\r\n}\r\nfunction isFSA(action) {\r\n    return isAction(action) && typeof action.type === \"string\" && Object.keys(action).every(isValidKey);\r\n}\r\nfunction isValidKey(key) {\r\n    return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\r\n}\r\nfunction getType(actionCreator) {\r\n    return \"\" + actionCreator;\r\n}\r\n// src/actionCreatorInvariantMiddleware.ts\r\nfunction getMessage(type) {\r\n    var splitType = type ? (\"\" + type).split(\"/\") : [];\r\n    var actionName = splitType[splitType.length - 1] || \"actionCreator\";\r\n    return \"Detected an action creator with type \\\"\" + (type || \"unknown\") + \"\\\" being dispatched. \\nMake sure you're calling the action creator before dispatching, i.e. `dispatch(\" + actionName + \"())` instead of `dispatch(\" + actionName + \")`. This is necessary even if the action has no payload.\";\r\n}\r\nfunction createActionCreatorInvariantMiddleware(options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (false) {}\r\n    var _c = options.isActionCreator, isActionCreator2 = _c === void 0 ? isActionCreator : _c;\r\n    return function () { return function (next) { return function (action) {\r\n        if (isActionCreator2(action)) {\r\n            console.warn(getMessage(action.type));\r\n        }\r\n        return next(action);\r\n    }; }; };\r\n}\r\n// src/utils.ts\r\n\r\nfunction getTimeMeasureUtils(maxDelay, fnName) {\r\n    var elapsed = 0;\r\n    return {\r\n        measureTime: function (fn) {\r\n            var started = Date.now();\r\n            try {\r\n                return fn();\r\n            }\r\n            finally {\r\n                var finished = Date.now();\r\n                elapsed += finished - started;\r\n            }\r\n        },\r\n        warnIfExceeded: function () {\r\n            if (elapsed > maxDelay) {\r\n                console.warn(fnName + \" took \" + elapsed + \"ms, which is more than the warning threshold of \" + maxDelay + \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\");\r\n            }\r\n        }\r\n    };\r\n}\r\nvar MiddlewareArray = /** @class */ (function (_super) {\r\n    __extends(MiddlewareArray, _super);\r\n    function MiddlewareArray() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var _this = _super.apply(this, args) || this;\r\n        Object.setPrototypeOf(_this, MiddlewareArray.prototype);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MiddlewareArray, Symbol.species, {\r\n        get: function () {\r\n            return MiddlewareArray;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    MiddlewareArray.prototype.concat = function () {\r\n        var arr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arr[_i] = arguments[_i];\r\n        }\r\n        return _super.prototype.concat.apply(this, arr);\r\n    };\r\n    MiddlewareArray.prototype.prepend = function () {\r\n        var arr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arr[_i] = arguments[_i];\r\n        }\r\n        if (arr.length === 1 && Array.isArray(arr[0])) {\r\n            return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();\r\n        }\r\n        return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();\r\n    };\r\n    return MiddlewareArray;\r\n}(Array));\r\nvar EnhancerArray = /** @class */ (function (_super) {\r\n    __extends(EnhancerArray, _super);\r\n    function EnhancerArray() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var _this = _super.apply(this, args) || this;\r\n        Object.setPrototypeOf(_this, EnhancerArray.prototype);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(EnhancerArray, Symbol.species, {\r\n        get: function () {\r\n            return EnhancerArray;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    EnhancerArray.prototype.concat = function () {\r\n        var arr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arr[_i] = arguments[_i];\r\n        }\r\n        return _super.prototype.concat.apply(this, arr);\r\n    };\r\n    EnhancerArray.prototype.prepend = function () {\r\n        var arr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arr[_i] = arguments[_i];\r\n        }\r\n        if (arr.length === 1 && Array.isArray(arr[0])) {\r\n            return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([void 0], arr[0].concat(this))))();\r\n        }\r\n        return new (EnhancerArray.bind.apply(EnhancerArray, __spreadArray([void 0], arr.concat(this))))();\r\n    };\r\n    return EnhancerArray;\r\n}(Array));\r\nfunction freezeDraftable(val) {\r\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(val, function () {\r\n    }) : val;\r\n}\r\n// src/immutableStateInvariantMiddleware.ts\r\nvar isProduction = \"development\" === \"production\";\r\nvar prefix = \"Invariant failed\";\r\nfunction invariant(condition, message) {\r\n    if (condition) {\r\n        return;\r\n    }\r\n    if (isProduction) {\r\n        throw new Error(prefix);\r\n    }\r\n    throw new Error(prefix + \": \" + (message || \"\"));\r\n}\r\nfunction stringify(obj, serializer, indent, decycler) {\r\n    return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\r\n}\r\nfunction getSerialize(serializer, decycler) {\r\n    var stack = [], keys = [];\r\n    if (!decycler)\r\n        decycler = function (_, value) {\r\n            if (stack[0] === value)\r\n                return \"[Circular ~]\";\r\n            return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\r\n        };\r\n    return function (key, value) {\r\n        if (stack.length > 0) {\r\n            var thisPos = stack.indexOf(this);\r\n            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\r\n            ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\r\n            if (~stack.indexOf(value))\r\n                value = decycler.call(this, key, value);\r\n        }\r\n        else\r\n            stack.push(value);\r\n        return serializer == null ? value : serializer.call(this, key, value);\r\n    };\r\n}\r\nfunction isImmutableDefault(value) {\r\n    return typeof value !== \"object\" || value == null || Object.isFrozen(value);\r\n}\r\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\r\n    var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\r\n    return {\r\n        detectMutations: function () {\r\n            return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\r\n        }\r\n    };\r\n}\r\nfunction trackProperties(isImmutable, ignorePaths, obj, path, checkedObjects) {\r\n    if (ignorePaths === void 0) { ignorePaths = []; }\r\n    if (path === void 0) { path = \"\"; }\r\n    if (checkedObjects === void 0) { checkedObjects = new Set(); }\r\n    var tracked = { value: obj };\r\n    if (!isImmutable(obj) && !checkedObjects.has(obj)) {\r\n        checkedObjects.add(obj);\r\n        tracked.children = {};\r\n        for (var key in obj) {\r\n            var childPath = path ? path + \".\" + key : key;\r\n            if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\r\n                continue;\r\n            }\r\n            tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\r\n        }\r\n    }\r\n    return tracked;\r\n}\r\nfunction detectMutations(isImmutable, ignoredPaths, trackedProperty, obj, sameParentRef, path) {\r\n    if (ignoredPaths === void 0) { ignoredPaths = []; }\r\n    if (sameParentRef === void 0) { sameParentRef = false; }\r\n    if (path === void 0) { path = \"\"; }\r\n    var prevObj = trackedProperty ? trackedProperty.value : void 0;\r\n    var sameRef = prevObj === obj;\r\n    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\r\n        return { wasMutated: true, path: path };\r\n    }\r\n    if (isImmutable(prevObj) || isImmutable(obj)) {\r\n        return { wasMutated: false };\r\n    }\r\n    var keysToDetect = {};\r\n    for (var key in trackedProperty.children) {\r\n        keysToDetect[key] = true;\r\n    }\r\n    for (var key in obj) {\r\n        keysToDetect[key] = true;\r\n    }\r\n    var hasIgnoredPaths = ignoredPaths.length > 0;\r\n    var _loop_1 = function (key) {\r\n        var nestedPath = path ? path + \".\" + key : key;\r\n        if (hasIgnoredPaths) {\r\n            var hasMatches = ignoredPaths.some(function (ignored) {\r\n                if (ignored instanceof RegExp) {\r\n                    return ignored.test(nestedPath);\r\n                }\r\n                return nestedPath === ignored;\r\n            });\r\n            if (hasMatches) {\r\n                return \"continue\";\r\n            }\r\n        }\r\n        var result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\r\n        if (result.wasMutated) {\r\n            return { value: result };\r\n        }\r\n    };\r\n    for (var key in keysToDetect) {\r\n        var state_1 = _loop_1(key);\r\n        if (typeof state_1 === \"object\")\r\n            return state_1.value;\r\n    }\r\n    return { wasMutated: false };\r\n}\r\nfunction createImmutableStateInvariantMiddleware(options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (false) {}\r\n    var _c = options.isImmutable, isImmutable = _c === void 0 ? isImmutableDefault : _c, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;\r\n    ignoredPaths = ignoredPaths || ignore;\r\n    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\r\n    return function (_c) {\r\n        var getState = _c.getState;\r\n        var state = getState();\r\n        var tracker = track(state);\r\n        var result;\r\n        return function (next) { return function (action) {\r\n            var measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\r\n            measureUtils.measureTime(function () {\r\n                state = getState();\r\n                result = tracker.detectMutations();\r\n                tracker = track(state);\r\n                invariant(!result.wasMutated, \"A state mutation was detected between dispatches, in the path '\" + (result.path || \"\") + \"'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\r\n            });\r\n            var dispatchedAction = next(action);\r\n            measureUtils.measureTime(function () {\r\n                state = getState();\r\n                result = tracker.detectMutations();\r\n                tracker = track(state);\r\n                result.wasMutated && invariant(!result.wasMutated, \"A state mutation was detected inside a dispatch, in the path: \" + (result.path || \"\") + \". Take a look at the reducer(s) handling the action \" + stringify(action) + \". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)\");\r\n            });\r\n            measureUtils.warnIfExceeded();\r\n            return dispatchedAction;\r\n        }; };\r\n    };\r\n}\r\n// src/serializableStateInvariantMiddleware.ts\r\nfunction isPlain(val) {\r\n    var type = typeof val;\r\n    return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || isPlainObject(val);\r\n}\r\nfunction findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths, cache) {\r\n    if (path === void 0) { path = \"\"; }\r\n    if (isSerializable === void 0) { isSerializable = isPlain; }\r\n    if (ignoredPaths === void 0) { ignoredPaths = []; }\r\n    var foundNestedSerializable;\r\n    if (!isSerializable(value)) {\r\n        return {\r\n            keyPath: path || \"<root>\",\r\n            value: value\r\n        };\r\n    }\r\n    if (typeof value !== \"object\" || value === null) {\r\n        return false;\r\n    }\r\n    if (cache == null ? void 0 : cache.has(value))\r\n        return false;\r\n    var entries = getEntries != null ? getEntries(value) : Object.entries(value);\r\n    var hasIgnoredPaths = ignoredPaths.length > 0;\r\n    var _loop_2 = function (key, nestedValue) {\r\n        var nestedPath = path ? path + \".\" + key : key;\r\n        if (hasIgnoredPaths) {\r\n            var hasMatches = ignoredPaths.some(function (ignored) {\r\n                if (ignored instanceof RegExp) {\r\n                    return ignored.test(nestedPath);\r\n                }\r\n                return nestedPath === ignored;\r\n            });\r\n            if (hasMatches) {\r\n                return \"continue\";\r\n            }\r\n        }\r\n        if (!isSerializable(nestedValue)) {\r\n            return { value: {\r\n                    keyPath: nestedPath,\r\n                    value: nestedValue\r\n                } };\r\n        }\r\n        if (typeof nestedValue === \"object\") {\r\n            foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\r\n            if (foundNestedSerializable) {\r\n                return { value: foundNestedSerializable };\r\n            }\r\n        }\r\n    };\r\n    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n        var _c = entries_1[_i], key = _c[0], nestedValue = _c[1];\r\n        var state_2 = _loop_2(key, nestedValue);\r\n        if (typeof state_2 === \"object\")\r\n            return state_2.value;\r\n    }\r\n    if (cache && isNestedFrozen(value))\r\n        cache.add(value);\r\n    return false;\r\n}\r\nfunction isNestedFrozen(value) {\r\n    if (!Object.isFrozen(value))\r\n        return false;\r\n    for (var _i = 0, _c = Object.values(value); _i < _c.length; _i++) {\r\n        var nestedValue = _c[_i];\r\n        if (typeof nestedValue !== \"object\" || nestedValue === null)\r\n            continue;\r\n        if (!isNestedFrozen(nestedValue))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction createSerializableStateInvariantMiddleware(options) {\r\n    if (options === void 0) { options = {}; }\r\n    if (false) {}\r\n    var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e = options.ignoredActionPaths, ignoredActionPaths = _e === void 0 ? [\"meta.arg\", \"meta.baseQueryMeta\"] : _e, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j, _k = options.disableCache, disableCache = _k === void 0 ? false : _k;\r\n    var cache = !disableCache && WeakSet ? new WeakSet() : void 0;\r\n    return function (storeAPI) { return function (next) { return function (action) {\r\n        var result = next(action);\r\n        var measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\r\n        if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\r\n            measureUtils.measureTime(function () {\r\n                var foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\r\n                if (foundActionNonSerializableValue) {\r\n                    var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;\r\n                    console.error(\"A non-serializable value was detected in an action, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\r\n                }\r\n            });\r\n        }\r\n        if (!ignoreState) {\r\n            measureUtils.measureTime(function () {\r\n                var state = storeAPI.getState();\r\n                var foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\r\n                if (foundStateNonSerializableValue) {\r\n                    var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;\r\n                    console.error(\"A non-serializable value was detected in the state, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the reducer(s) handling this action type: \" + action.type + \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\");\r\n                }\r\n            });\r\n            measureUtils.warnIfExceeded();\r\n        }\r\n        return result;\r\n    }; }; };\r\n}\r\n// src/getDefaultMiddleware.ts\r\nfunction isBoolean(x) {\r\n    return typeof x === \"boolean\";\r\n}\r\nfunction curryGetDefaultMiddleware() {\r\n    return function curriedGetDefaultMiddleware(options) {\r\n        return getDefaultMiddleware(options);\r\n    };\r\n}\r\nfunction getDefaultMiddleware(options) {\r\n    if (options === void 0) { options = {}; }\r\n    var _c = options.thunk, thunk = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e = options.serializableCheck, serializableCheck = _e === void 0 ? true : _e, _f = options.actionCreatorCheck, actionCreatorCheck = _f === void 0 ? true : _f;\r\n    var middlewareArray = new MiddlewareArray();\r\n    if (thunk) {\r\n        if (isBoolean(thunk)) {\r\n            middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\r\n        }\r\n        else {\r\n            middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__[\"default\"].withExtraArgument(thunk.extraArgument));\r\n        }\r\n    }\r\n    if (true) {\r\n        if (immutableCheck) {\r\n            var immutableOptions = {};\r\n            if (!isBoolean(immutableCheck)) {\r\n                immutableOptions = immutableCheck;\r\n            }\r\n            middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\r\n        }\r\n        if (serializableCheck) {\r\n            var serializableOptions = {};\r\n            if (!isBoolean(serializableCheck)) {\r\n                serializableOptions = serializableCheck;\r\n            }\r\n            middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\r\n        }\r\n        if (actionCreatorCheck) {\r\n            var actionCreatorOptions = {};\r\n            if (!isBoolean(actionCreatorCheck)) {\r\n                actionCreatorOptions = actionCreatorCheck;\r\n            }\r\n            middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\r\n        }\r\n    }\r\n    return middlewareArray;\r\n}\r\n// src/configureStore.ts\r\nvar IS_PRODUCTION = \"development\" === \"production\";\r\nfunction configureStore(options) {\r\n    var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();\r\n    var _c = options || {}, _d = _c.reducer, reducer = _d === void 0 ? void 0 : _d, _e = _c.middleware, middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;\r\n    var rootReducer;\r\n    if (typeof reducer === \"function\") {\r\n        rootReducer = reducer;\r\n    }\r\n    else if (isPlainObject(reducer)) {\r\n        rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\r\n    }\r\n    else {\r\n        throw new Error('\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\r\n    }\r\n    var finalMiddleware = middleware;\r\n    if (typeof finalMiddleware === \"function\") {\r\n        finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);\r\n        if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {\r\n            throw new Error(\"when using a middleware builder function, an array of middleware must be returned\");\r\n        }\r\n    }\r\n    if (!IS_PRODUCTION && finalMiddleware.some(function (item) { return typeof item !== \"function\"; })) {\r\n        throw new Error(\"each middleware provided to configureStore must be a function\");\r\n    }\r\n    var middlewareEnhancer = redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware.apply(void 0, finalMiddleware);\r\n    var finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\r\n    if (devTools) {\r\n        finalCompose = composeWithDevTools(__spreadValues({\r\n            trace: !IS_PRODUCTION\r\n        }, typeof devTools === \"object\" && devTools));\r\n    }\r\n    var defaultEnhancers = new EnhancerArray(middlewareEnhancer);\r\n    var storeEnhancers = defaultEnhancers;\r\n    if (Array.isArray(enhancers)) {\r\n        storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);\r\n    }\r\n    else if (typeof enhancers === \"function\") {\r\n        storeEnhancers = enhancers(defaultEnhancers);\r\n    }\r\n    var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);\r\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\r\n}\r\n// src/createReducer.ts\r\n\r\n// src/mapBuilders.ts\r\nfunction executeReducerBuilderCallback(builderCallback) {\r\n    var actionsMap = {};\r\n    var actionMatchers = [];\r\n    var defaultCaseReducer;\r\n    var builder = {\r\n        addCase: function (typeOrActionCreator, reducer) {\r\n            if (true) {\r\n                if (actionMatchers.length > 0) {\r\n                    throw new Error(\"`builder.addCase` should only be called before calling `builder.addMatcher`\");\r\n                }\r\n                if (defaultCaseReducer) {\r\n                    throw new Error(\"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\r\n                }\r\n            }\r\n            var type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\r\n            if (!type) {\r\n                throw new Error(\"`builder.addCase` cannot be called with an empty action type\");\r\n            }\r\n            if (type in actionsMap) {\r\n                throw new Error(\"`builder.addCase` cannot be called with two reducers for the same action type\");\r\n            }\r\n            actionsMap[type] = reducer;\r\n            return builder;\r\n        },\r\n        addMatcher: function (matcher, reducer) {\r\n            if (true) {\r\n                if (defaultCaseReducer) {\r\n                    throw new Error(\"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\r\n                }\r\n            }\r\n            actionMatchers.push({ matcher: matcher, reducer: reducer });\r\n            return builder;\r\n        },\r\n        addDefaultCase: function (reducer) {\r\n            if (true) {\r\n                if (defaultCaseReducer) {\r\n                    throw new Error(\"`builder.addDefaultCase` can only be called once\");\r\n                }\r\n            }\r\n            defaultCaseReducer = reducer;\r\n            return builder;\r\n        }\r\n    };\r\n    builderCallback(builder);\r\n    return [actionsMap, actionMatchers, defaultCaseReducer];\r\n}\r\n// src/createReducer.ts\r\nfunction isStateFunction(x) {\r\n    return typeof x === \"function\";\r\n}\r\nvar hasWarnedAboutObjectNotation = false;\r\nfunction createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {\r\n    if (actionMatchers === void 0) { actionMatchers = []; }\r\n    if (true) {\r\n        if (typeof mapOrBuilderCallback === \"object\") {\r\n            if (!hasWarnedAboutObjectNotation) {\r\n                hasWarnedAboutObjectNotation = true;\r\n                console.warn(\"The object notation for `createReducer` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\r\n            }\r\n        }\r\n    }\r\n    var _c = typeof mapOrBuilderCallback === \"function\" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];\r\n    var getInitialState;\r\n    if (isStateFunction(initialState)) {\r\n        getInitialState = function () { return freezeDraftable(initialState()); };\r\n    }\r\n    else {\r\n        var frozenInitialState_1 = freezeDraftable(initialState);\r\n        getInitialState = function () { return frozenInitialState_1; };\r\n    }\r\n    function reducer(state, action) {\r\n        if (state === void 0) { state = getInitialState(); }\r\n        var caseReducers = __spreadArray([\r\n            actionsMap[action.type]\r\n        ], finalActionMatchers.filter(function (_c) {\r\n            var matcher = _c.matcher;\r\n            return matcher(action);\r\n        }).map(function (_c) {\r\n            var reducer2 = _c.reducer;\r\n            return reducer2;\r\n        }));\r\n        if (caseReducers.filter(function (cr) { return !!cr; }).length === 0) {\r\n            caseReducers = [finalDefaultCaseReducer];\r\n        }\r\n        return caseReducers.reduce(function (previousState, caseReducer) {\r\n            if (caseReducer) {\r\n                if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\r\n                    var draft = previousState;\r\n                    var result = caseReducer(draft, action);\r\n                    if (result === void 0) {\r\n                        return previousState;\r\n                    }\r\n                    return result;\r\n                }\r\n                else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\r\n                    var result = caseReducer(previousState, action);\r\n                    if (result === void 0) {\r\n                        if (previousState === null) {\r\n                            return previousState;\r\n                        }\r\n                        throw Error(\"A case reducer on a non-draftable value must not return undefined\");\r\n                    }\r\n                    return result;\r\n                }\r\n                else {\r\n                    return (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(previousState, function (draft) {\r\n                        return caseReducer(draft, action);\r\n                    });\r\n                }\r\n            }\r\n            return previousState;\r\n        }, state);\r\n    }\r\n    reducer.getInitialState = getInitialState;\r\n    return reducer;\r\n}\r\n// src/createSlice.ts\r\nvar hasWarnedAboutObjectNotation2 = false;\r\nfunction getType2(slice, actionKey) {\r\n    return slice + \"/\" + actionKey;\r\n}\r\nfunction createSlice(options) {\r\n    var name = options.name;\r\n    if (!name) {\r\n        throw new Error(\"`name` is a required option for createSlice\");\r\n    }\r\n    if (typeof process !== \"undefined\" && \"development\" === \"development\") {\r\n        if (options.initialState === void 0) {\r\n            console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\r\n        }\r\n    }\r\n    var initialState = typeof options.initialState == \"function\" ? options.initialState : freezeDraftable(options.initialState);\r\n    var reducers = options.reducers || {};\r\n    var reducerNames = Object.keys(reducers);\r\n    var sliceCaseReducersByName = {};\r\n    var sliceCaseReducersByType = {};\r\n    var actionCreators = {};\r\n    reducerNames.forEach(function (reducerName) {\r\n        var maybeReducerWithPrepare = reducers[reducerName];\r\n        var type = getType2(name, reducerName);\r\n        var caseReducer;\r\n        var prepareCallback;\r\n        if (\"reducer\" in maybeReducerWithPrepare) {\r\n            caseReducer = maybeReducerWithPrepare.reducer;\r\n            prepareCallback = maybeReducerWithPrepare.prepare;\r\n        }\r\n        else {\r\n            caseReducer = maybeReducerWithPrepare;\r\n        }\r\n        sliceCaseReducersByName[reducerName] = caseReducer;\r\n        sliceCaseReducersByType[type] = caseReducer;\r\n        actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);\r\n    });\r\n    function buildReducer() {\r\n        if (true) {\r\n            if (typeof options.extraReducers === \"object\") {\r\n                if (!hasWarnedAboutObjectNotation2) {\r\n                    hasWarnedAboutObjectNotation2 = true;\r\n                    console.warn(\"The object notation for `createSlice.extraReducers` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\r\n                }\r\n            }\r\n        }\r\n        var _c = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;\r\n        var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);\r\n        return createReducer(initialState, function (builder) {\r\n            for (var key in finalCaseReducers) {\r\n                builder.addCase(key, finalCaseReducers[key]);\r\n            }\r\n            for (var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++) {\r\n                var m = actionMatchers_1[_i];\r\n                builder.addMatcher(m.matcher, m.reducer);\r\n            }\r\n            if (defaultCaseReducer) {\r\n                builder.addDefaultCase(defaultCaseReducer);\r\n            }\r\n        });\r\n    }\r\n    var _reducer;\r\n    return {\r\n        name: name,\r\n        reducer: function (state, action) {\r\n            if (!_reducer)\r\n                _reducer = buildReducer();\r\n            return _reducer(state, action);\r\n        },\r\n        actions: actionCreators,\r\n        caseReducers: sliceCaseReducersByName,\r\n        getInitialState: function () {\r\n            if (!_reducer)\r\n                _reducer = buildReducer();\r\n            return _reducer.getInitialState();\r\n        }\r\n    };\r\n}\r\n// src/entities/entity_state.ts\r\nfunction getInitialEntityState() {\r\n    return {\r\n        ids: [],\r\n        entities: {}\r\n    };\r\n}\r\nfunction createInitialStateFactory() {\r\n    function getInitialState(additionalState) {\r\n        if (additionalState === void 0) { additionalState = {}; }\r\n        return Object.assign(getInitialEntityState(), additionalState);\r\n    }\r\n    return { getInitialState: getInitialState };\r\n}\r\n// src/entities/state_selectors.ts\r\nfunction createSelectorsFactory() {\r\n    function getSelectors(selectState) {\r\n        var selectIds = function (state) { return state.ids; };\r\n        var selectEntities = function (state) { return state.entities; };\r\n        var selectAll = createDraftSafeSelector(selectIds, selectEntities, function (ids, entities) { return ids.map(function (id) { return entities[id]; }); });\r\n        var selectId = function (_, id) { return id; };\r\n        var selectById = function (entities, id) { return entities[id]; };\r\n        var selectTotal = createDraftSafeSelector(selectIds, function (ids) { return ids.length; });\r\n        if (!selectState) {\r\n            return {\r\n                selectIds: selectIds,\r\n                selectEntities: selectEntities,\r\n                selectAll: selectAll,\r\n                selectTotal: selectTotal,\r\n                selectById: createDraftSafeSelector(selectEntities, selectId, selectById)\r\n            };\r\n        }\r\n        var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);\r\n        return {\r\n            selectIds: createDraftSafeSelector(selectState, selectIds),\r\n            selectEntities: selectGlobalizedEntities,\r\n            selectAll: createDraftSafeSelector(selectState, selectAll),\r\n            selectTotal: createDraftSafeSelector(selectState, selectTotal),\r\n            selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)\r\n        };\r\n    }\r\n    return { getSelectors: getSelectors };\r\n}\r\n// src/entities/state_adapter.ts\r\n\r\nfunction createSingleArgumentStateOperator(mutator) {\r\n    var operator = createStateOperator(function (_, state) { return mutator(state); });\r\n    return function operation(state) {\r\n        return operator(state, void 0);\r\n    };\r\n}\r\nfunction createStateOperator(mutator) {\r\n    return function operation(state, arg) {\r\n        function isPayloadActionArgument(arg2) {\r\n            return isFSA(arg2);\r\n        }\r\n        var runMutator = function (draft) {\r\n            if (isPayloadActionArgument(arg)) {\r\n                mutator(arg.payload, draft);\r\n            }\r\n            else {\r\n                mutator(arg, draft);\r\n            }\r\n        };\r\n        if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(state)) {\r\n            runMutator(state);\r\n            return state;\r\n        }\r\n        else {\r\n            return (0,immer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state, runMutator);\r\n        }\r\n    };\r\n}\r\n// src/entities/utils.ts\r\nfunction selectIdValue(entity, selectId) {\r\n    var key = selectId(entity);\r\n    if ( true && key === void 0) {\r\n        console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\r\n    }\r\n    return key;\r\n}\r\nfunction ensureEntitiesArray(entities) {\r\n    if (!Array.isArray(entities)) {\r\n        entities = Object.values(entities);\r\n    }\r\n    return entities;\r\n}\r\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    var added = [];\r\n    var updated = [];\r\n    for (var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++) {\r\n        var entity = newEntities_1[_i];\r\n        var id = selectIdValue(entity, selectId);\r\n        if (id in state.entities) {\r\n            updated.push({ id: id, changes: entity });\r\n        }\r\n        else {\r\n            added.push(entity);\r\n        }\r\n    }\r\n    return [added, updated];\r\n}\r\n// src/entities/unsorted_state_adapter.ts\r\nfunction createUnsortedStateAdapter(selectId) {\r\n    function addOneMutably(entity, state) {\r\n        var key = selectIdValue(entity, selectId);\r\n        if (key in state.entities) {\r\n            return;\r\n        }\r\n        state.ids.push(key);\r\n        state.entities[key] = entity;\r\n    }\r\n    function addManyMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        for (var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++) {\r\n            var entity = newEntities_2[_i];\r\n            addOneMutably(entity, state);\r\n        }\r\n    }\r\n    function setOneMutably(entity, state) {\r\n        var key = selectIdValue(entity, selectId);\r\n        if (!(key in state.entities)) {\r\n            state.ids.push(key);\r\n        }\r\n        state.entities[key] = entity;\r\n    }\r\n    function setManyMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        for (var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++) {\r\n            var entity = newEntities_3[_i];\r\n            setOneMutably(entity, state);\r\n        }\r\n    }\r\n    function setAllMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        state.ids = [];\r\n        state.entities = {};\r\n        addManyMutably(newEntities, state);\r\n    }\r\n    function removeOneMutably(key, state) {\r\n        return removeManyMutably([key], state);\r\n    }\r\n    function removeManyMutably(keys, state) {\r\n        var didMutate = false;\r\n        keys.forEach(function (key) {\r\n            if (key in state.entities) {\r\n                delete state.entities[key];\r\n                didMutate = true;\r\n            }\r\n        });\r\n        if (didMutate) {\r\n            state.ids = state.ids.filter(function (id) { return id in state.entities; });\r\n        }\r\n    }\r\n    function removeAllMutably(state) {\r\n        Object.assign(state, {\r\n            ids: [],\r\n            entities: {}\r\n        });\r\n    }\r\n    function takeNewKey(keys, update, state) {\r\n        var original2 = state.entities[update.id];\r\n        var updated = Object.assign({}, original2, update.changes);\r\n        var newKey = selectIdValue(updated, selectId);\r\n        var hasNewKey = newKey !== update.id;\r\n        if (hasNewKey) {\r\n            keys[update.id] = newKey;\r\n            delete state.entities[update.id];\r\n        }\r\n        state.entities[newKey] = updated;\r\n        return hasNewKey;\r\n    }\r\n    function updateOneMutably(update, state) {\r\n        return updateManyMutably([update], state);\r\n    }\r\n    function updateManyMutably(updates, state) {\r\n        var newKeys = {};\r\n        var updatesPerEntity = {};\r\n        updates.forEach(function (update) {\r\n            if (update.id in state.entities) {\r\n                updatesPerEntity[update.id] = {\r\n                    id: update.id,\r\n                    changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)\r\n                };\r\n            }\r\n        });\r\n        updates = Object.values(updatesPerEntity);\r\n        var didMutateEntities = updates.length > 0;\r\n        if (didMutateEntities) {\r\n            var didMutateIds = updates.filter(function (update) { return takeNewKey(newKeys, update, state); }).length > 0;\r\n            if (didMutateIds) {\r\n                state.ids = Object.keys(state.entities);\r\n            }\r\n        }\r\n    }\r\n    function upsertOneMutably(entity, state) {\r\n        return upsertManyMutably([entity], state);\r\n    }\r\n    function upsertManyMutably(newEntities, state) {\r\n        var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];\r\n        updateManyMutably(updated, state);\r\n        addManyMutably(added, state);\r\n    }\r\n    return {\r\n        removeAll: createSingleArgumentStateOperator(removeAllMutably),\r\n        addOne: createStateOperator(addOneMutably),\r\n        addMany: createStateOperator(addManyMutably),\r\n        setOne: createStateOperator(setOneMutably),\r\n        setMany: createStateOperator(setManyMutably),\r\n        setAll: createStateOperator(setAllMutably),\r\n        updateOne: createStateOperator(updateOneMutably),\r\n        updateMany: createStateOperator(updateManyMutably),\r\n        upsertOne: createStateOperator(upsertOneMutably),\r\n        upsertMany: createStateOperator(upsertManyMutably),\r\n        removeOne: createStateOperator(removeOneMutably),\r\n        removeMany: createStateOperator(removeManyMutably)\r\n    };\r\n}\r\n// src/entities/sorted_state_adapter.ts\r\nfunction createSortedStateAdapter(selectId, sort) {\r\n    var _c = createUnsortedStateAdapter(selectId), removeOne = _c.removeOne, removeMany = _c.removeMany, removeAll = _c.removeAll;\r\n    function addOneMutably(entity, state) {\r\n        return addManyMutably([entity], state);\r\n    }\r\n    function addManyMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        var models = newEntities.filter(function (model) { return !(selectIdValue(model, selectId) in state.entities); });\r\n        if (models.length !== 0) {\r\n            merge(models, state);\r\n        }\r\n    }\r\n    function setOneMutably(entity, state) {\r\n        return setManyMutably([entity], state);\r\n    }\r\n    function setManyMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        if (newEntities.length !== 0) {\r\n            merge(newEntities, state);\r\n        }\r\n    }\r\n    function setAllMutably(newEntities, state) {\r\n        newEntities = ensureEntitiesArray(newEntities);\r\n        state.entities = {};\r\n        state.ids = [];\r\n        addManyMutably(newEntities, state);\r\n    }\r\n    function updateOneMutably(update, state) {\r\n        return updateManyMutably([update], state);\r\n    }\r\n    function updateManyMutably(updates, state) {\r\n        var appliedUpdates = false;\r\n        for (var _i = 0, updates_1 = updates; _i < updates_1.length; _i++) {\r\n            var update = updates_1[_i];\r\n            var entity = state.entities[update.id];\r\n            if (!entity) {\r\n                continue;\r\n            }\r\n            appliedUpdates = true;\r\n            Object.assign(entity, update.changes);\r\n            var newId = selectId(entity);\r\n            if (update.id !== newId) {\r\n                delete state.entities[update.id];\r\n                state.entities[newId] = entity;\r\n            }\r\n        }\r\n        if (appliedUpdates) {\r\n            resortEntities(state);\r\n        }\r\n    }\r\n    function upsertOneMutably(entity, state) {\r\n        return upsertManyMutably([entity], state);\r\n    }\r\n    function upsertManyMutably(newEntities, state) {\r\n        var _c = splitAddedUpdatedEntities(newEntities, selectId, state), added = _c[0], updated = _c[1];\r\n        updateManyMutably(updated, state);\r\n        addManyMutably(added, state);\r\n    }\r\n    function areArraysEqual(a, b) {\r\n        if (a.length !== b.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < a.length && i < b.length; i++) {\r\n            if (a[i] === b[i]) {\r\n                continue;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function merge(models, state) {\r\n        models.forEach(function (model) {\r\n            state.entities[selectId(model)] = model;\r\n        });\r\n        resortEntities(state);\r\n    }\r\n    function resortEntities(state) {\r\n        var allEntities = Object.values(state.entities);\r\n        allEntities.sort(sort);\r\n        var newSortedIds = allEntities.map(selectId);\r\n        var ids = state.ids;\r\n        if (!areArraysEqual(ids, newSortedIds)) {\r\n            state.ids = newSortedIds;\r\n        }\r\n    }\r\n    return {\r\n        removeOne: removeOne,\r\n        removeMany: removeMany,\r\n        removeAll: removeAll,\r\n        addOne: createStateOperator(addOneMutably),\r\n        updateOne: createStateOperator(updateOneMutably),\r\n        upsertOne: createStateOperator(upsertOneMutably),\r\n        setOne: createStateOperator(setOneMutably),\r\n        setMany: createStateOperator(setManyMutably),\r\n        setAll: createStateOperator(setAllMutably),\r\n        addMany: createStateOperator(addManyMutably),\r\n        updateMany: createStateOperator(updateManyMutably),\r\n        upsertMany: createStateOperator(upsertManyMutably)\r\n    };\r\n}\r\n// src/entities/create_adapter.ts\r\nfunction createEntityAdapter(options) {\r\n    if (options === void 0) { options = {}; }\r\n    var _c = __spreadValues({\r\n        sortComparer: false,\r\n        selectId: function (instance) { return instance.id; }\r\n    }, options), selectId = _c.selectId, sortComparer = _c.sortComparer;\r\n    var stateFactory = createInitialStateFactory();\r\n    var selectorsFactory = createSelectorsFactory();\r\n    var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\r\n    return __spreadValues(__spreadValues(__spreadValues({\r\n        selectId: selectId,\r\n        sortComparer: sortComparer\r\n    }, stateFactory), selectorsFactory), stateAdapter);\r\n}\r\n// src/nanoid.ts\r\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\r\nvar nanoid = function (size) {\r\n    if (size === void 0) { size = 21; }\r\n    var id = \"\";\r\n    var i = size;\r\n    while (i--) {\r\n        id += urlAlphabet[Math.random() * 64 | 0];\r\n    }\r\n    return id;\r\n};\r\n// src/createAsyncThunk.ts\r\nvar commonProperties = [\r\n    \"name\",\r\n    \"message\",\r\n    \"stack\",\r\n    \"code\"\r\n];\r\nvar RejectWithValue = /** @class */ (function () {\r\n    function RejectWithValue(payload, meta) {\r\n        this.payload = payload;\r\n        this.meta = meta;\r\n    }\r\n    return RejectWithValue;\r\n}());\r\nvar FulfillWithMeta = /** @class */ (function () {\r\n    function FulfillWithMeta(payload, meta) {\r\n        this.payload = payload;\r\n        this.meta = meta;\r\n    }\r\n    return FulfillWithMeta;\r\n}());\r\nvar miniSerializeError = function (value) {\r\n    if (typeof value === \"object\" && value !== null) {\r\n        var simpleError = {};\r\n        for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {\r\n            var property = commonProperties_1[_i];\r\n            if (typeof value[property] === \"string\") {\r\n                simpleError[property] = value[property];\r\n            }\r\n        }\r\n        return simpleError;\r\n    }\r\n    return { message: String(value) };\r\n};\r\nvar createAsyncThunk = (function () {\r\n    function createAsyncThunk2(typePrefix, payloadCreator, options) {\r\n        var fulfilled = createAction(typePrefix + \"/fulfilled\", function (payload, requestId, arg, meta) { return ({\r\n            payload: payload,\r\n            meta: __spreadProps(__spreadValues({}, meta || {}), {\r\n                arg: arg,\r\n                requestId: requestId,\r\n                requestStatus: \"fulfilled\"\r\n            })\r\n        }); });\r\n        var pending = createAction(typePrefix + \"/pending\", function (requestId, arg, meta) { return ({\r\n            payload: void 0,\r\n            meta: __spreadProps(__spreadValues({}, meta || {}), {\r\n                arg: arg,\r\n                requestId: requestId,\r\n                requestStatus: \"pending\"\r\n            })\r\n        }); });\r\n        var rejected = createAction(typePrefix + \"/rejected\", function (error, requestId, arg, payload, meta) { return ({\r\n            payload: payload,\r\n            error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\r\n            meta: __spreadProps(__spreadValues({}, meta || {}), {\r\n                arg: arg,\r\n                requestId: requestId,\r\n                rejectedWithValue: !!payload,\r\n                requestStatus: \"rejected\",\r\n                aborted: (error == null ? void 0 : error.name) === \"AbortError\",\r\n                condition: (error == null ? void 0 : error.name) === \"ConditionError\"\r\n            })\r\n        }); });\r\n        var displayedWarning = false;\r\n        var AC = typeof AbortController !== \"undefined\" ? AbortController : /** @class */ (function () {\r\n            function class_1() {\r\n                this.signal = {\r\n                    aborted: false,\r\n                    addEventListener: function () {\r\n                    },\r\n                    dispatchEvent: function () {\r\n                        return false;\r\n                    },\r\n                    onabort: function () {\r\n                    },\r\n                    removeEventListener: function () {\r\n                    },\r\n                    reason: void 0,\r\n                    throwIfAborted: function () {\r\n                    }\r\n                };\r\n            }\r\n            class_1.prototype.abort = function () {\r\n                if (true) {\r\n                    if (!displayedWarning) {\r\n                        displayedWarning = true;\r\n                        console.info(\"This platform does not implement AbortController. \\nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.\");\r\n                    }\r\n                }\r\n            };\r\n            return class_1;\r\n        }());\r\n        function actionCreator(arg) {\r\n            return function (dispatch, getState, extra) {\r\n                var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();\r\n                var abortController = new AC();\r\n                var abortReason;\r\n                var started = false;\r\n                function abort(reason) {\r\n                    abortReason = reason;\r\n                    abortController.abort();\r\n                }\r\n                var promise2 = function () {\r\n                    return __async(this, null, function () {\r\n                        var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;\r\n                        return __generator(this, function (_c) {\r\n                            switch (_c.label) {\r\n                                case 0:\r\n                                    _c.trys.push([0, 4, , 5]);\r\n                                    conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, { getState: getState, extra: extra });\r\n                                    if (!isThenable(conditionResult)) return [3 /*break*/, 2];\r\n                                    return [4 /*yield*/, conditionResult];\r\n                                case 1:\r\n                                    conditionResult = _c.sent();\r\n                                    _c.label = 2;\r\n                                case 2:\r\n                                    if (conditionResult === false || abortController.signal.aborted) {\r\n                                        throw {\r\n                                            name: \"ConditionError\",\r\n                                            message: \"Aborted due to condition callback returning false.\"\r\n                                        };\r\n                                    }\r\n                                    started = true;\r\n                                    abortedPromise = new Promise(function (_, reject) { return abortController.signal.addEventListener(\"abort\", function () { return reject({\r\n                                        name: \"AbortError\",\r\n                                        message: abortReason || \"Aborted\"\r\n                                    }); }); });\r\n                                    dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, { requestId: requestId, arg: arg }, { getState: getState, extra: extra })));\r\n                                    return [4 /*yield*/, Promise.race([\r\n                                            abortedPromise,\r\n                                            Promise.resolve(payloadCreator(arg, {\r\n                                                dispatch: dispatch,\r\n                                                getState: getState,\r\n                                                extra: extra,\r\n                                                requestId: requestId,\r\n                                                signal: abortController.signal,\r\n                                                abort: abort,\r\n                                                rejectWithValue: function (value, meta) {\r\n                                                    return new RejectWithValue(value, meta);\r\n                                                },\r\n                                                fulfillWithValue: function (value, meta) {\r\n                                                    return new FulfillWithMeta(value, meta);\r\n                                                }\r\n                                            })).then(function (result) {\r\n                                                if (result instanceof RejectWithValue) {\r\n                                                    throw result;\r\n                                                }\r\n                                                if (result instanceof FulfillWithMeta) {\r\n                                                    return fulfilled(result.payload, requestId, arg, result.meta);\r\n                                                }\r\n                                                return fulfilled(result, requestId, arg);\r\n                                            })\r\n                                        ])];\r\n                                case 3:\r\n                                    finalAction = _c.sent();\r\n                                    return [3 /*break*/, 5];\r\n                                case 4:\r\n                                    err_1 = _c.sent();\r\n                                    finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);\r\n                                    return [3 /*break*/, 5];\r\n                                case 5:\r\n                                    skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\r\n                                    if (!skipDispatch) {\r\n                                        dispatch(finalAction);\r\n                                    }\r\n                                    return [2 /*return*/, finalAction];\r\n                            }\r\n                        });\r\n                    });\r\n                }();\r\n                return Object.assign(promise2, {\r\n                    abort: abort,\r\n                    requestId: requestId,\r\n                    arg: arg,\r\n                    unwrap: function () {\r\n                        return promise2.then(unwrapResult);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        return Object.assign(actionCreator, {\r\n            pending: pending,\r\n            rejected: rejected,\r\n            fulfilled: fulfilled,\r\n            typePrefix: typePrefix\r\n        });\r\n    }\r\n    createAsyncThunk2.withTypes = function () { return createAsyncThunk2; };\r\n    return createAsyncThunk2;\r\n})();\r\nfunction unwrapResult(action) {\r\n    if (action.meta && action.meta.rejectedWithValue) {\r\n        throw action.payload;\r\n    }\r\n    if (action.error) {\r\n        throw action.error;\r\n    }\r\n    return action.payload;\r\n}\r\nfunction isThenable(value) {\r\n    return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\r\n}\r\n// src/matchers.ts\r\nvar matches = function (matcher, action) {\r\n    if (hasMatchFunction(matcher)) {\r\n        return matcher.match(action);\r\n    }\r\n    else {\r\n        return matcher(action);\r\n    }\r\n};\r\nfunction isAnyOf() {\r\n    var matchers = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        matchers[_i] = arguments[_i];\r\n    }\r\n    return function (action) {\r\n        return matchers.some(function (matcher) { return matches(matcher, action); });\r\n    };\r\n}\r\nfunction isAllOf() {\r\n    var matchers = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        matchers[_i] = arguments[_i];\r\n    }\r\n    return function (action) {\r\n        return matchers.every(function (matcher) { return matches(matcher, action); });\r\n    };\r\n}\r\nfunction hasExpectedRequestMetadata(action, validStatus) {\r\n    if (!action || !action.meta)\r\n        return false;\r\n    var hasValidRequestId = typeof action.meta.requestId === \"string\";\r\n    var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\r\n    return hasValidRequestId && hasValidRequestStatus;\r\n}\r\nfunction isAsyncThunkArray(a) {\r\n    return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\r\n}\r\nfunction isPending() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) { return hasExpectedRequestMetadata(action, [\"pending\"]); };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isPending()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var matchers = asyncThunks.map(function (asyncThunk) { return asyncThunk.pending; });\r\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\nfunction isRejected() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) { return hasExpectedRequestMetadata(action, [\"rejected\"]); };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isRejected()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var matchers = asyncThunks.map(function (asyncThunk) { return asyncThunk.rejected; });\r\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\nfunction isRejectedWithValue() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    var hasFlag = function (action) {\r\n        return action && action.meta && action.meta.rejectedWithValue;\r\n    };\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) {\r\n            var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\r\n            return combinedMatcher(action);\r\n        };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isRejectedWithValue()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\nfunction isFulfilled() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) { return hasExpectedRequestMetadata(action, [\"fulfilled\"]); };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isFulfilled()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var matchers = asyncThunks.map(function (asyncThunk) { return asyncThunk.fulfilled; });\r\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\nfunction isAsyncThunkAction() {\r\n    var asyncThunks = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        asyncThunks[_i] = arguments[_i];\r\n    }\r\n    if (asyncThunks.length === 0) {\r\n        return function (action) { return hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]); };\r\n    }\r\n    if (!isAsyncThunkArray(asyncThunks)) {\r\n        return isAsyncThunkAction()(asyncThunks[0]);\r\n    }\r\n    return function (action) {\r\n        var matchers = [];\r\n        for (var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++) {\r\n            var asyncThunk = asyncThunks_1[_i];\r\n            matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);\r\n        }\r\n        var combinedMatcher = isAnyOf.apply(void 0, matchers);\r\n        return combinedMatcher(action);\r\n    };\r\n}\r\n// src/listenerMiddleware/utils.ts\r\nvar assertFunction = function (func, expected) {\r\n    if (typeof func !== \"function\") {\r\n        throw new TypeError(expected + \" is not a function\");\r\n    }\r\n};\r\nvar noop = function () {\r\n};\r\nvar catchRejection = function (promise2, onError) {\r\n    if (onError === void 0) { onError = noop; }\r\n    promise2.catch(onError);\r\n    return promise2;\r\n};\r\nvar addAbortSignalListener = function (abortSignal, callback) {\r\n    abortSignal.addEventListener(\"abort\", callback, { once: true });\r\n    return function () { return abortSignal.removeEventListener(\"abort\", callback); };\r\n};\r\nvar abortControllerWithReason = function (abortController, reason) {\r\n    var signal = abortController.signal;\r\n    if (signal.aborted) {\r\n        return;\r\n    }\r\n    if (!(\"reason\" in signal)) {\r\n        Object.defineProperty(signal, \"reason\", {\r\n            enumerable: true,\r\n            value: reason,\r\n            configurable: true,\r\n            writable: true\r\n        });\r\n    }\r\n    ;\r\n    abortController.abort(reason);\r\n};\r\n// src/listenerMiddleware/exceptions.ts\r\nvar task = \"task\";\r\nvar listener = \"listener\";\r\nvar completed = \"completed\";\r\nvar cancelled = \"cancelled\";\r\nvar taskCancelled = \"task-\" + cancelled;\r\nvar taskCompleted = \"task-\" + completed;\r\nvar listenerCancelled = listener + \"-\" + cancelled;\r\nvar listenerCompleted = listener + \"-\" + completed;\r\nvar TaskAbortError = /** @class */ (function () {\r\n    function TaskAbortError(code) {\r\n        this.code = code;\r\n        this.name = \"TaskAbortError\";\r\n        this.message = task + \" \" + cancelled + \" (reason: \" + code + \")\";\r\n    }\r\n    return TaskAbortError;\r\n}());\r\n// src/listenerMiddleware/task.ts\r\nvar validateActive = function (signal) {\r\n    if (signal.aborted) {\r\n        throw new TaskAbortError(signal.reason);\r\n    }\r\n};\r\nfunction raceWithSignal(signal, promise2) {\r\n    var cleanup = noop;\r\n    return new Promise(function (resolve, reject) {\r\n        var notifyRejection = function () { return reject(new TaskAbortError(signal.reason)); };\r\n        if (signal.aborted) {\r\n            notifyRejection();\r\n            return;\r\n        }\r\n        cleanup = addAbortSignalListener(signal, notifyRejection);\r\n        promise2.finally(function () { return cleanup(); }).then(resolve, reject);\r\n    }).finally(function () {\r\n        cleanup = noop;\r\n    });\r\n}\r\nvar runTask = function (task2, cleanUp) { return __async(void 0, null, function () {\r\n    var value, error_1;\r\n    return __generator(this, function (_c) {\r\n        switch (_c.label) {\r\n            case 0:\r\n                _c.trys.push([0, 3, 4, 5]);\r\n                return [4 /*yield*/, Promise.resolve()];\r\n            case 1:\r\n                _c.sent();\r\n                return [4 /*yield*/, task2()];\r\n            case 2:\r\n                value = _c.sent();\r\n                return [2 /*return*/, {\r\n                        status: \"ok\",\r\n                        value: value\r\n                    }];\r\n            case 3:\r\n                error_1 = _c.sent();\r\n                return [2 /*return*/, {\r\n                        status: error_1 instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\r\n                        error: error_1\r\n                    }];\r\n            case 4:\r\n                cleanUp == null ? void 0 : cleanUp();\r\n                return [7 /*endfinally*/];\r\n            case 5: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nvar createPause = function (signal) {\r\n    return function (promise2) {\r\n        return catchRejection(raceWithSignal(signal, promise2).then(function (output) {\r\n            validateActive(signal);\r\n            return output;\r\n        }));\r\n    };\r\n};\r\nvar createDelay = function (signal) {\r\n    var pause = createPause(signal);\r\n    return function (timeoutMs) {\r\n        return pause(new Promise(function (resolve) { return setTimeout(resolve, timeoutMs); }));\r\n    };\r\n};\r\n// src/listenerMiddleware/index.ts\r\nvar assign = Object.assign;\r\nvar INTERNAL_NIL_TOKEN = {};\r\nvar alm = \"listenerMiddleware\";\r\nvar createFork = function (parentAbortSignal, parentBlockingPromises) {\r\n    var linkControllers = function (controller) { return addAbortSignalListener(parentAbortSignal, function () { return abortControllerWithReason(controller, parentAbortSignal.reason); }); };\r\n    return function (taskExecutor, opts) {\r\n        assertFunction(taskExecutor, \"taskExecutor\");\r\n        var childAbortController = new AbortController();\r\n        linkControllers(childAbortController);\r\n        var result = runTask(function () { return __async(void 0, null, function () {\r\n            var result2;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        validateActive(parentAbortSignal);\r\n                        validateActive(childAbortController.signal);\r\n                        return [4 /*yield*/, taskExecutor({\r\n                                pause: createPause(childAbortController.signal),\r\n                                delay: createDelay(childAbortController.signal),\r\n                                signal: childAbortController.signal\r\n                            })];\r\n                    case 1:\r\n                        result2 = _c.sent();\r\n                        validateActive(childAbortController.signal);\r\n                        return [2 /*return*/, result2];\r\n                }\r\n            });\r\n        }); }, function () { return abortControllerWithReason(childAbortController, taskCompleted); });\r\n        if (opts == null ? void 0 : opts.autoJoin) {\r\n            parentBlockingPromises.push(result);\r\n        }\r\n        return {\r\n            result: createPause(parentAbortSignal)(result),\r\n            cancel: function () {\r\n                abortControllerWithReason(childAbortController, taskCancelled);\r\n            }\r\n        };\r\n    };\r\n};\r\nvar createTakePattern = function (startListening, signal) {\r\n    var take = function (predicate, timeout) { return __async(void 0, null, function () {\r\n        var unsubscribe, tuplePromise, promises, output;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    validateActive(signal);\r\n                    unsubscribe = function () {\r\n                    };\r\n                    tuplePromise = new Promise(function (resolve, reject) {\r\n                        var stopListening = startListening({\r\n                            predicate: predicate,\r\n                            effect: function (action, listenerApi) {\r\n                                listenerApi.unsubscribe();\r\n                                resolve([\r\n                                    action,\r\n                                    listenerApi.getState(),\r\n                                    listenerApi.getOriginalState()\r\n                                ]);\r\n                            }\r\n                        });\r\n                        unsubscribe = function () {\r\n                            stopListening();\r\n                            reject();\r\n                        };\r\n                    });\r\n                    promises = [\r\n                        tuplePromise\r\n                    ];\r\n                    if (timeout != null) {\r\n                        promises.push(new Promise(function (resolve) { return setTimeout(resolve, timeout, null); }));\r\n                    }\r\n                    _c.label = 1;\r\n                case 1:\r\n                    _c.trys.push([1, , 3, 4]);\r\n                    return [4 /*yield*/, raceWithSignal(signal, Promise.race(promises))];\r\n                case 2:\r\n                    output = _c.sent();\r\n                    validateActive(signal);\r\n                    return [2 /*return*/, output];\r\n                case 3:\r\n                    unsubscribe();\r\n                    return [7 /*endfinally*/];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); };\r\n    return function (predicate, timeout) { return catchRejection(take(predicate, timeout)); };\r\n};\r\nvar getListenerEntryPropsFrom = function (options) {\r\n    var type = options.type, actionCreator = options.actionCreator, matcher = options.matcher, predicate = options.predicate, effect = options.effect;\r\n    if (type) {\r\n        predicate = createAction(type).match;\r\n    }\r\n    else if (actionCreator) {\r\n        type = actionCreator.type;\r\n        predicate = actionCreator.match;\r\n    }\r\n    else if (matcher) {\r\n        predicate = matcher;\r\n    }\r\n    else if (predicate) {\r\n    }\r\n    else {\r\n        throw new Error(\"Creating or removing a listener requires one of the known fields for matching an action\");\r\n    }\r\n    assertFunction(effect, \"options.listener\");\r\n    return { predicate: predicate, type: type, effect: effect };\r\n};\r\nvar createListenerEntry = function (options) {\r\n    var _c = getListenerEntryPropsFrom(options), type = _c.type, predicate = _c.predicate, effect = _c.effect;\r\n    var id = nanoid();\r\n    var entry = {\r\n        id: id,\r\n        effect: effect,\r\n        type: type,\r\n        predicate: predicate,\r\n        pending: new Set(),\r\n        unsubscribe: function () {\r\n            throw new Error(\"Unsubscribe not initialized\");\r\n        }\r\n    };\r\n    return entry;\r\n};\r\nvar cancelActiveListeners = function (entry) {\r\n    entry.pending.forEach(function (controller) {\r\n        abortControllerWithReason(controller, listenerCancelled);\r\n    });\r\n};\r\nvar createClearListenerMiddleware = function (listenerMap) {\r\n    return function () {\r\n        listenerMap.forEach(cancelActiveListeners);\r\n        listenerMap.clear();\r\n    };\r\n};\r\nvar safelyNotifyError = function (errorHandler, errorToNotify, errorInfo) {\r\n    try {\r\n        errorHandler(errorToNotify, errorInfo);\r\n    }\r\n    catch (errorHandlerError) {\r\n        setTimeout(function () {\r\n            throw errorHandlerError;\r\n        }, 0);\r\n    }\r\n};\r\nvar addListener = createAction(alm + \"/add\");\r\nvar clearAllListeners = createAction(alm + \"/removeAll\");\r\nvar removeListener = createAction(alm + \"/remove\");\r\nvar defaultErrorHandler = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    console.error.apply(console, __spreadArray([alm + \"/error\"], args));\r\n};\r\nfunction createListenerMiddleware(middlewareOptions) {\r\n    var _this = this;\r\n    if (middlewareOptions === void 0) { middlewareOptions = {}; }\r\n    var listenerMap = new Map();\r\n    var extra = middlewareOptions.extra, _c = middlewareOptions.onError, onError = _c === void 0 ? defaultErrorHandler : _c;\r\n    assertFunction(onError, \"onError\");\r\n    var insertEntry = function (entry) {\r\n        entry.unsubscribe = function () { return listenerMap.delete(entry.id); };\r\n        listenerMap.set(entry.id, entry);\r\n        return function (cancelOptions) {\r\n            entry.unsubscribe();\r\n            if (cancelOptions == null ? void 0 : cancelOptions.cancelActive) {\r\n                cancelActiveListeners(entry);\r\n            }\r\n        };\r\n    };\r\n    var findListenerEntry = function (comparator) {\r\n        for (var _i = 0, _c = Array.from(listenerMap.values()); _i < _c.length; _i++) {\r\n            var entry = _c[_i];\r\n            if (comparator(entry)) {\r\n                return entry;\r\n            }\r\n        }\r\n        return void 0;\r\n    };\r\n    var startListening = function (options) {\r\n        var entry = findListenerEntry(function (existingEntry) { return existingEntry.effect === options.effect; });\r\n        if (!entry) {\r\n            entry = createListenerEntry(options);\r\n        }\r\n        return insertEntry(entry);\r\n    };\r\n    var stopListening = function (options) {\r\n        var _c = getListenerEntryPropsFrom(options), type = _c.type, effect = _c.effect, predicate = _c.predicate;\r\n        var entry = findListenerEntry(function (entry2) {\r\n            var matchPredicateOrType = typeof type === \"string\" ? entry2.type === type : entry2.predicate === predicate;\r\n            return matchPredicateOrType && entry2.effect === effect;\r\n        });\r\n        if (entry) {\r\n            entry.unsubscribe();\r\n            if (options.cancelActive) {\r\n                cancelActiveListeners(entry);\r\n            }\r\n        }\r\n        return !!entry;\r\n    };\r\n    var notifyListener = function (entry, action, api, getOriginalState) { return __async(_this, null, function () {\r\n        var internalTaskController, take, autoJoinPromises, listenerError_1;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    internalTaskController = new AbortController();\r\n                    take = createTakePattern(startListening, internalTaskController.signal);\r\n                    autoJoinPromises = [];\r\n                    _c.label = 1;\r\n                case 1:\r\n                    _c.trys.push([1, 3, 4, 6]);\r\n                    entry.pending.add(internalTaskController);\r\n                    return [4 /*yield*/, Promise.resolve(entry.effect(action, assign({}, api, {\r\n                            getOriginalState: getOriginalState,\r\n                            condition: function (predicate, timeout) { return take(predicate, timeout).then(Boolean); },\r\n                            take: take,\r\n                            delay: createDelay(internalTaskController.signal),\r\n                            pause: createPause(internalTaskController.signal),\r\n                            extra: extra,\r\n                            signal: internalTaskController.signal,\r\n                            fork: createFork(internalTaskController.signal, autoJoinPromises),\r\n                            unsubscribe: entry.unsubscribe,\r\n                            subscribe: function () {\r\n                                listenerMap.set(entry.id, entry);\r\n                            },\r\n                            cancelActiveListeners: function () {\r\n                                entry.pending.forEach(function (controller, _, set) {\r\n                                    if (controller !== internalTaskController) {\r\n                                        abortControllerWithReason(controller, listenerCancelled);\r\n                                        set.delete(controller);\r\n                                    }\r\n                                });\r\n                            }\r\n                        })))];\r\n                case 2:\r\n                    _c.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 3:\r\n                    listenerError_1 = _c.sent();\r\n                    if (!(listenerError_1 instanceof TaskAbortError)) {\r\n                        safelyNotifyError(onError, listenerError_1, {\r\n                            raisedBy: \"effect\"\r\n                        });\r\n                    }\r\n                    return [3 /*break*/, 6];\r\n                case 4: return [4 /*yield*/, Promise.allSettled(autoJoinPromises)];\r\n                case 5:\r\n                    _c.sent();\r\n                    abortControllerWithReason(internalTaskController, listenerCompleted);\r\n                    entry.pending.delete(internalTaskController);\r\n                    return [7 /*endfinally*/];\r\n                case 6: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); };\r\n    var clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\r\n    var middleware = function (api) { return function (next) { return function (action) {\r\n        if (!isAction(action)) {\r\n            return next(action);\r\n        }\r\n        if (addListener.match(action)) {\r\n            return startListening(action.payload);\r\n        }\r\n        if (clearAllListeners.match(action)) {\r\n            clearListenerMiddleware();\r\n            return;\r\n        }\r\n        if (removeListener.match(action)) {\r\n            return stopListening(action.payload);\r\n        }\r\n        var originalState = api.getState();\r\n        var getOriginalState = function () {\r\n            if (originalState === INTERNAL_NIL_TOKEN) {\r\n                throw new Error(alm + \": getOriginalState can only be called synchronously\");\r\n            }\r\n            return originalState;\r\n        };\r\n        var result;\r\n        try {\r\n            result = next(action);\r\n            if (listenerMap.size > 0) {\r\n                var currentState = api.getState();\r\n                var listenerEntries = Array.from(listenerMap.values());\r\n                for (var _i = 0, listenerEntries_1 = listenerEntries; _i < listenerEntries_1.length; _i++) {\r\n                    var entry = listenerEntries_1[_i];\r\n                    var runListener = false;\r\n                    try {\r\n                        runListener = entry.predicate(action, currentState, originalState);\r\n                    }\r\n                    catch (predicateError) {\r\n                        runListener = false;\r\n                        safelyNotifyError(onError, predicateError, {\r\n                            raisedBy: \"predicate\"\r\n                        });\r\n                    }\r\n                    if (!runListener) {\r\n                        continue;\r\n                    }\r\n                    notifyListener(entry, action, api, getOriginalState);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            originalState = INTERNAL_NIL_TOKEN;\r\n        }\r\n        return result;\r\n    }; }; };\r\n    return {\r\n        middleware: middleware,\r\n        startListening: startListening,\r\n        stopListening: stopListening,\r\n        clearListeners: clearListenerMiddleware\r\n    };\r\n}\r\n// src/autoBatchEnhancer.ts\r\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\r\nvar prepareAutoBatched = function () { return function (payload) {\r\n    var _c;\r\n    return ({\r\n        payload: payload,\r\n        meta: (_c = {}, _c[SHOULD_AUTOBATCH] = true, _c)\r\n    });\r\n}; };\r\nvar promise;\r\nvar queueMicrotaskShim = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : globalThis) : function (cb) { return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) { return setTimeout(function () {\r\n    throw err;\r\n}, 0); }); };\r\nvar createQueueWithTimer = function (timeout) {\r\n    return function (notify) {\r\n        setTimeout(notify, timeout);\r\n    };\r\n};\r\nvar rAF = typeof window !== \"undefined\" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10);\r\nvar autoBatchEnhancer = function (options) {\r\n    if (options === void 0) { options = { type: \"raf\" }; }\r\n    return function (next) { return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var store = next.apply(void 0, args);\r\n        var notifying = true;\r\n        var shouldNotifyAtEndOfTick = false;\r\n        var notificationQueued = false;\r\n        var listeners = new Set();\r\n        var queueCallback = options.type === \"tick\" ? queueMicrotaskShim : options.type === \"raf\" ? rAF : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\r\n        var notifyListeners = function () {\r\n            notificationQueued = false;\r\n            if (shouldNotifyAtEndOfTick) {\r\n                shouldNotifyAtEndOfTick = false;\r\n                listeners.forEach(function (l) { return l(); });\r\n            }\r\n        };\r\n        return Object.assign({}, store, {\r\n            subscribe: function (listener2) {\r\n                var wrappedListener = function () { return notifying && listener2(); };\r\n                var unsubscribe = store.subscribe(wrappedListener);\r\n                listeners.add(listener2);\r\n                return function () {\r\n                    unsubscribe();\r\n                    listeners.delete(listener2);\r\n                };\r\n            },\r\n            dispatch: function (action) {\r\n                var _a;\r\n                try {\r\n                    notifying = !((_a = action == null ? void 0 : action.meta) == null ? void 0 : _a[SHOULD_AUTOBATCH]);\r\n                    shouldNotifyAtEndOfTick = !notifying;\r\n                    if (shouldNotifyAtEndOfTick) {\r\n                        if (!notificationQueued) {\r\n                            notificationQueued = true;\r\n                            queueCallback(notifyListeners);\r\n                        }\r\n                    }\r\n                    return store.dispatch(action);\r\n                }\r\n                finally {\r\n                    notifying = true;\r\n                }\r\n            }\r\n        });\r\n    }; };\r\n};\r\n// src/index.ts\r\n(0,immer__WEBPACK_IMPORTED_MODULE_2__.enableES5)();\r\n\r\n//# sourceMappingURL=redux-toolkit.esm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\n");

/***/ })

};
;